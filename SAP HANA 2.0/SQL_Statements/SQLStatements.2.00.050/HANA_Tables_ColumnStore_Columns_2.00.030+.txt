SELECT
/* 

[NAME]

HANA_Tables_ColumnStore_Columns_2.00.030+

[DESCRIPTION]

- Provides information for columns located in column store

[SOURCE]

- SAP Note 1969700

[DETAILS AND RESTRICTIONS]

- M_CS_ALL_COLUMN_STATISTICS available with SAP HANA >= 2.00.030
- M_CS_ALL_COLUMNS.PERSISTENT_MEMORY_SIZE_IN_TOTAL available with SAP HANA >= 2.00.030

[VALID FOR]

- Revisions:              >= 2.00.030

[SQL COMMAND VERSION]

- 2014/03/13:  1.0 (initial version)
- 2014/04/02:  1.1 (NUM_DISTINCT included)
- 2014/07/09:  1.2 (LOADED added)
- 2014/10/20:  1.3 (OBJECT_LEVEL added)
- 2015/01/17:  1.4 (FULLTEXT_INDEXES included)
- 2015/07/21:  1.5 (EXCLUDE_PK_AND_UNIQUE included)
- 2017/03/21:  1.6 (LAST_LOAD_TIME included)
- 2018/12/17:  1.7 (dedicated 2.00.030+ version including M_CS_ALL_COLUMN_STATISTICS)
- 2019/03/16:  1.8 (PERSISTENT_MEMORY included)
- 2019/06/05:  1.9 (persistent memory details considered)
- 2019/06/26:  2.0 (COLUMN_NAME filter added)
- 2019/11/03:  2.1 (ONLY_PK_AND_UNIQUE added)

[INVOLVED TABLES]

- CS_JOIN_CONDITIONS
- CONSTRAINTS
- INDEX_COLUMNS
- INDEXES
- M_CS_ALL_COLUMNS
- M_CS_ALL_COLUMN_STATISTICS
- TABLE_COLUMNS

[INPUT PARAMETERS]

- HOST

  Host name

  'saphana01'     --> Specic host saphana01
  'saphana%'      --> All hosts starting with saphana
  '%'             --> All hosts

- PORT

  Port number

  '30007'         --> Port 30007
  '%03'           --> All ports ending with '03'
  '%'             --> No restriction to ports

- SERVICE_NAME

  Service name

  'indexserver'   --> Specific service indexserver
  '%server'       --> All services ending with 'server'
  '%'             --> All services  

- SCHEMA_NAME

  Schema name or pattern

  'SAPSR3'        --> Specific schema SAPSR3
  'SAP%'          --> All schemata starting with 'SAP'
  '%'             --> All schemata

- TABLE_NAME

  Table name or pattern

  'T000'          --> Specific table T000
  'T%'            --> All tables starting with 'T'
  '%'             --> All tables

- COLUMN_NAME

  Column name

  'MATNR'         --> Column MATNR
  'Z%'            --> Columns starting with "Z"
  '%'             --> No restriction related to columns

- DATA_TYPE

  Column data type

  'NCLOB'         --> Type 'NCLOB'
  '%LOB%'         --> All types containing 'LOB'
  '%'             --> All types

- COLUMN_NAME_LENGTH_LIMIT

  Maximum length of displayed column name (truncation if name is longer)

  40              --> Display a maximum of 40 characters of column name
  -1              --> Display complete column names

- ATTRIBUTE_TYPE

  Column attribute type

  'ROWID'         --> Restriction to columns with internal attribute type 'ROWID'
  'TREX%'         --> Restriction to columns with internal attribute type starting with 'TREX'
  '%'             --> No restriction by internal attribute type

- LOADED

  Column memory load state

  'TRUE'          --> Column loaded into memory
  'FALSE'         --> Columns not loaded into memory
  '%'             --> No restriction related to column load state

- PAGEABLE

  Restriction to pageable / non-pageable columns (paged attributes, see SAP Note 1871386)

  'YES'           --> Only show columns that can be defined as paged attributes
  'NO'            --> Only show columns that cannot be defined as paged attributes
  '%'             --> No restriction related to paged attributes

- PERSISTENT_MEMORY

  Utilization of persistent memory (SAP Note 2700084)

  'TRUE'          --> Only show tables using persistent memory
  'FALSE'         --> Only show tables not using persistent memory
  '%'             --> No restriction related to persistent memory

- ONLY_INTERNAL_COLUMNS

  Activates / deactivates restriction to internal columns

  'X'             --> Only internal columns (typically starting with '$') are considered
  ' '             --> All columns are considered

- EXCLUDE_PK_AND_UNIQUE

  Possibility to exclude columns related to primary keys and unique indexes

  'X'             --> Exclude columns related to primary keys and unique indexes
  ' '             --> No restriction related to primary keys and unique indexes

- ONLY_PK_AND_UNIQUE

  Possibility to restrict output to columns related to primary keys and unique indexes

  'X'             --> Only display (concat) columns related to primary keys and unique indexes
  ' '             --> No restriction related to primary keys and unique indexes

- MIN_MEM_SIZE_MB

  Minimum memory size (MB)

  10              --> Only consider results with a memory size of at least 10 MB
  -1              --> No restriction related to minimum memory size

- ONLY_UNUSED_CONCAT_ATTRIBUTES

  Possibility to restrict the output to concat attributes that aren't used

  'X'             --> Only show concat attributes (i.e. multi-column indexes) that aren't used so far
  ' '             --> No restriction related to concat attributes

- GENERATE_DROP_CONCAT_ATT_COMMAND

  Activates / deactivates the generation of a DROP command for potentially droppable concat attributes (SAP Note 1986747)

  'X'             --> Drop command is generated for potentially droppable concat attributes
  ' '             --> No drop commands are generated

- OBJECT_LEVEL

  Controls display of partitions

  'PARTITION'     --> Result is shown on partition level
  'TABLE'         --> Result is shown on table level

- AGGREGATE_BY

  Aggregation criteria (possible values can be found in comment)

  'TIME'          --> Aggregation by time
  'HOST, PORT'    --> Aggregation by host and port
  'NONE'          --> No aggregation

- ORDER_BY

  Sort order

  'SIZE'          --> Sorting by size (available values are provided in comment)
  'TABLE'         --> Sorting by table name

- RESULT_ROWS

  Number of records to be returned by the query

  100             --> Return a maximum number of 100 records
  -1              --> Return all records

[OUTPUT PARAMETERS]

- HOST:            Host name
- PORT:            Port
- SERVICE:         Service name
- SCHEMA_NAME:     Schema name
- TABLE_NAME:      Table name
- COLUMN_NAME:     Column name
- NUM_COLS:        Number of columns
- NUM_DISTINCT:    Distinct values
- COMPRESSION:     Column compression type
- DATA_TYPE:       Column data type
- ATTRIBUTE_TYPE:  Column attribute type
- LOADED:          TRUE if column is loaded into memory, otherwise FALSE
- PAGEABLE:        Indicates if column can be set up as paged attribute or not
- USED_FOR:        Reason of (internal) column
- MEM_TOTAL_MB:    Total column size in memory (MB)
- MEM_INDEX_MB:    Index column size in memory (MB)
- MEM_PERS_MB:     Persistent memory size (MB)
- SCANNED_RECORDS: Number of scanned records
- INDEX_LOOKUPS:   Number of index lookups
- LAST_LOAD_TIME:  Timestamp of last column load
- COMMENT:         Column comment
- DROP_COMMAND:    Command to drop a potentially droppable concat attribute

[EXAMPLE OUTPUT]

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|HOST     |SERVICE_NAME|SCHEMA_NAME|TABLE_NAME|COLUMN_NAME      |NUM_DISTINCT|DATA_TYPE|ATTRIBUTE_TYPE   |LOADED|PAGEABLE|USED_FOR                         |MEM_SIZE_MB|DROP_COMMAND|
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|saphana21|indexserver |SAPECC     |DBSTATC   |$trexexternalkey$|         504|         |TREX_EXTERNAL_KEY|TRUE  |NO      |Index _SYS_TREE_CS_#173463_#0_#P0|       0.01|            |
|saphana21|indexserver |SAPECC     |DBSTATC   |DBOBJ            |         498|NVARCHAR |                 |TRUE  |NO      |                                 |       0.00|            |
|saphana21|indexserver |SAPECC     |DBSTATC   |DBTYP            |           3|NVARCHAR |                 |TRUE  |NO      |                                 |       0.00|            |
|saphana21|indexserver |SAPECC     |DBSTATC   |DOTYP            |           1|NVARCHAR |                 |TRUE  |NO      |                                 |       0.00|            |
|saphana21|indexserver |SAPECC     |DBSTATC   |OBJOW            |           1|NVARCHAR |                 |TRUE  |NO      |                                 |       0.00|            |
|saphana21|indexserver |SAPECC     |DBSTATC   |$trex_udiv$      |          -1|         |TREX_UDIV        |FALSE |NO      |                                 |       0.00|            |
|saphana21|indexserver |SAPECC     |DBSTATC   |ACTIV            |           3|NVARCHAR |                 |TRUE  |YES     |                                 |       0.00|            |
|saphana21|indexserver |SAPECC     |DBSTATC   |$rowid$          |         505|         |ROWID            |TRUE  |NO      |                                 |       0.00|            |
|saphana21|indexserver |SAPECC     |DBSTATC   |AEDAT            |          -1|NVARCHAR |                 |FALSE |YES     |                                 |       0.00|            |
|saphana21|indexserver |SAPECC     |DBSTATC   |AMETH            |          -1|NVARCHAR |                 |FALSE |YES     |                                 |       0.00|            |
|saphana21|indexserver |SAPECC     |DBSTATC   |DURAT            |          -1|NVARCHAR |                 |FALSE |YES     |                                 |       0.00|            |
|saphana21|indexserver |SAPECC     |DBSTATC   |HISTO            |          -1|NVARCHAR |                 |FALSE |YES     |                                 |       0.00|            |
|saphana21|indexserver |SAPECC     |DBSTATC   |OBJEC            |          -1|NVARCHAR |                 |FALSE |YES     |                                 |       0.00|            |
|saphana21|indexserver |SAPECC     |DBSTATC   |OPTIO            |          -1|NVARCHAR |                 |FALSE |YES     |                                 |       0.00|            |
|saphana21|indexserver |SAPECC     |DBSTATC   |PLAND            |          -1|NVARCHAR |                 |FALSE |YES     |                                 |       0.00|            |
|saphana21|indexserver |SAPECC     |DBSTATC   |TDDAT            |          -1|NVARCHAR |                 |FALSE |YES     |                                 |       0.00|            |
|saphana21|indexserver |SAPECC     |DBSTATC   |TOBDO            |          -1|NVARCHAR |                 |FALSE |YES     |                                 |       0.00|            |
|saphana21|indexserver |SAPECC     |DBSTATC   |VWTYP            |          -1|NVARCHAR |                 |FALSE |YES     |                                 |       0.00|            |
|saphana21|indexserver |SAPECC     |DBSTATC   |SIGNI            |          -1|SMALLINT |                 |FALSE |YES     |                                 |       0.00|            |
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

*/

  HOST,
  PORT,
  SERVICE_NAME SERVICE,
  SCHEMA_NAME,
  TABLE_NAME,
  COLUMN_NAME,
  LPAD(NUM_COLUMNS, 8) NUM_COLS,
  NUM_DISTINCT,
  COMPRESSION,
  DATA_TYPE,
  ATTRIBUTE_TYPE,
  LOADED,
  PAGEABLE,
  USED_FOR,
  LPAD(TO_DECIMAL(MEM_TOTAL_MB, 11, 2), 12) MEM_TOTAL_MB,
  LPAD(TO_DECIMAL(MEM_INDEX_MB, 11, 2), 12) MEM_INDEX_MB,
  LPAD(TO_DECIMAL(MEM_PERS_MB, 11, 2), 11) MEM_PERS_MB,
  LPAD(SCANNED_RECORDS, 17) SCANNED_RECORDS,
  LPAD(INDEX_LOOKUPS, 13) INDEX_LOOKUPS,
  TO_CHAR(LAST_LOAD_TIME, 'YYYY/MM/DD HH24:MI:SS') LAST_LOAD_TIME,
  COMMENT,
  DROP_COMMAND
FROM
( SELECT
    HOST,
    PORT,
    SERVICE_NAME,
    SCHEMA_NAME,
    TABLE_NAME,
    MAP(COLUMN_NAME_LENGTH_LIMIT, -1, COLUMN_NAME, SUBSTR(COLUMN_NAME, 1, COLUMN_NAME_LENGTH_LIMIT) ||
      CASE WHEN LENGTH(COLUMN_NAME) > COLUMN_NAME_LENGTH_LIMIT THEN '...' ELSE '' END) COLUMN_NAME,
    NUM_COLUMNS,
    NUM_DISTINCT,
    COMPRESSION,
    DATA_TYPE,
    IFNULL(ATTRIBUTE_TYPE, '') ATTRIBUTE_TYPE,
    LOADED,
    LAST_LOAD_TIME,
    PAGEABLE,
    MEM_TOTAL_MB,
    MEM_INDEX_MB,
    MEM_PERS_MB,
    SCANNED_RECORDS,
    INDEX_LOOKUPS,
    COMMENT,
    CASE
      WHEN ATTRIBUTE_TYPE = 'TREX_EXTERNAL_KEY' THEN USED_FOR_PK ELSE USED_FOR END USED_FOR,
    CASE
      WHEN ATTRIBUTE_TYPE = 'CONCAT_ATTRIBUTE' AND USED_FOR NOT LIKE 'Index %' AND USED_FOR NOT LIKE 'View %' AND 
        USED_FOR NOT LIKE 'Unique index %' AND GENERATE_DROP_CONCAT_ATT_COMMAND = 'X' THEN
        'ALTER TABLE "' || SCHEMA_NAME || '"."' || TABLE_NAME || '" WITH PARAMETERS (' || CHAR(39) || 'DELETE_CONCAT_ATTRIBUTE' || 
        CHAR(39) || '=' || CHAR(39) || COLUMN_NAME || CHAR(39) || ')'
      ELSE
        ''
      END DROP_COMMAND,
    ROW_NUMBER () OVER (ORDER BY MAP(ORDER_BY, 'SIZE', MEM_TOTAL_MB, 1) DESC, MAP(ORDER_BY, 'TABLE', TABLE_NAME), COLUMN_NAME) ROW_NUM,
    RESULT_ROWS
  FROM
  ( SELECT
      CASE WHEN AGGREGATE_BY = 'NONE' OR INSTR(AGGREGATE_BY, 'HOST')        != 0 THEN HOST              ELSE MAP(BI_HOST, '%', 'any', BI_HOST)                           END HOST,
      CASE WHEN AGGREGATE_BY = 'NONE' OR INSTR(AGGREGATE_BY, 'PORT')        != 0 THEN TO_VARCHAR(PORT)  ELSE MAP(BI_PORT, '%', 'any', BI_PORT)                           END PORT,
      CASE WHEN AGGREGATE_BY = 'NONE' OR INSTR(AGGREGATE_BY, 'SERVICE')     != 0 THEN SERVICE_NAME      ELSE MAP(BI_SERVICE_NAME, '%', 'any', BI_SERVICE_NAME)           END SERVICE_NAME,
      CASE WHEN AGGREGATE_BY = 'NONE' OR INSTR(AGGREGATE_BY, 'SCHEMA')      != 0 THEN SCHEMA_NAME       ELSE MAP(BI_SCHEMA_NAME, '%', 'any', BI_SCHEMA_NAME)             END SCHEMA_NAME,
      CASE WHEN AGGREGATE_BY = 'NONE' OR INSTR(AGGREGATE_BY, 'TABLE')       != 0 THEN TABLE_NAME        ELSE MAP(BI_TABLE_NAME, '%', 'any', BI_TABLE_NAME)               END TABLE_NAME,
      CASE WHEN AGGREGATE_BY = 'NONE' OR INSTR(AGGREGATE_BY, 'COLUMN')      != 0 THEN COLUMN_NAME       ELSE 'any'                                                       END COLUMN_NAME,
      CASE WHEN AGGREGATE_BY = 'NONE' OR INSTR(AGGREGATE_BY, 'DATA_TYPE')   != 0 THEN DATA_TYPE         ELSE MAP(BI_DATA_TYPE, '%', 'any', BI_DATA_TYPE)                 END DATA_TYPE,
      CASE WHEN AGGREGATE_BY = 'NONE' OR INSTR(AGGREGATE_BY, 'COMPRESSION') != 0 THEN COMPRESSION_TYPE  ELSE MAP(BI_COMP_TYPE, '%', 'any', BI_COMP_TYPE)                 END COMPRESSION,
      CASE WHEN AGGREGATE_BY = 'NONE' OR INSTR(AGGREGATE_BY, 'ATT_TYPE')    != 0 THEN ATTRIBUTE_TYPE    ELSE MAP(BI_ATTRIBUTE_TYPE, '%', 'any', BI_ATTRIBUTE_TYPE)       END ATTRIBUTE_TYPE,
      CASE WHEN AGGREGATE_BY = 'NONE' OR INSTR(AGGREGATE_BY, 'LOADED')      != 0 THEN LOADED            ELSE MAP(BI_LOADED, '%', 'any', BI_LOADED)                       END LOADED,
      CASE WHEN AGGREGATE_BY = 'NONE' OR INSTR(AGGREGATE_BY, 'PAGEABLE')    != 0 THEN PAGEABLE          ELSE MAP(BI_PAGEABLE, '%', 'any', BI_PAGEABLE)                   END PAGEABLE,
      CASE WHEN AGGREGATE_BY = 'NONE' OR INSTR(AGGREGATE_BY, 'PERSMEM')     != 0 THEN PERSISTENT_MEMORY ELSE MAP(BI_PERSISTENT_MEMORY, '%', 'any', BI_PERSISTENT_MEMORY) END PERSISTENT_MEMORY,
      CASE WHEN AGGREGATE_BY = 'NONE'                                            THEN COMMENT           ELSE 'any'                                                       END COMMENT,
      COUNT(*) NUM_COLUMNS,
      LPAD(MAX(NUM_DISTINCT), 12) NUM_DISTINCT,
      SUM(MEM_TOTAL_MB) MEM_TOTAL_MB,
      SUM(MEM_INDEX_MB) MEM_INDEX_MB,
      SUM(MEM_PERS_MB) MEM_PERS_MB,
      SUM(SCANNED_RECORD_COUNT) SCANNED_RECORDS,
      SUM(INDEX_LOOKUP_COUNT) INDEX_LOOKUPS,
      IFNULL(MAP(MIN(USED_FOR), MAX(USED_FOR), MIN(USED_FOR), ''), '') USED_FOR,
      IFNULL(MAP(MIN(USED_FOR_PK), MAX(USED_FOR_PK), MIN(USED_FOR_PK), ''), '') USED_FOR_PK,
      MAX(LAST_LOAD_TIME) LAST_LOAD_TIME,
      COLUMN_NAME_LENGTH_LIMIT,
      GENERATE_DROP_CONCAT_ATT_COMMAND,
      ORDER_BY,
      RESULT_ROWS
    FROM
    ( SELECT
        C.HOST,
        C.PORT,
        S.SERVICE_NAME,
        C.SCHEMA_NAME,
        C.TABLE_NAME || CASE WHEN BI.OBJECT_LEVEL = 'PARTITION' AND C.PART_ID != 0 THEN CHAR(32) || '(' || C.PART_ID || ')' ELSE '' END TABLE_NAME, 
        C.COLUMN_NAME,
        C.NUM_DISTINCT,
        C.DATA_TYPE,
        C.COMPRESSION_TYPE,
        C.ATTRIBUTE_TYPE,
        C.LOADED,
        C.LAST_LOAD_TIME,
        C.PAGEABLE,
        C.PERSISTENT_MEMORY,
        C.MEM_TOTAL_MB,
        C.MEM_INDEX_MB,
        C.MEM_PERS_MB,
        C.SCANNED_RECORD_COUNT,
        C.INDEX_LOOKUP_COUNT,
        C.COMMENT,
        BI.HOST BI_HOST,
        BI.PORT BI_PORT,
        BI.SERVICE_NAME BI_SERVICE_NAME,
        BI.SCHEMA_NAME BI_SCHEMA_NAME,
        BI.TABLE_NAME BI_TABLE_NAME,
        BI.COLUMN_NAME_LENGTH_LIMIT,
        BI.COMPRESSION_TYPE BI_COMP_TYPE,
        BI.DATA_TYPE BI_DATA_TYPE,
        BI.ATTRIBUTE_TYPE BI_ATTRIBUTE_TYPE,
        BI.LOADED BI_LOADED,
        BI.PAGEABLE BI_PAGEABLE,
        BI.PERSISTENT_MEMORY BI_PERSISTENT_MEMORY,
        BI.GENERATE_DROP_CONCAT_ATT_COMMAND,
        BI.AGGREGATE_BY,
        BI.ORDER_BY,
        BI.RESULT_ROWS,
        ( SELECT
            MIN(USED_FOR)
          FROM
          ( SELECT
              SCHEMA_NAME,
              TABLE_NAME,
              'Index ' || INDEX_NAME USED_FOR,
              CASE NUM_COLUMNS
                WHEN 1 THEN COLUMN_NAME_1
                ELSE COL01 || COL02 || COL03 || COL04 || COL05 || COL06 || COL07 || COL08 ||
                  COL09 || COL10 || COL11 || COL12 || COL13 || COL14 || COL15 || COL16 ||
                  MAP(COL01, '', '', '$')
              END COLUMN_NAME
            FROM
            ( SELECT
                SCHEMA_NAME,
                TABLE_NAME,
                INDEX_NAME,
                COUNT(*) NUM_COLUMNS,
                MAX(MAP(POSITION,  1, COLUMN_NAME, '')) COLUMN_NAME_1,
                MAX(MAP(POSITION,  1, '$' || COLUMN_NAME, '')) COL01,
                MAX(MAP(POSITION,  2, '$' || COLUMN_NAME, '')) COL02,
                MAX(MAP(POSITION,  3, '$' || COLUMN_NAME, '')) COL03,
                MAX(MAP(POSITION,  4, '$' || COLUMN_NAME, '')) COL04,
                MAX(MAP(POSITION,  5, '$' || COLUMN_NAME, '')) COL05,
                MAX(MAP(POSITION,  6, '$' || COLUMN_NAME, '')) COL06,
                MAX(MAP(POSITION,  7, '$' || COLUMN_NAME, '')) COL07,
                MAX(MAP(POSITION,  8, '$' || COLUMN_NAME, '')) COL08,
                MAX(MAP(POSITION,  9, '$' || COLUMN_NAME, '')) COL09,
                MAX(MAP(POSITION, 10, '$' || COLUMN_NAME, '')) COL10,
                MAX(MAP(POSITION, 11, '$' || COLUMN_NAME, '')) COL11,
                MAX(MAP(POSITION, 12, '$' || COLUMN_NAME, '')) COL12,
                MAX(MAP(POSITION, 13, '$' || COLUMN_NAME, '')) COL13,
                MAX(MAP(POSITION, 14, '$' || COLUMN_NAME, '')) COL14,
                MAX(MAP(POSITION, 15, '$' || COLUMN_NAME, '')) COL15,
                MAX(MAP(POSITION, 16, '$' || COLUMN_NAME, '')) COL16
              FROM
                INDEX_COLUMNS
              GROUP BY
                SCHEMA_NAME,
                TABLE_NAME,
                INDEX_NAME
            )
            UNION ALL
            ( SELECT
                SCHEMA_NAME,
                TABLE_NAME,
                'Unique index ' || CONSTRAINT_NAME USED_FOR,
                '$uc_' || CONSTRAINT_NAME || '$' COLUMN_NAME
              FROM
                CONSTRAINTS
              GROUP BY
                SCHEMA_NAME,
                TABLE_NAME,
                CONSTRAINT_NAME
            )
            UNION ALL
            ( SELECT
                TABLE_SCHEMA_NAME1 SCHEMA_NAME,
                TABLE_NAME1 TABLE_NAME,
                'View ' || VIEW_NAME USED_FOR,
                COLUMN_NAME1 COLUMN_NAME
              FROM
                CS_JOIN_CONDITIONS
              WHERE
                COLUMN_NAME1 LIKE '$%'
            )
            UNION ALL
            ( SELECT
                TABLE_SCHEMA_NAME2 SCHEMA_NAME,
                TABLE_NAME2 TABLE_NAME,
                'View ' || VIEW_NAME USED_FOR,
                COLUMN_NAME2 COLUMN_NAME
              FROM
                CS_JOIN_CONDITIONS
              WHERE
                COLUMN_NAME2 LIKE '$%'
            )
            UNION ALL
            ( SELECT
                SCHEMA_NAME,
                TABLE_NAME,
                'Fulltext index' || CHAR(32) || INDEX_NAME USED_FOR,
                INTERNAL_COLUMN_NAME COLUMN_NAME
              FROM
                FULLTEXT_INDEXES
            )
          ) IC
          WHERE
            IC.SCHEMA_NAME = C.SCHEMA_NAME AND
            IC.TABLE_NAME = C.TABLE_NAME AND
            IC.COLUMN_NAME = C.COLUMN_NAME
        ) USED_FOR,
        ( SELECT
            'Primary key index ' || INDEX_NAME USED_FOR
          FROM
            INDEXES UI
          WHERE
            UI.SCHEMA_NAME = C.SCHEMA_NAME AND
            UI.TABLE_NAME = C.TABLE_NAME AND
            UI.CONSTRAINT = 'PRIMARY KEY' AND
            C.COLUMN_NAME = '$trexexternalkey$'
        ) USED_FOR_PK
      FROM
      ( SELECT                                      /* Modification section */
          '%' HOST,
          '%' PORT,
          '%' SERVICE_NAME,
          'SAP%' SCHEMA_NAME,
          '%' TABLE_NAME,
          '%' COLUMN_NAME,
          '%' DATA_TYPE,
          -1  COLUMN_NAME_LENGTH_LIMIT,
          '%' ATTRIBUTE_TYPE,       /* CONCAT_ATTRIBUTE, TREX_EXTERNAL_KEY, TREX_UDIV, ROWID, TEXT, UNKNOWN, % */
          '%' COMPRESSION_TYPE,
          '%' LOADED,
          '%' PAGEABLE,
          '%' PERSISTENT_MEMORY,
          1000 MIN_MEM_SIZE_MB,
          ' ' ONLY_INTERNAL_COLUMNS,
          ' ' EXCLUDE_PK_AND_UNIQUE,
          ' ' ONLY_PK_AND_UNIQUE,
          ' ' ONLY_UNUSED_CONCAT_ATTRIBUTES,
          ' ' GENERATE_DROP_CONCAT_ATT_COMMAND,
          'TABLE' OBJECT_LEVEL,    /* TABLE, PARTITION */
          'NONE' AGGREGATE_BY,     /* HOST, PORT, SERVICE, SCHEMA, TABLE, COLUMN, DATA_TYPE, ATT_TYPE, PAGEABLE, LOADED, COMPRESSION, PERSMEM or combinations, NONE for no aggregation */
          'SIZE' ORDER_BY,                          /* SIZE, TABLE */
          -1 RESULT_ROWS
        FROM
          DUMMY
      ) BI,
        M_SERVICES S,
      ( SELECT
          C.HOST,
          C.PORT,
          C.SCHEMA_NAME,
          C.TABLE_NAME,
          C.PART_ID,
          C.COLUMN_NAME,
          C.DISTINCT_COUNT NUM_DISTINCT,
          C.COMPRESSION_TYPE,
          C.LAST_LOAD_TIME,
          C.INTERNAL_ATTRIBUTE_TYPE ATTRIBUTE_TYPE,
          ( C.MEMORY_SIZE_IN_TOTAL + C.PERSISTENT_MEMORY_SIZE_IN_TOTAL ) / 1024 / 1024 MEM_TOTAL_MB,
          ( C.MAIN_MEMORY_SIZE_IN_INDEX + C.MAIN_PERSISTENT_MEMORY_SIZE_IN_INDEX + C.DELTA_MEMORY_SIZE_IN_INDEX ) / 1024 / 1024 MEM_INDEX_MB,
          C.PERSISTENT_MEMORY_SIZE_IN_TOTAL / 1024 / 1024 MEM_PERS_MB,
          C.LOADED,
          IFNULL(C.PERSISTENT_MEMORY, '') PERSISTENT_MEMORY,
          CS.SCANNED_RECORD_COUNT,
          CS.INDEX_LOOKUP_COUNT,
          IFNULL(TC.COMMENTS, '') COMMENT,
          IFNULL(TC.DATA_TYPE_NAME, '') DATA_TYPE,
          CASE WHEN BITAND(C.IMPLEMENTATION_FLAGS, 64) > 0 THEN 'YES' ELSE 'NO' END PAGEABLE
        FROM
          M_CS_ALL_COLUMNS C INNER JOIN
          M_CS_ALL_COLUMN_STATISTICS CS ON
            C.SCHEMA_NAME = CS.SCHEMA_NAME AND
            C.TABLE_NAME = CS.TABLE_NAME AND
            C.COLUMN_NAME = CS.COLUMN_NAME AND
            C.PART_ID = CS.PART_ID LEFT OUTER JOIN
          TABLE_COLUMNS TC ON
            C.SCHEMA_NAME = TC.SCHEMA_NAME AND
            C.TABLE_NAME = TC.TABLE_NAME AND
            C.COLUMN_NAME = TC.COLUMN_NAME LEFT OUTER JOIN
          INDEX_COLUMNS IC ON
            C.SCHEMA_NAME = IC.SCHEMA_NAME AND
            C.TABLE_NAME = IC.TABLE_NAME AND
            C.COLUMN_NAME = IC.COLUMN_NAME AND
            IC.CONSTRAINT = 'PRIMARY KEY'
      ) C
      WHERE
        S.HOST LIKE BI.HOST AND
        TO_VARCHAR(S.PORT) LIKE BI.PORT AND
        S.SERVICE_NAME LIKE BI.SERVICE_NAME AND
        C.HOST = S.HOST AND
        C.PORT = S.PORT AND
        C.SCHEMA_NAME LIKE BI.SCHEMA_NAME AND
        C.TABLE_NAME LIKE BI.TABLE_NAME AND
        C.COLUMN_NAME LIKE BI.COLUMN_NAME AND
        IFNULL(C.ATTRIBUTE_TYPE, '') LIKE BI.ATTRIBUTE_TYPE AND
        C.COMPRESSION_TYPE LIKE BI.COMPRESSION_TYPE AND
        ( BI.ONLY_INTERNAL_COLUMNS = ' ' OR C.ATTRIBUTE_TYPE IS NOT NULL ) AND
        ( BI.EXCLUDE_PK_AND_UNIQUE = ' ' OR ( IFNULL(C.ATTRIBUTE_TYPE, '') != 'TREX_EXTERNAL_KEY' AND C.COLUMN_NAME NOT LIKE '$uc%' ) ) AND
        ( BI.ONLY_PK_AND_UNIQUE = ' ' OR IFNULL(C.ATTRIBUTE_TYPE, '') = 'TREX_EXTERNAL_KEY' OR C.COLUMN_NAME LIKE '$uc%' ) AND
        C.PAGEABLE LIKE BI.PAGEABLE AND
        C.LOADED LIKE BI.LOADED AND
        C.PERSISTENT_MEMORY LIKE BI.PERSISTENT_MEMORY AND
        C.DATA_TYPE LIKE BI.DATA_TYPE AND
        ( BI.MIN_MEM_SIZE_MB = -1 OR C.MEM_TOTAL_MB >= BI.MIN_MEM_SIZE_MB ) AND
        ( BI.ONLY_UNUSED_CONCAT_ATTRIBUTES = ' ' OR
          BI.ONLY_UNUSED_CONCAT_ATTRIBUTES = 'X' AND C.INDEX_LOOKUP_COUNT = 0 AND C.ATTRIBUTE_TYPE = 'CONCAT_ATTRIBUTE'
        )
    )
    GROUP BY
      CASE WHEN AGGREGATE_BY = 'NONE' OR INSTR(AGGREGATE_BY, 'HOST')        != 0 THEN HOST              ELSE MAP(BI_HOST, '%', 'any', BI_HOST)                           END,
      CASE WHEN AGGREGATE_BY = 'NONE' OR INSTR(AGGREGATE_BY, 'PORT')        != 0 THEN TO_VARCHAR(PORT)  ELSE MAP(BI_PORT, '%', 'any', BI_PORT)                           END,
      CASE WHEN AGGREGATE_BY = 'NONE' OR INSTR(AGGREGATE_BY, 'SERVICE')     != 0 THEN SERVICE_NAME      ELSE MAP(BI_SERVICE_NAME, '%', 'any', BI_SERVICE_NAME)           END,
      CASE WHEN AGGREGATE_BY = 'NONE' OR INSTR(AGGREGATE_BY, 'SCHEMA')      != 0 THEN SCHEMA_NAME       ELSE MAP(BI_SCHEMA_NAME, '%', 'any', BI_SCHEMA_NAME)             END,
      CASE WHEN AGGREGATE_BY = 'NONE' OR INSTR(AGGREGATE_BY, 'TABLE')       != 0 THEN TABLE_NAME        ELSE MAP(BI_TABLE_NAME, '%', 'any', BI_TABLE_NAME)               END,
      CASE WHEN AGGREGATE_BY = 'NONE' OR INSTR(AGGREGATE_BY, 'COLUMN')      != 0 THEN COLUMN_NAME       ELSE 'any'                                                       END,
      CASE WHEN AGGREGATE_BY = 'NONE' OR INSTR(AGGREGATE_BY, 'DATA_TYPE')   != 0 THEN DATA_TYPE         ELSE MAP(BI_DATA_TYPE, '%', 'any', BI_DATA_TYPE)                 END,
      CASE WHEN AGGREGATE_BY = 'NONE' OR INSTR(AGGREGATE_BY, 'COMPRESSION') != 0 THEN COMPRESSION_TYPE  ELSE MAP(BI_COMP_TYPE, '%', 'any', BI_COMP_TYPE)                 END,
      CASE WHEN AGGREGATE_BY = 'NONE' OR INSTR(AGGREGATE_BY, 'ATT_TYPE')    != 0 THEN ATTRIBUTE_TYPE    ELSE MAP(BI_ATTRIBUTE_TYPE, '%', 'any', BI_ATTRIBUTE_TYPE)       END,
      CASE WHEN AGGREGATE_BY = 'NONE' OR INSTR(AGGREGATE_BY, 'LOADED')      != 0 THEN LOADED            ELSE MAP(BI_LOADED, '%', 'any', BI_LOADED)                       END,
      CASE WHEN AGGREGATE_BY = 'NONE' OR INSTR(AGGREGATE_BY, 'PAGEABLE')    != 0 THEN PAGEABLE          ELSE MAP(BI_PAGEABLE, '%', 'any', BI_PAGEABLE)                   END,
      CASE WHEN AGGREGATE_BY = 'NONE' OR INSTR(AGGREGATE_BY, 'PERSMEM')     != 0 THEN PERSISTENT_MEMORY ELSE MAP(BI_PERSISTENT_MEMORY, '%', 'any', BI_PERSISTENT_MEMORY) END,
      CASE WHEN AGGREGATE_BY = 'NONE'                                            THEN COMMENT           ELSE 'any'                                                       END,
      COLUMN_NAME_LENGTH_LIMIT,
      GENERATE_DROP_CONCAT_ATT_COMMAND,
      ORDER_BY,
      RESULT_ROWS
  )
  ORDER BY
    MAP(ORDER_BY, 'SIZE', MEM_TOTAL_MB, 1) DESC,
    MAP(ORDER_BY, 'TABLE', TABLE_NAME),
    COLUMN_NAME
)
WHERE
( RESULT_ROWS = -1 OR ROW_NUM <= RESULT_ROWS )
