WITH

/*

[NAME]

- HANA_SQL_StatementHash_DataCollector_2.00.024.01+

[DESCRIPTION]

- Collection of details for a specific SQL statement

[SOURCE]

- SAP Note 1969700

[DETAILS AND RESTRICTIONS]

- M_TABLE_REPLICAS available starting with 1.00.120
- M_ADMISSION_CONTROL_EVENTS available starting with 2.00.010
- M_MULTIDIMENSIONAL_STATEMENT_STATISTICS available starting with 1.00.122.16 and 2.00.024.01
- Running this command with SAP HANA 2.0 Revisions before 2.00.024.01 will fail with:

  Could not find table/view M_MULTIDIMENSIONAL_STATEMENT_STATISTICS

[VALID FOR]

- Revisions:              >= 2.00.024.01

[SQL COMMAND VERSION]

- 2017/05/29:  1.0 (initial version)
- 2017/09/21:  1.1 (display of implicit single column indexes, PLAN_ID added to SQL cache overview)
- 2017/10/20:  1.2 (HOST information and CONCAT ATTRIBUTE indexes added)
- 2018/01/08:  1.3 ("PARAMETER SETTINGS" section added)
- 2018/04/11:  1.4 ("CALCULATION VIEWS" and "CALCULATION SCENARIOS" sections added, supression of empty sections)
- 2018/06/04:  1.5 ("TABLE REPLICAS" added, PERCENT added to "THREAD SAMPLES" section)
- 2018/06/05:  1.6 ("TRACE ENTRIES" section added)
- 2018/07/18:  1.7 (current, maximum and minimum disk size added to "TABLE INFORMATION")
- 2018/11/03:  1.8 (dedicated 1.00.122.16+ version including MDS)
- 2018/12/04:  2.0 (shortcuts for BEGIN_TIME and END_TIME like 'C', 'E-S900' or 'MAX')
- 2018/12/15:  2.1 (dedicated 2.00.024.01+ version including M_ADMISSION_CONTROL_EVENTS and M_MULTIDIMENSIONAL_STATEMENT_STATISTICS)
- 2019/02/19:  2.2 (REFERENTIAL_CONSTRAINTS included)
- 2019/09/29:  2.3 (DATA_STATISTICS added)
- 2020/03/04:  2.4 (CLIENT_IP / CLIENT_PID added)

[INVOLVED TABLES]

- HOST_DELTA_MERGE_STATISTICS
- HOST_SERVICE_THREAD_SAMPLES
- HOST_SQL_PLAN_CACHE
- INDEX_COLUMNS
- M_ACTIVE_STATEMENTS
- M_CE_CALCSCENARIOS_OVERVIEW
- M_CE_CALCVIEW_DEPENDENCIES
- M_CS_ALL_COLUMNS
- M_CS_PARTITIONS
- M_CS_TABLES
- M_EXPENSIVE_STATEMENTS
- M_INIFILE_CONTENTS
- M_MULTIDIMENSIONAL_STATEMENT_STATITICS
- M_RS_TABLES
- M_SERVICE_THREAD_CALLSTACKS
- M_SQL_PLAN_CACHE
- M_SQL_PLAN_CACHE_PARAMETERS
- M_TABLE_REPLICAS
- OBJECTS
- TABLE_COLUMNS

[INPUT PARAMETERS]

- BEGIN_TIME

  Begin time

  '2018/12/05 14:05:00' --> Set begin time to 5th of December 2018, 14:05
  'C'                   --> Set begin time to current time
  'C-S900'              --> Set begin time to current time minus 900 seconds
  'C-M15'               --> Set begin time to current time minus 15 minutes
  'C-H5'                --> Set begin time to current time minus 5 hours
  'C-D1'                --> Set begin time to current time minus 1 day
  'C-W4'                --> Set begin time to current time minus 4 weeks
  'E-S900'              --> Set begin time to end time minus 900 seconds
  'E-M15'               --> Set begin time to end time minus 15 minutes
  'E-H5'                --> Set begin time to end time minus 5 hours
  'E-D1'                --> Set begin time to end time minus 1 day
  'E-W4'                --> Set begin time to end time minus 4 weeks
  'MIN'                 --> Set begin time to minimum (1000/01/01 00:00:00)

- END_TIME

  End time

  '2018/12/08 14:05:00' --> Set end time to 8th of December 2018, 14:05
  'C'                   --> Set end time to current time
  'C-S900'              --> Set end time to current time minus 900 seconds
  'C-M15'               --> Set end time to current time minus 15 minutes
  'C-H5'                --> Set end time to current time minus 5 hours
  'C-D1'                --> Set end time to current time minus 1 day
  'C-W4'                --> Set end time to current time minus 4 weeks
  'B+S900'              --> Set end time to begin time plus 900 seconds
  'B+M15'               --> Set end time to begin time plus 15 minutes
  'B+H5'                --> Set end time to begin time plus 5 hours
  'B+D1'                --> Set end time to begin time plus 1 day
  'B+W4'                --> Set end time to begin time plus 4 weeks
  'MAX'                 --> Set end time to maximum (9999/12/31 23:59:59)

- STATEMENT_HASH

  Hash of SQL statement to be analyzed (mandatory)

- PLAN_ID

  SQL plan identifier

  12345678       --> SQL plan identifier 12345678
  -1             --> No restriction based on SQL plan identifier

- MAX_RESULT_LINES

  Maximum number of result lines for history sections

  20             --> Return a maximum of 20 lines in the output
  -1             --> No restriction related to result lines

- TRACE_HISTORY_S

  Time frame for checking SAP HANA trace files for statement hash occurrences (s)

  86400          --> Check last 86400 s (1 day) for trace file entries
  -1             --> No trace file check limitation (attention: Can be very expensive)

- MAX_LINE_LENGTH

  Maximum length of output lines

  200            --> Limit output lines to a length of 200 characters
  -1             --> No limitation related to output line length

- SHOW_COMPLETE_BIND_VALUE_LIST

  Possibility to display the complete list of bind values

  'X'            --> Show all captured bind values
  ' '            --> Only show the first MAX_RESULT_LINES bind values

- TIME_UNIT

  Unit of total times in the output

  'MS' --> milli seconds
  'S'  --> seconds
  'M'  --> minutes
  'H'  --> hours
  'D'  --> days

[OUTPUT PARAMETERS]

- LINE: Output information

[EXAMPLE OUTPUT]

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|LINE                                                                                                                                                                                                    |
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|*******************************************                                                                                                                                                             |
|* SAP HANA STATEMENT HASH DATA COLLECTION *                                                                                                                                                             |
|*******************************************                                                                                                                                                             |
|                                                                                                                                                                                                        |
|Analysis time:      2017/05/29 14:47:37                                                                                                                                                                 |
|Generated with:     SQL: "HANA_SQL_StatementHash_DataCollector" (SAP Note 1969700)                                                                                                                      |
|Statement hash:     d589b47003b8db3caf9425ebfaf5b72e                                                                                                                                                    |
|                                                                                                                                                                                                        |
|***************                                                                                                                                                                                         |
|* KEY FIGURES *                                                                                                                                                                                         |
|***************                                                                                                                                                                                         |
|                                                                                                                                                                                                        |
|STAT_NAME                VALUE                             VALUE_PER_EXEC  VALUE_PER_ROW                                                                                                                |
|======================== ================================ =============== ==============                                                                                                                |
|Statement Hash           d589b47003b8db3caf9425ebfaf5b72e                                                                                                                                               |
|Plan ID                  40772250004                                                                                                                                                                    |
|Table type / dist.       COLUMN / local                                                                                                                                                                 |
|Database user name       SAPERP                                                                                                                                                                         |
|Last connection ID       455766                                                                                                                                                                         |
|                                                                                                                                                                                                        |
|Executions                                              3                                                                                                                                               |
|Records                                                 0            0.00                                                                                                                               |
|Preparations                                            0            0.00                                                                                                                               |
|                                                                                                                                                                                                        |
|Elapsed time                                       8.39 h  10077261.05 ms        0.00 ms                                                                                                                |
|Execution time                                     8.39 h  10077261.05 ms        0.00 ms                                                                                                                |
|Preparation time                                   0.00 h         0.00 ms        0.00 ms                                                                                                                |
|Lock wait time                                     0.00 h         0.00 ms        0.00 ms                                                                                                                |
|                                                                                                                                                                                                        |
|******************                                                                                                                                                                                      |
|* STATEMENT TEXT *                                                                                                                                                                                      |
|******************                                                                                                                                                                                      |
|                                                                                                                                                                                                        |
|SELECT / FDA WRITE / DISTINCT  "V_MLHD" . "BELNR" , "V_MLHD" . "KJAHR" , "V_MLHD"                                                                                                                       |
|. "VGART" , "V_MLHD" . "CPUDT" , "V_MLHD" . "CPUTM" , "V_MLHD" . "GLVOR" , "V_MLHD"                                                                                                                     |
|. "STORNO" , "V_MLHD" . "AWREF" , "V_MLHD" . "AWORG" , "V_MLHD" . "AWTYP"                                                                                                                               |
|, "V_MLHD" . "TCODE" FROM / Redirected table: MLHD / "V_MLHD" , X AS "t_00"                                                                                                                             |
|(C_0 NVARCHAR(10), C_1 NVARCHAR(4)) WHERE "V_MLHD" . "MANDT" = X AND "V_MLHD" .                                                                                                                         |
|"BELNR" = "t_00" . "C_0" AND "V_MLHD" . "KJAHR" = "t_00" . "C_1"  WITH RANGE_RESTRICTION('CURRENT')                                                                                                     |
|                                                                                                                                                                                                        |
|***************                                                                                                                                                                                         |
|* BIND VALUES *                                                                                                                                                                                         |
|***************                                                                                                                                                                                         |
|                                                                                                                                                                                                        |
|EXECUTION_TIME      DATA_TYPE       POS BIND_VALUE                                                                                                                                                      |
|=================== ============== ==== ==================================================                                                                                                              |
|                                                                                                                                                                                                        |
|*************                                                                                                                                                                                           |
|* SQL CACHE *                                                                                                                                                                                           |
|*************                                                                                                                                                                                           |
|                                                                                                                                                                                                        |
|CURRENT                  EXECUTIONS        RECORDS   REC_PER_EXEC          ELAPSED_MS   ELA_PER_EXEC_MS    PREPARES     PREPARE_MS        LOCK_MS                                                       |
|==================== ============== ============== ============== =================== ================= =========== ============== ==============                                                       |
|CURRENT                           0              0           0.00                1073              0.00           2           1073              0                                                       |
|2017/05/26 18:42:23               2              0           0.00            29729395    14864697565.50           0              0              0                                                       |
|2017/05/24 12:00:51               1              0           0.00              502388      502388022.00           0              0              0                                                       |
|                                                                                                                                                                                                        |
|*********************                                                                                                                                                                                   |
|* TABLE INFORMATION *                                                                                                                                                                                   |
|*********************                                                                                                                                                                                   |
|                                                                                                                                                                                                        |
|SCHEMA_NAME         TABLE_NAME                              TYPE    PARTS     RECORDS MEM_TOTAL_GB MEM_DELTA_GB                                                                                         |
|=================== ======================================= ====== ====== =========== ============ ============                                                                                         |
|SAPERP              ACDOCA                                  COLUMN      8  5363293802       316.78         5.44                                                                                         |
|SAPERP              BKPF                                    COLUMN      1   488298937        30.51         0.82                                                                                         |
|SAPERP              FINSC_LEDGER                            COLUMN      1           6         0.00         0.00                                                                                         |
|SAPERP              FINS_MIG_STATUS                         COLUMN      1           1         0.00         0.00                                                                                         |
|SAPERP              MLHD                                    COLUMN      1   164711605         6.84         0.23                                                                                         |
|                                                                                                                                                                                                        |
|*********************                                                                                                                                                                                   |
|* INDEX INFORMATION *                                                                                                                                                                                   |
|*********************                                                                                                                                                                                   |
|                                                                                                                                                                                                        |
|SCHEMA_NAME         TABLE_NAME                              INDEX_NAME                    COLUMN_NAME                   CONSTRAINT_NAME                                                                 |
|=================== ======================================= ============================= ============================= ===================                                                             |
|SAPERP              ACDOCA                                  ACDOCA~ANL                    ANLN1                                                                                                         |
|SAPERP              ACDOCA                                  ACDOCA~BEL                    BELNR                                                                                                         |
|SAPERP              ACDOCA                                  ACDOCA~ONR                    OBJNR                                                                                                         |
|SAPERP              ACDOCA                                  ACDOCA~PAR                    PAROB1                                                                                                        |
|SAPERP              ACDOCA                                  ACDOCA~Y1                     AWREF                                                                                                         |
|SAPERP              BKPF                                    BKPF~0                        MANDT                         PRIMARY KEY                                                                     |
|                                                                                          BUKRS                         PRIMARY KEY                                                                     |
|                                                                                          BELNR                         PRIMARY KEY                                                                     |
|                                                                                          GJAHR                         PRIMARY KEY                                                                     |
|SAPERP              BKPF                                    BKPF~H0O                      AWKEY                                                                                                         |
|SAPERP              BKPF                                    BKPF~HI5                      BKTXT                                                                                                         |
|SAPERP              BKPF                                    BKPF~HP0                      XBLNR                                                                                                         |
|SAPERP              FINSC_LEDGER                            _SYS_TREE_CS_#3557752_#0_#P0  MANDT                         PRIMARY KEY                                                                     |
|                                                                                          RLDNR                         PRIMARY KEY                                                                     |
|SAPERP              FINS_MIG_STATUS                         _SYS_TREE_CS_#3558471_#0_#P0  MANDT                         PRIMARY KEY                                                                     |
|SAPERP              MLHD                                    MLHD~0                        MANDT                         PRIMARY KEY                                                                     |
|                                                                                          BELNR                         PRIMARY KEY                                                                     |
|                                                                                          KJAHR                         PRIMARY KEY                                                                     |
|SAPERP              MLHD                                    MLHD~HZB                      AWREF                                                                                                         |
|                                                                                                                                                                                                        |
|**********************                                                                                                                                                                                  |
|* COLUMN INFORMATION *                                                                                                                                                                                  |
|**********************                                                                                                                                                                                  |
|                                                                                                                                                                                                        |
|SCHEMA_NAME         TABLE_NAME                              COLUMN_NAME                   NUM_DISTINCT      SIZE_MB LENGTH DATA_TYPE      COMPRESSION INDEX_TYPE                                        |
|=================== ======================================= ============================= ============ ============ ====== ============== =========== ===========                                       |
|SAPERP              ACDOCA                                  $RBUKRS$RLDNR$                         199     10062.02        internal       DEFAULT     FULL                                              |
|                                                            $rowid$                          709452765     25008.42        internal       DEFAULT     NONE                                              |
|                                                            $trex_udiv$                             -1      3585.74        internal       DEFAULT     NONE                                              |
|                                                            ACCAS                              7989205      2725.86     30 NVARCHAR       INDIRECT    NONE                                              |
|                                                            ACCASTY                                 10       859.66      2 NVARCHAR       RLE         NONE                                              |
|                                                            ACCASTY_SENDER                           1         3.39      2 NVARCHAR       PREFIXED    NONE                                              |
|                                                            ACCAS_SENDER                             1         3.39     30 NVARCHAR       PREFIXED    NONE                                              |
|                                                            ACDOC_COPA_EEW_DUMMY_PA                  1         3.39      1 NVARCHAR       PREFIXED    NONE                                              |
|                                                            ACDOC_EEW_DUMMY                          1         3.39      1 NVARCHAR       PREFIXED    NONE                                              |
|                                                            AFABE                                    8        32.74      2 NVARCHAR       RLE         NONE                                              |
|                                                            ANBWA                                  108        91.54      3 NVARCHAR       various     NONE                                              |
|                                                            ANLGR                                    1         3.39     12 NVARCHAR       PREFIXED    NONE                                              |
...
|                                                                                                                                                                                                        |
|*************************                                                                                                                                                                               |
|* PARTITION INFORMATION *                                                                                                                                                                               |
|*************************                                                                                                                                                                               |
|                                                                                                                                                                                                        |
|SCHEMA_NAME         TABLE_NAME                              PART_ID RANGE                          SUBRANGE                       PARTITION_SPECIFICATION                                               |
|=================== ======================================= ======= ============================== ============================== ======================================================================|
|SAPERP              ACDOCA                                        1                                                               HASH 8 BELNR                                                          |
|                                                                  2                                                               HASH 8 BELNR                                                          |
|                                                                  3                                                               HASH 8 BELNR                                                          |
|                                                                  4                                                               HASH 8 BELNR                                                          |
|                                                                  5                                                               HASH 8 BELNR                                                          |
|                                                                  6                                                               HASH 8 BELNR                                                          |
|                                                                  7                                                               HASH 8 BELNR                                                          |
|                                                                  8                                                               HASH 8 BELNR                                                          |
|                                                                                                                                                                                                        |
|******************************                                                                                                                                                                          |
|* EXPENSIVE STATEMENTS TRACE *                                                                                                                                                                          |
|******************************                                                                                                                                                                          |
|                                                                                                                                                                                                        |
|START_TIME          OPERATION             DURATION_S      CPU_S   RECORDS   MEM_MB ERROR APP_USER                  APP_SOURCE                                                                           |
|=================== ==================== =========== ========== ========= ======== ===== ========================= =============================                                                        |
|                                                                                                                                                                                                        |
|START_TIME          BIND_VALUES                                                                                                                                                                         |
|=================== =================================================================================================================================================================================== |
|                                                                                                                                                                                                        |
|*****************************                                                                                                                                                                           |
|* EXECUTED STATEMENTS TRACE *                                                                                                                                                                           |
|*****************************                                                                                                                                                                           |
|                                                                                                                                                                                                        |
|START_TIME           DURATION_S ERROR APP_USER                  APP_SOURCE                                                                                                                              |
|=================== =========== ===== ========================= =============================                                                                                                           |
|                                                                                                                                                                                                        |
|******************                                                                                                                                                                                      |
|* THREAD SAMPLES *                                                                                                                                                                                      |
|******************                                                                                                                                                                                      |
|                                                                                                                                                                                                        |
|SAMPLES THREAD_STATE              LOCK_NAME                                                                                                                                                             |
|======= ========================= ==================================================                                                                                                                    |
|    798 Job Exec Waiting          CSPlanExecutorWaitForResult                                                                                                                                           |
|    366 Running                   X                                                                                                                                                                     |
|    136 Mutex Wait                LimitOOMReport                                                                                                                                                        |
|     38 Job Exec Waiting          unnamed BinarySemaphore                                                                                                                                               |
|      1 ExclusiveLock Enter       JoinEvaluator_JEPlanData_Lock                                                                                                                                         |
|                                                                                                                                                                                                        |
|SAMPLES THREAD_TYPE          THREAD_METHOD                                      THREAD_DETAIL                                                                                                           |
|======= ==================== ================================================== ================================================================================                                        |
|    399 SqlExecutor          ExecutePrepared                                    SELECT /  FDA WRITE  / DISTINCT  "V_MLHD" . "BELNR" , "V_MLHD" . "KJAHR" , "V_MLHD" . "VGART" , "V_MLHD" . "CPUDT" ,  V_|
|    138 JobWorker            PlanExecutor calc                                  plan-1311594677@emlhd040:30003/pop57 (JEAssembleResults)                                                                |
|    138 JobWorker            PlanExecutor calc                                  plan-1311595000@emlhd040:30003/pop1 (RowPlanOperator)                                                                   |
|    138 JobWorker            PlanExecutor calc                                  plan-1312743728@emlhd040:30003/pop57 (JEAssembleResults)                                                                |
|    138 JobWorker            PlanExecutor calc                                  plan-1312743934@emlhd040:30003/pop1 (RowPlanOperator)                                                                   |
|    104 JobWorker            PlanExecutor calc                                  plan-1056852828@emlhd040:30003/pop1 (RowPlanOperator)                                                                   |
|    100 JobWorker            PlanExecutor calc                                  plan-1056852163@emlhd040:30003/pop57 (JEAssembleResults)                                                                |
|     12 JobWorker            PlanExecutor calc                                  plan-1522529439@emlhd040:30003/pop1 (RowPlanOperator)                                                                   |
|      9 JobWorker            IndirectScanBvOutJob<BV>                                                                                                                                                   |
|      6 JobWorker            HashReducer                                                                                                                                                                |
|      6 JobWorker            IndirectIndexScanBvOutJob<ScanRangePredicate>                                                                                                                              |
|      6 JobWorker            PlanExecutor calc                                  plan-1522529325@emlhd040:30003/pop57 (JEAssembleResults)                                                                |
|      5 JobWorker            JeReadValues4ValueIdsJob                           aMaxVid: 58076496                                                                                                       |
|      5 JobWorker            TranslateColumnJob                                                                                                                                                         |
|      3 JobWorker            IndirectScanBvOutJob<range>                                                                                                                                                |
|      3 JobWorker            PlanExecutor calc                                  plan-1337765699@emlhd040:30003/pop33 (JEStep2)                                                                          |
|      3 JobWorker            PlanExecutor calc                                  plan-1337765920@emlhd040:30003/pop1 (RowPlanOperator)                                                                   |
|      2 JobWorker            PlanExecutor calc                                  plan-1444857801@emlhd040:30003/pop1 (RowPlanOperator)                                                                   |
|      2 JobWorker            PlanExecutor calc                                  plan-1522529325@emlhd040:30003/pop37 (JEUniqueColumn)                                                                   |
|      2 JobWorker            PlanExecutor calc                                  plan-1522529325@emlhd040:30003/pop47 (JECalculate)                                                                      |
|                                                                                                                                                                                                        |
|SAMPLES DB_USER              APP_USER                       APP_NAME                       APP_SOURCE                                                                                                   |
|======= ==================== ============================== ============================== ==================================================                                                           |
|    828 SAPERP               ESVIDALJO                      ABAP:E9A                       SAPLCKMD:33595                                                                                               |
|    358 SAPERP               RUVOLOSHDE                     ABAP:E9A                       SAPLCKMD:33595                                                                                               |
|    106 SAPERP               PLGRZELABO                     ABAP:E9A                       SAPLCKMD:33595                                                                                               |
|     25 SAPERP               XSJAMMYRA                      ABAP:E9A                       SAPLCKMD:33595                                                                                               |
|     22 SAPERP               SKPETOVSMO                     ABAP:E9A                       SAPLCKMD:33595                                                                                               |
|                                                                                                                                                                                                        |
|**************                                                                                                                                                                                          |
|* OOM EVENTS *                                                                                                                                                                                          |
|**************                                                                                                                                                                                          |
|                                                                                                                                                                                                        |
|OOM_TIME            HEAP_AREA                                          REASON                                   MEM_USED_GB                                                                             |
|=================== ================================================== ======================================= ============                                                                             |
|2017/05/26 18:18:49 Connection/435410/Statement/1870073696765371       GENERIC_COMPOSITE_LIMIT                       198.75                                                                             |
|2017/05/26 18:17:51 Connection/405175/Statement/1740216360824511       GENERIC_COMPOSITE_LIMIT                       199.80                                                                             |
|2017/05/24 11:18:15 Connection/455766/Statement/1957503973210091       GENERIC_COMPOSITE_LIMIT                       196.84                                                                             |
|2017/05/17 06:30:28 Connection/429988/Statement/1846785977809422       GENERIC_COMPOSITE_LIMIT                       187.45                                                                             |
|2017/05/17 06:25:49 Connection/436839/Statement/1876212274403107       GENERIC_COMPOSITE_LIMIT                       187.74                                                                             |
|2017/05/16 13:24:22 Connection/404588/Statement/1737693452955498       GENERIC_COMPOSITE_LIMIT                       187.54                                                                             |
|2017/05/16 13:22:29 Connection/404276/Statement/1736353900954329       GENERIC_COMPOSITE_LIMIT                       188.51                                                                             |
|                                                                                                                                                                                                        |
|********************                                                                                                                                                                                    |
|* PINNED SQL PLANS *                                                                                                                                                                                    |
|********************                                                                                                                                                                                    |
|                                                                                                                                                                                                        |
|PIN_TIME            MODIFY_TIME         HINT_STRING                                                                                                                                                     |
|=================== =================== ==================================================                                                                                                              |
|                                                                                                                                                                                                        |
|*******************                                                                                                                                                                                     |
|* STATEMENT HINTS *                                                                                                                                                                                     |
|*******************                                                                                                                                                                                     |
|                                                                                                                                                                                                        |
|ENABLE_TIME         ENABLED   HINT_STRING                                                                                                                                                               |
|=================== ========= ==================================================                                                                                                                        |
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

*/

BASIS_INFO AS
( SELECT
    CASE
      WHEN BEGIN_TIME =    'C'                             THEN CURRENT_TIMESTAMP
      WHEN BEGIN_TIME LIKE 'C-S%'                          THEN ADD_SECONDS(CURRENT_TIMESTAMP, -SUBSTR_AFTER(BEGIN_TIME, 'C-S'))
      WHEN BEGIN_TIME LIKE 'C-M%'                          THEN ADD_SECONDS(CURRENT_TIMESTAMP, -SUBSTR_AFTER(BEGIN_TIME, 'C-M') * 60)
      WHEN BEGIN_TIME LIKE 'C-H%'                          THEN ADD_SECONDS(CURRENT_TIMESTAMP, -SUBSTR_AFTER(BEGIN_TIME, 'C-H') * 3600)
      WHEN BEGIN_TIME LIKE 'C-D%'                          THEN ADD_SECONDS(CURRENT_TIMESTAMP, -SUBSTR_AFTER(BEGIN_TIME, 'C-D') * 86400)
      WHEN BEGIN_TIME LIKE 'C-W%'                          THEN ADD_SECONDS(CURRENT_TIMESTAMP, -SUBSTR_AFTER(BEGIN_TIME, 'C-W') * 86400 * 7)
      WHEN BEGIN_TIME LIKE 'E-S%'                          THEN ADD_SECONDS(TO_TIMESTAMP(END_TIME, 'YYYY/MM/DD HH24:MI:SS'), -SUBSTR_AFTER(BEGIN_TIME, 'E-S'))
      WHEN BEGIN_TIME LIKE 'E-M%'                          THEN ADD_SECONDS(TO_TIMESTAMP(END_TIME, 'YYYY/MM/DD HH24:MI:SS'), -SUBSTR_AFTER(BEGIN_TIME, 'E-M') * 60)
      WHEN BEGIN_TIME LIKE 'E-H%'                          THEN ADD_SECONDS(TO_TIMESTAMP(END_TIME, 'YYYY/MM/DD HH24:MI:SS'), -SUBSTR_AFTER(BEGIN_TIME, 'E-H') * 3600)
      WHEN BEGIN_TIME LIKE 'E-D%'                          THEN ADD_SECONDS(TO_TIMESTAMP(END_TIME, 'YYYY/MM/DD HH24:MI:SS'), -SUBSTR_AFTER(BEGIN_TIME, 'E-D') * 86400)
      WHEN BEGIN_TIME LIKE 'E-W%'                          THEN ADD_SECONDS(TO_TIMESTAMP(END_TIME, 'YYYY/MM/DD HH24:MI:SS'), -SUBSTR_AFTER(BEGIN_TIME, 'E-W') * 86400 * 7)
      WHEN BEGIN_TIME =    'MIN'                           THEN TO_TIMESTAMP('1000/01/01 00:00:00', 'YYYY/MM/DD HH24:MI:SS')
      WHEN SUBSTR(BEGIN_TIME, 1, 1) NOT IN ('C', 'E', 'M') THEN TO_TIMESTAMP(BEGIN_TIME, 'YYYY/MM/DD HH24:MI:SS')
    END BEGIN_TIME,
    CASE
      WHEN END_TIME =    'C'                             THEN CURRENT_TIMESTAMP
      WHEN END_TIME LIKE 'C-S%'                          THEN ADD_SECONDS(CURRENT_TIMESTAMP, -SUBSTR_AFTER(END_TIME, 'C-S'))
      WHEN END_TIME LIKE 'C-M%'                          THEN ADD_SECONDS(CURRENT_TIMESTAMP, -SUBSTR_AFTER(END_TIME, 'C-M') * 60)
      WHEN END_TIME LIKE 'C-H%'                          THEN ADD_SECONDS(CURRENT_TIMESTAMP, -SUBSTR_AFTER(END_TIME, 'C-H') * 3600)
      WHEN END_TIME LIKE 'C-D%'                          THEN ADD_SECONDS(CURRENT_TIMESTAMP, -SUBSTR_AFTER(END_TIME, 'C-D') * 86400)
      WHEN END_TIME LIKE 'C-W%'                          THEN ADD_SECONDS(CURRENT_TIMESTAMP, -SUBSTR_AFTER(END_TIME, 'C-W') * 86400 * 7)
      WHEN END_TIME LIKE 'B+S%'                          THEN ADD_SECONDS(TO_TIMESTAMP(BEGIN_TIME, 'YYYY/MM/DD HH24:MI:SS'), SUBSTR_AFTER(END_TIME, 'B+S'))
      WHEN END_TIME LIKE 'B+M%'                          THEN ADD_SECONDS(TO_TIMESTAMP(BEGIN_TIME, 'YYYY/MM/DD HH24:MI:SS'), SUBSTR_AFTER(END_TIME, 'B+M') * 60)
      WHEN END_TIME LIKE 'B+H%'                          THEN ADD_SECONDS(TO_TIMESTAMP(BEGIN_TIME, 'YYYY/MM/DD HH24:MI:SS'), SUBSTR_AFTER(END_TIME, 'B+H') * 3600)
      WHEN END_TIME LIKE 'B+D%'                          THEN ADD_SECONDS(TO_TIMESTAMP(BEGIN_TIME, 'YYYY/MM/DD HH24:MI:SS'), SUBSTR_AFTER(END_TIME, 'B+D') * 86400)
      WHEN END_TIME LIKE 'B+W%'                          THEN ADD_SECONDS(TO_TIMESTAMP(BEGIN_TIME, 'YYYY/MM/DD HH24:MI:SS'), SUBSTR_AFTER(END_TIME, 'B+W') * 86400 * 7)
      WHEN END_TIME =    'MAX'                           THEN TO_TIMESTAMP('9999/12/31 00:00:00', 'YYYY/MM/DD HH24:MI:SS')
      WHEN SUBSTR(END_TIME, 1, 1) NOT IN ('C', 'B', 'M') THEN TO_TIMESTAMP(END_TIME, 'YYYY/MM/DD HH24:MI:SS')
    END END_TIME,
    STATEMENT_HASH,
    PLAN_ID,
    MAX_RESULT_LINES,
    TRACE_HISTORY_S,
    MAX_LINE_LENGTH,
    SHOW_COMPLETE_BIND_VALUE_LIST,
    LOWER(TIME_UNIT) TIME_UNIT,
    MAP(TIME_UNIT, 'MS', 1, 'S', 1000, 'M', 60000, 'H', 3600000, 'D', 86400000) TIME_FACTOR
  FROM
  ( SELECT                /* Modification section */
      '1000/10/18 07:58:00' BEGIN_TIME,                  /* YYYY/MM/DD HH24:MI:SS timestamp, C, C-S<seconds>, C-M<minutes>, C-H<hours>, C-D<days>, C-W<weeks>, E-S<seconds>, E-M<minutes>, E-H<hours>, E-D<days>, E-W<weeks>, MIN */
      '9999/10/18 08:05:00' END_TIME,                    /* YYYY/MM/DD HH24:MI:SS timestamp, C, C-S<seconds>, C-M<minutes>, C-H<hours>, C-D<days>, C-W<weeks>, B+S<seconds>, B+M<minutes>, B+H<hours>, B+D<days>, B+W<weeks>, MAX */
      'cadf7d9d187005fffc56b26151d41765' STATEMENT_HASH,
      -1 PLAN_ID,
      20 MAX_RESULT_LINES,
      86400 TRACE_HISTORY_S,
      200 MAX_LINE_LENGTH,
      ' ' SHOW_COMPLETE_BIND_VALUE_LIST,
      'H' TIME_UNIT                    /* MS, S, M, H, D */
    FROM
      DUMMY
  )
),
ROW_COUNTER AS
( SELECT
    ROW_NUMBER () OVER () LINE_NO
  FROM
    OBJECTS
),
SQL_CACHE_CURRENT AS
( SELECT
    CURRENT_TIMESTAMP SERVER_TIMESTAMP,
    C.HOST,
    C.STATEMENT_HASH,
    TO_VARCHAR(C.STATEMENT_STRING) STATEMENT_STRING,
    C.PLAN_ID,
    C.USER_NAME,
    C.TABLE_TYPES,
    C.LAST_PREPARATION_TIMESTAMP,
    C.LAST_EXECUTION_TIMESTAMP,
    C.LAST_CONNECTION_ID,
    C.EXECUTION_COUNT,
    C.TOTAL_RESULT_RECORD_COUNT,
    C.PREPARATION_COUNT,
    C.TOTAL_EXECUTION_TIME + C.TOTAL_PREPARATION_TIME TOTAL_ELAPSED_TIME,
    C.TOTAL_EXECUTION_TIME,
    C.TOTAL_PREPARATION_TIME,
    C.TOTAL_LOCK_WAIT_DURATION,
    C.TOTAL_SERVICE_NETWORK_REQUEST_COUNT,
    C.TOTAL_SERVICE_NETWORK_REQUEST_DURATION,
    C.TOTAL_SERVICE_NETWORK_REQUEST_SIZE,
    C.TOTAL_CALLED_THREAD_COUNT,
    C.TOTAL_EXECUTION_MEMORY_SIZE,
    C.IS_DISTRIBUTED_EXECUTION,
    TO_VARCHAR(C.ACCESSED_TABLE_NAMES) ACCESSED_TABLE_NAMES,
    C.ACCESSED_OBJECTS,
    TO_VARCHAR(SUBSTR(C.STATEMENT_STRING, 1, 4000)) SQL_TEXT,
    1 LINE_NO
  FROM
    BASIS_INFO BI,
    M_SQL_PLAN_CACHE C
  WHERE
    C.STATEMENT_HASH LIKE BI.STATEMENT_HASH AND
  ( BI.PLAN_ID = -1 OR C.PLAN_ID = BI.PLAN_ID )
),
SQL_CACHE_HISTORY AS
( SELECT
    C.SERVER_TIMESTAMP,
    C.HOST,
    C.STATEMENT_HASH,
    TO_VARCHAR(C.STATEMENT_STRING) STATEMENT_STRING,
    C.PLAN_ID,
    C.USER_NAME,
    C.TABLE_TYPES,
    C.LAST_PREPARATION_TIMESTAMP,
    C.LAST_EXECUTION_TIMESTAMP,
    C.LAST_CONNECTION_ID,
    C.EXECUTION_COUNT,
    C.TOTAL_RESULT_RECORD_COUNT,
    C.PREPARATION_COUNT,
    C.TOTAL_EXECUTION_TIME + C.TOTAL_PREPARATION_TIME TOTAL_ELAPSED_TIME,
    C.TOTAL_EXECUTION_TIME,
    C.TOTAL_PREPARATION_TIME,
    C.TOTAL_LOCK_WAIT_DURATION,
    0 TOTAL_SERVICE_NETWORK_REQUEST_COUNT,
    0 TOTAL_SERVICE_NETWORK_REQUEST_DURATION,
    0 TOTAL_SERVICE_NETWORK_REQUEST_SIZE,
    0 TOTAL_CALLED_THREAD_COUNT,
    0 TOTAL_EXECUTION_MEMORY_SIZE,
    C.IS_DISTRIBUTED_EXECUTION,
    TO_VARCHAR(C.ACCESSED_TABLE_NAMES) ACCESSED_TABLE_NAMES,
    C.ACCESSED_OBJECTS,
    TO_VARCHAR(SUBSTR(C.STATEMENT_STRING, 1, 4000)) SQL_TEXT,
    ROW_NUMBER () OVER (ORDER BY C.SERVER_TIMESTAMP DESC, C.PLAN_ID) LINE_NO
  FROM
    BASIS_INFO BI,
    _SYS_STATISTICS.HOST_SQL_PLAN_CACHE C
  WHERE
    C.SERVER_TIMESTAMP BETWEEN BI.BEGIN_TIME AND BI.END_TIME AND
    C.STATEMENT_HASH LIKE BI.STATEMENT_HASH AND
  ( BI.PLAN_ID = -1 OR C.PLAN_ID = BI.PLAN_ID )
),
BIND_VALUES AS
( SELECT
    ROW_NUMBER () OVER (ORDER BY B.EXECUTION_TIMESTAMP DESC, B.POSITION) LINE_NO,
    B.EXECUTION_TIMESTAMP,
    B.DATA_TYPE_NAME,
    B.POSITION,
    B.PARAMETER_VALUE,
    BI.MAX_RESULT_LINES,
    BI.SHOW_COMPLETE_BIND_VALUE_LIST
  FROM
    BASIS_INFO BI,
    SQL_CACHE_CURRENT S,
    M_SQL_PLAN_CACHE_PARAMETERS B
  WHERE
    S.PLAN_ID = B.PLAN_ID
),
THREAD_SAMPLES AS
( SELECT
    T.TIMESTAMP,
    T.HOST,
    T.PORT,
    T.THREAD_TYPE,
    T.THREAD_STATE,
    T.THREAD_METHOD,
    T.THREAD_DETAIL,
    T.LOCK_WAIT_NAME LOCK_NAME,
    T.USER_NAME DB_USER,
    T.APPLICATION_NAME APP_NAME,
    T.APPLICATION_SOURCE APP_SOURCE,
    T.APPLICATION_USER_NAME APP_USER,
    T.CLIENT_IP,
    T.CLIENT_PID,
    T.CONNECTION_ID,
    COUNT(*) SAMPLES,
    SUM(COUNT(*)) OVER () TOTAL_SAMPLES
  FROM
    BASIS_INFO BI,
    _SYS_STATISTICS.HOST_SERVICE_THREAD_SAMPLES T
  WHERE
    SUBSTR(T.STATEMENT_HASH, 1, 31) = SUBSTR(BI.STATEMENT_HASH, 1, 31) AND          /* thread samples partially only stored 31 out of 32 characters */
    T.TIMESTAMP BETWEEN BI.BEGIN_TIME AND BI.END_TIME
  GROUP BY
    T.TIMESTAMP,
    T.HOST,
    T.PORT,
    T.THREAD_TYPE,
    T.THREAD_STATE,
    T.THREAD_METHOD,
    T.THREAD_DETAIL,
    T.LOCK_WAIT_NAME,
    T.USER_NAME,
    T.APPLICATION_NAME,
    T.APPLICATION_SOURCE,
    T.APPLICATION_USER_NAME,
    T.CLIENT_IP,
    T.CLIENT_PID,
    T.CONNECTION_ID
),
ACCESSED_TABLES AS
( SELECT
    *
  FROM
  ( SELECT
      CASE R.LINE_NO
        WHEN 1 THEN SUBSTR(T.ACCESSED_TABLES, 1, LOCATE(T.ACCESSED_TABLES, '.', 1, 1) - 1)
        ELSE SUBSTR(T.ACCESSED_TABLES, LOCATE(T.ACCESSED_TABLES, ', ', 1, R.LINE_NO - 1) + 2, LOCATE(T.ACCESSED_TABLES, '.', 1, R.LINE_NO) - LOCATE(T.ACCESSED_TABLES, ', ', 1, R.LINE_NO - 1) - 2)
      END SCHEMA_NAME,
      SUBSTR(T.ACCESSED_TABLES, LOCATE(T.ACCESSED_TABLES, '.', 1, R.LINE_NO) + 1, LOCATE(T.ACCESSED_TABLES, '(', 1, R.LINE_NO) - LOCATE(T.ACCESSED_TABLES, '.', 1, R.LINE_NO) - 1) TABLE_NAME
    FROM
      ROW_COUNTER R,
    ( SELECT
        MIN(ACCESSED_TABLE_NAMES) ACCESSED_TABLES,
        LENGTH(MAX(ACCESSED_TABLE_NAMES)) - LENGTH(REPLACE(MAX(ACCESSED_TABLE_NAMES), ',', '')) + 1 NUM_TABLES
      FROM
      ( SELECT ACCESSED_TABLE_NAMES FROM SQL_CACHE_CURRENT UNION
        SELECT ACCESSED_TABLE_NAMES FROM SQL_CACHE_HISTORY
      )
    ) T
    WHERE
      R.LINE_NO <= T.NUM_TABLES
  )
  WHERE
    TABLE_NAME != ''
),
ACCESSED_PARTITIONS AS
( SELECT
    TP.*,
    T.PARTITION_SPEC,
    GREATEST(CT.MEMORY_SIZE_IN_TOTAL, CT.ESTIMATED_MAX_MEMORY_SIZE_IN_TOTAL) / 1024 / 1024 / 1024 MEM_SIZE_GB,
    CT.RECORD_COUNT RECORDS
  FROM
    ACCESSED_TABLES AC,
    M_CS_PARTITIONS TP,
    TABLES T,
    M_CS_TABLES CT
  WHERE
    AC.SCHEMA_NAME = TP.SCHEMA_NAME AND
    AC.TABLE_NAME = TP.TABLE_NAME AND
    AC.SCHEMA_NAME = T.SCHEMA_NAME AND
    AC.TABLE_NAME = T.TABLE_NAME AND
    CT.SCHEMA_NAME = T.SCHEMA_NAME AND
    CT.TABLE_NAME = T.TABLE_NAME AND
    CT.PART_ID = TP.PART_ID AND
    T.PARTITION_SPEC IS NOT NULL
),
ACCESSED_VIEWS AS
( SELECT
    *
  FROM
    VIEWS V,
  ( SELECT
      CASE R.LINE_NO
        WHEN 1 THEN SUBSTR(AO.ACCESSED_OBJECTS, 1, LOCATE(AO.ACCESSED_OBJECTS, '(', 1) - 1)
        ELSE SUBSTR(AO.ACCESSED_OBJECTS, LOCATE(AO.ACCESSED_OBJECTS, ', ', 1, R.LINE_NO - 1) + 2, LOCATE(AO.ACCESSED_OBJECTS, '(', 1, R.LINE_NO) - LOCATE(AO.ACCESSED_OBJECTS, ', ', 1, R.LINE_NO - 1 ) - 2)
      END OBJECT_ID
    FROM
      ROW_COUNTER R,
    ( SELECT
        MAX(ACCESSED_OBJECTS) ACCESSED_OBJECTS,
        LENGTH(MAX(ACCESSED_OBJECTS)) - LENGTH(REPLACE(MAX(ACCESSED_OBJECTS), ',', '')) + 1 NUM_OBJECTS
      FROM
      ( SELECT ACCESSED_OBJECTS FROM SQL_CACHE_CURRENT UNION
        SELECT ACCESSED_OBJECTS FROM SQL_CACHE_HISTORY
      )
    ) AO
    WHERE
      R.LINE_NO <= AO.NUM_OBJECTS
  ) O
  WHERE
    V.VIEW_OID = MAP(O.OBJECT_ID, '', -1, TO_BIGINT(O.OBJECT_ID))
),
ACCESSED_CALCVIEWS AS
( SELECT
    C.HOST,
    C.PORT,
    C.SCHEMA_NAME,
    C.VIEW_NAME,
    C.CALCNODE_NAME,
    MAX(LENGTH(C.VIEW_NAME)) OVER () VIEW_LEN,
    SUBSTR(SCENARIO_NAME, 1, LOCATE(SCENARIO_NAME, ':', 1) - 1) SCENARIO_SCHEMA_NAME,
    SUBSTR(SCENARIO_NAME, LOCATE(SCENARIO_NAME, ':', 1) + 1) SCENARIO_NAME
  FROM
    ACCESSED_VIEWS V,
    M_CE_CALCVIEW_DEPENDENCIES C
  WHERE
    V.VIEW_TYPE = 'CALC' AND
    C.VIEW_NAME = V.VIEW_NAME
),
ACCESSED_CALCSCENARIOS AS
( SELECT
    CS.*,
    GREATEST(13, MAX(LENGTH(CS.SCENARIO_NAME)) OVER ()) SCENARIO_LEN
  FROM
    ACCESSED_CALCVIEWS C,
    M_CE_CALCSCENARIOS_OVERVIEW CS
  WHERE
    CS.SCENARIO_NAME = C.SCENARIO_NAME
),
ACCESSED_INDEXES AS
( SELECT
    IC.SCHEMA_NAME,
    IC.TABLE_NAME,
    IC.INDEX_NAME,
    STRING_AGG(IC.COLUMN_NAME, ', ' ORDER BY IC.POSITION) COLUMN_LIST
  FROM
    ACCESSED_TABLES AC,
    INDEX_COLUMNS IC
  WHERE
    AC.SCHEMA_NAME = IC.SCHEMA_NAME AND
    AC.TABLE_NAME = IC.TABLE_NAME
  GROUP BY
    IC.SCHEMA_NAME,
    IC.TABLE_NAME,
    IC.INDEX_NAME
),
ACCESSED_COLUMNS AS
( SELECT
    C.*
  FROM
    ACCESSED_TABLES AC,
    M_CS_ALL_COLUMNS C
  WHERE
    AC.SCHEMA_NAME = C.SCHEMA_NAME AND
    AC.TABLE_NAME = C.TABLE_NAME
),
ACCESSED_INDEX_COLUMNS AS
( SELECT
    IC.SCHEMA_NAME,
    IC.TABLE_NAME,
    IC.INDEX_NAME,
    IC.COLUMN_NAME,
    IC.POSITION,
    I.INDEX_TYPE,
    IC.CONSTRAINT
  FROM
    ACCESSED_TABLES AC,
    INDEX_COLUMNS IC,
    INDEXES I
  WHERE
    AC.SCHEMA_NAME = IC.SCHEMA_NAME AND
    AC.TABLE_NAME = IC.TABLE_NAME AND
    I.SCHEMA_NAME = IC.SCHEMA_NAME AND
    I.INDEX_NAME = IC.INDEX_NAME
  UNION ALL
  SELECT
    SCHEMA_NAME,
    TABLE_NAME,
    INDEX_NAME,
    COLUMN_NAME,
    POSITION,
    'CONCAT ATTRIBUTE' INDEX_TYPE,
    '' CONSTRAINT
  FROM
  ( SELECT DISTINCT
      C.SCHEMA_NAME,
      C.TABLE_NAME,
      C.COLUMN_NAME INDEX_NAME,
      P.POSITION,
      SUBSTR(C.COLUMN_NAME, LOCATE(C.COLUMN_NAME, '$', 1, P.POSITION) + 1, LOCATE(C.COLUMN_NAME, '$', 1, P.POSITION + 1) - LOCATE(C.COLUMN_NAME, '$', 1, P.POSITION) - 1 ) COLUMN_NAME
    FROM
      ( SELECT TOP 50 ROW_NUMBER() OVER () POSITION FROM OBJECTS ) P,
      ACCESSED_COLUMNS C
    WHERE
      INTERNAL_ATTRIBUTE_TYPE = 'CONCAT_ATTRIBUTE' AND
      COLUMN_NAME NOT LIKE '$uc%'
  ) C
  WHERE
    C.COLUMN_NAME != '' AND
    NOT EXISTS
    ( SELECT
        1
      FROM
      ( SELECT
          '$' || STRING_AGG(IC.COLUMN_NAME, '$' ORDER BY IC.POSITION) || '$' INDEX_NAME
        FROM
          INDEX_COLUMNS IC
        WHERE
          IC.SCHEMA_NAME = C.SCHEMA_NAME AND
          IC.TABLE_NAME = C.TABLE_NAME
        GROUP BY
          IC.INDEX_NAME
      ) IC
      WHERE
        IC.INDEX_NAME = C.INDEX_NAME
    )
),
ACCESSED_INDEX_COLUMNS_2 AS
( SELECT
    ROW_NUMBER() OVER (ORDER BY SCHEMA_NAME, TABLE_NAME, COLUMN_NAME) ROW_NUM,
    ROW_NUMBER() OVER (PARTITION BY SCHEMA_NAME, TABLE_NAME ORDER BY COLUMN_NAME) ROW_NUM_PER_TAB,
    SCHEMA_NAME,
    TABLE_NAME,
    COLUMN_NAME,
    INDEX_TYPE
  FROM
  ( SELECT
      C.SCHEMA_NAME,
      C.TABLE_NAME,
      C.COLUMN_NAME,
      C.INDEX_TYPE
    FROM
      ACCESSED_TABLES AC,
      ACCESSED_COLUMNS C
    WHERE
      AC.SCHEMA_NAME = C.SCHEMA_NAME AND
      AC.TABLE_NAME = C.TABLE_NAME AND
      C.INDEX_TYPE != 'NONE' AND
      C.COLUMN_NAME NOT LIKE '$%' AND
      NOT EXISTS
      ( SELECT
          1
        FROM
          ACCESSED_INDEXES IC
        WHERE
          AC.SCHEMA_NAME = IC.SCHEMA_NAME AND
          AC.TABLE_NAME = IC.TABLE_NAME AND
          C.COLUMN_NAME = IC.COLUMN_LIST
      )
  )
  GROUP BY
    SCHEMA_NAME,
    TABLE_NAME,
    COLUMN_NAME,
    INDEX_TYPE
),
ACCESSED_REFERENTIAL_CONSTRAINTS AS
( SELECT
    C.*
  FROM
    ACCESSED_TABLES AC,
    REFERENTIAL_CONSTRAINTS C
  WHERE
    ( C.SCHEMA_NAME = AC.SCHEMA_NAME AND C.TABLE_NAME = AC.TABLE_NAME ) OR
    ( C.REFERENCED_SCHEMA_NAME = AC.SCHEMA_NAME AND C.REFERENCED_TABLE_NAME = AC.TABLE_NAME )
),
ACCESSED_REPLICAS AS
( SELECT
    R.*
  FROM
    ACCESSED_TABLES AC,
    M_TABLE_REPLICAS R
  WHERE
  ( R.SOURCE_SCHEMA_NAME = AC.SCHEMA_NAME AND R.SOURCE_TABLE_NAME = AC.TABLE_NAME ) OR
  ( R.SCHEMA_NAME = AC.SCHEMA_NAME AND R.TABLE_NAME = AC.TABLE_NAME )
),
TABLE_OPTIMIZATIONS AS
( SELECT
      M.START_TIME,
      ROW_NUMBER() OVER (ORDER BY M.START_TIME DESC, M.SCHEMA_NAME, M.TABLE_NAME) LINE_NO,
      M.SCHEMA_NAME,
      M.TABLE_NAME || MAP(M.PART_ID, 0, '', CHAR(32) || '(' || M.PART_ID || ')') TABLE_NAME,
      M.HOST,
      M.TYPE,
      M.MOTIVATION,
      M.MERGED_DELTA_RECORDS MERGED_ROWS,
      TO_DECIMAL(M.EXECUTION_TIME / 1000, 10, 2) RUNTIME_S,
      MAP(M.LAST_ERROR, '0', '0', M.LAST_ERROR || CHAR(32) || M.ERROR_DESCRIPTION) LAST_ERROR,
      BI.MAX_RESULT_LINES
    FROM
      BASIS_INFO BI,
      ACCESSED_TABLES AC,
    ( SELECT DISTINCT
        START_TIME,
        SCHEMA_NAME,
        TABLE_NAME,
        PART_ID,
        HOST,
        TYPE,
        MOTIVATION,
        MERGED_DELTA_RECORDS,
        EXECUTION_TIME,
        LAST_ERROR,
        ERROR_DESCRIPTION
      FROM
        _SYS_STATISTICS.HOST_DELTA_MERGE_STATISTICS
    ) M
    WHERE
      M.START_TIME BETWEEN BI.BEGIN_TIME AND BI.END_TIME AND
      AC.SCHEMA_NAME = M.SCHEMA_NAME AND
      AC.TABLE_NAME = M.TABLE_NAME
),
UNLOADS_AND_LOADS AS
( SELECT
    L.TYPE,
    L.ACTION_TIME,
    ROW_NUMBER() OVER (ORDER BY L.ACTION_TIME DESC, L.SCHEMA_NAME, L.TABLE_NAME) LINE_NO,
    L.SCHEMA_NAME,
    L.TABLE_NAME,
    L.COLUMN_NAME,
    L.HOST,
    L.DURATION_MS,
    L.REASON,
    L.ERROR,
    BI.MAX_RESULT_LINES
  FROM
    BASIS_INFO BI,
  ( SELECT
      'UNLOAD' TYPE,
      U.UNLOAD_TIME ACTION_TIME,
      U.SCHEMA_NAME,
      U.TABLE_NAME || MAP(U.PART_ID, 0, '', CHAR(32) || '(' || U.PART_ID || ')') TABLE_NAME,
      U.COLUMN_NAME,
      U.HOST,
      -1 DURATION_MS,
      U.REASON,
      'n/a' ERROR
    FROM
      ACCESSED_TABLES AC,
      M_CS_UNLOADS U
    WHERE
      AC.SCHEMA_NAME = U.SCHEMA_NAME AND
      AC.TABLE_NAME = U.TABLE_NAME
    UNION ALL
    SELECT
      'LOAD' TYPE,
      L.LOAD_TIME ACTION_TIME,
      L.SCHEMA_NAME,
      L.TABLE_NAME || MAP(L.PART_ID, 0, '', CHAR(32) || '(' || L.PART_ID || ')') TABLE_NAME,
      L.COLUMN_NAME,
      L.HOST,
      L.LOAD_DURATION DURATION_MS,
      'n/a' REASON,
      MAP(L.ERROR_CODE, '0', '0', L.ERROR_CODE || CHAR(32) || L.ERROR_TEXT) ERROR
    FROM
      ACCESSED_TABLES AC,
      M_CS_LOADS L
    WHERE
      AC.SCHEMA_NAME = L.SCHEMA_NAME AND
      AC.TABLE_NAME = L.TABLE_NAME
  ) L
  WHERE
    L.ACTION_TIME BETWEEN BI.BEGIN_TIME AND BI.END_TIME
),
EXPENSIVE_STATEMENTS AS
( SELECT
    ROW_NUMBER() OVER (ORDER BY ES.START_TIME DESC, ES.OPERATION) LINE_NO,
    ES.START_TIME,
    ES.OPERATION,
    ES.DURATION_MICROSEC,
    ES.CPU_TIME,
    ES.RECORDS,
    ES.MEMORY_SIZE,
    ES.ERROR_CODE,
    LTRIM(REPLACE(ES.ERROR_TEXT, 'column store error: search table error:', '')) ERROR_TEXT,
    ES.APP_USER,
    ES.APPLICATION_SOURCE,
    ES.PARAMETERS,
    ES.STATEMENT_HASH,
    SUBSTR(ES.STATEMENT_STRING, 1, 5000) STATEMENT_STRING,
    BI.MAX_RESULT_LINES
  FROM
    BASIS_INFO BI,
    M_EXPENSIVE_STATEMENTS ES
  WHERE
    ES.STATEMENT_HASH = BI.STATEMENT_HASH
),
EXECUTED_STATEMENTS AS
( SELECT
    ROW_NUMBER() OVER (ORDER BY ES.START_TIME DESC) LINE_NO,
    ES.START_TIME,
    ES.DURATION_MICROSEC,
    ES.ERROR_CODE,
    ES.APP_USER,
    ES.APPLICATION_SOURCE,
    ES.STATEMENT_HASH,
    SUBSTR(ES.STATEMENT_STRING, 1, 5000) STATEMENT_STRING,
    BI.MAX_RESULT_LINES
  FROM
    BASIS_INFO BI,
    M_EXECUTED_STATEMENTS ES
  WHERE
    ES.STATEMENT_HASH = BI.STATEMENT_HASH
),
MULTIDIMENSIONAL_STATEMENT_STATISTICS AS
( SELECT
    MS.HOST,
    MS.PORT,
    MS.STATEMENT_HASH,
    SUBSTR(MS.STATEMENT_STRING, 1, 5000) STATEMENT_STRING,
    MS.USER_NAME,
    MS.APPLICATION_USER_NAME,
    MS.APPLICATION_NAME,
    MS.STATEMENT_TYPE,
    MS.EXECUTION_COUNT,
    MS.TOTAL_EXECUTION_TIME,
    MS.MAX_EXECUTION_MEMORY_SIZE
  FROM
    BASIS_INFO BI,
    M_MULTIDIMENSIONAL_STATEMENT_STATISTICS MS
  WHERE
    MS.STATEMENT_HASH = BI.STATEMENT_HASH
),
TRANSACTIONAL_LOCKS AS
( SELECT
    B.SERVER_TIMESTAMP,
    IFNULL(B.BLOCKED_STATEMENT_HASH, '') BLOCKED_STATEMENT_HASH,
    IFNULL(B.LOCK_OWNER_STATEMENT_HASH, '') LOCK_OWNER_STATEMENT_HASH,
    TO_DECIMAL(ROUND(GREATEST(0, IFNULL(B.WAITING_MINUTES, 0) * 60)), 10, 0) WAIT_S,
    B.LOCK_TYPE,
    B.LOCK_MODE,
    B.WAITING_SCHEMA_NAME || '.' || B.WAITING_OBJECT_NAME OBJECT_NAME,
    ROW_NUMBER () OVER (ORDER BY B.SERVER_TIMESTAMP DESC) ROW_NUM,
    BI.MAX_RESULT_LINES
  FROM
    BASIS_INFO BI,
    _SYS_STATISTICS.HOST_BLOCKED_TRANSACTIONS B
  WHERE
    BI.STATEMENT_HASH IN ( B.BLOCKED_STATEMENT_HASH, B.LOCK_OWNER_STATEMENT_HASH )
),
ACTIVE_STATEMENTS AS
( SELECT
    A.*
  FROM
    M_ACTIVE_STATEMENTS A,
  ( SELECT PLAN_ID FROM SQL_CACHE_CURRENT UNION SELECT PLAN_ID FROM SQL_CACHE_HISTORY ) C
  WHERE
    A.PLAN_ID = C.PLAN_ID
),
CALLSTACKS AS
( SELECT
    TC.*,
    T.THREAD_TYPE,
    T.THREAD_STATE,
    T.LOCK_WAIT_NAME
  FROM
    BASIS_INFO BI,
    M_SERVICE_THREADS T,
    M_SERVICE_THREAD_CALLSTACKS TC
  WHERE
    T.STATEMENT_HASH = BI.STATEMENT_HASH AND
    T.THREAD_ID = TC.THREAD_ID
),
OOM_EVENTS AS
( SELECT
    O.TIME,
    O.HEAP_MEMORY_CATEGORY HEAP_ALLOCATOR,
    TO_DECIMAL(O.MEMORY_USED_SIZE / 1024 / 1024 / 1024, 10, 2) MEM_USED_GB,
    O.EVENT_REASON,
    BI.MAX_RESULT_LINES,
    ROW_NUMBER () OVER (ORDER BY TIME DESC) ROW_NUM
  FROM
    BASIS_INFO BI,
    M_OUT_OF_MEMORY_EVENTS O
  WHERE
    O.STATEMENT_HASH = BI.STATEMENT_HASH
),
ADMISSION_CONTROL_EVENTS AS
( SELECT
    A.HOST,
    A.PORT,
    A.EVENT_TIME,
    A.EVENT_REASON,
    A.QUEUE_WAIT_TIME,
    A.CPU_USAGE_RATIO,
    A.MEMORY_RATIO,
    BI.MAX_RESULT_LINES,
    ROW_NUMBER () OVER (ORDER BY A.EVENT_TIME DESC) ROW_NUM
  FROM
    BASIS_INFO BI,
    M_ADMISSION_CONTROL_EVENTS A
  WHERE
    A.STATEMENT_HASH = BI.STATEMENT_HASH
),
PINNED_PLANS AS
( SELECT
    P.*
  FROM
    BASIS_INFO BI,
    PINNED_SQL_PLANS P
  WHERE
    P.STATEMENT_HASH = BI.STATEMENT_HASH
),
STMT_HINTS AS
( SELECT
    S.*
  FROM
    STATEMENT_HINTS S,
  ( SELECT DISTINCT STATEMENT_STRING FROM
    ( SELECT STATEMENT_STRING FROM SQL_CACHE_CURRENT UNION ALL SELECT STATEMENT_STRING FROM SQL_CACHE_HISTORY )
  ) C
  WHERE
    TO_VARCHAR(S.STATEMENT_STRING) = C.STATEMENT_STRING
),
DATA_STATS AS
( SELECT
    S.*,
    GREATEST(11, MAX(LENGTH(S.DATA_SOURCE_SCHEMA_NAME)) OVER ()) SCHEMA_LEN,
    GREATEST(11, MAX(LENGTH(S.OBJECT_NAME)) OVER ()) OBJECT_LEN,
    GREATEST(12, MAX(LENGTH(S.DATA_SOURCE_COLUMN_NAMES)) OVER ()) COLUMN_LEN,
    GREATEST(9, MAX(LENGTH(IFNULL(S.MINVALUE_STRING, ''))) OVER ()) MIN_VALUE_LEN,
    GREATEST(9, MAX(LENGTH(IFNULL(S.MAXVALUE_STRING, ''))) OVER ()) MAX_VALUE_LEN,
    GREATEST(4, MAX(LENGTH(S.DATA_STATISTICS_TYPE)) OVER ()) TYPE_LEN
  FROM
    ACCESSED_TABLES T,
    ( SELECT
        S.*,
        S.DATA_SOURCE_OBJECT_NAME || MAP(S.DATA_SOURCE_PART_ID, 0, '', CHAR(32) || '(' || S.DATA_SOURCE_PART_ID || ')') OBJECT_NAME
      FROM
        DATA_STATISTICS S
    ) S
  WHERE
    S.DATA_SOURCE_SCHEMA_NAME = T.SCHEMA_NAME AND
    S.DATA_SOURCE_OBJECT_NAME  = T.TABLE_NAME
),
PARAMETERS AS
( SELECT
    FILE_NAME,
    SECTION,
    KEY,
    IFNULL(DATABASE_VALUE, IFNULL(SYSTEM_VALUE, IFNULL(HOST_VALUE, DEFAULT_VALUE))) VALUE
  FROM
  ( SELECT
      FILE_NAME,
      SECTION,
      KEY,
      MAX(MAP(LAYER_NAME, 'DEFAULT',  VALUE)) DEFAULT_VALUE,
      MAX(MAP(LAYER_NAME, 'HOST',     VALUE)) HOST_VALUE,
      MAX(MAP(LAYER_NAME, 'SYSTEM',   VALUE)) SYSTEM_VALUE,
      MAX(MAP(LAYER_NAME, 'DATABASE', VALUE)) DATABASE_VALUE
    FROM
      M_INIFILE_CONTENTS
    GROUP BY
      FILE_NAME,
      SECTION,
      KEY
  )
),
TRACE_ENTRIES AS
( SELECT
    ROW_NUMBER() OVER (ORDER BY T.TIMESTAMP DESC) LINE_NO,
    MAP(L.LINE_NO, 1, T.TIMESTAMP, T.TIMESTAMP_SUCC) TIMESTAMP,
    MAP(L.LINE_NO, 1, T.COMPONENT, T.COMPONENT_SUCC) COMPONENT,
    MAP(L.LINE_NO, 1, T.TRACE_TEXT, T.TRACE_TEXT_SUCC) TRACE_TEXT,
    T.MAX_RESULT_LINES
  FROM
  ( SELECT 1 LINE_NO FROM DUMMY UNION ALL
    SELECT 2 LINE_NO FROM DUMMY
  ) L,
  ( SELECT
      BI.STATEMENT_HASH,
      BI.MAX_RESULT_LINES,
      T.TIMESTAMP,
      LAG(T.TIMESTAMP) OVER (PARTITION BY T.HOST, T.PORT, T.THREAD_ID ORDER BY T.TIMESTAMP) TIMESTAMP_SUCC,
      T.COMPONENT,
      LAG(T.COMPONENT) OVER (PARTITION BY T.HOST, T.PORT, T.THREAD_ID ORDER BY T.TIMESTAMP) COMPONENT_SUCC,
      T.TRACE_TEXT,
      LAG(TO_VARCHAR(T.TRACE_TEXT)) OVER (PARTITION BY T.HOST, T.PORT, T.THREAD_ID ORDER BY T.TIMESTAMP) TRACE_TEXT_SUCC
    FROM
      BASIS_INFO BI,
      M_MERGED_TRACES T
    WHERE
    ( BI.TRACE_HISTORY_S = -1 OR T.TIMESTAMP >= ADD_SECONDS(CURRENT_TIMESTAMP, -BI.TRACE_HISTORY_S) )
  ) T
  WHERE
    TO_VARCHAR(T.TRACE_TEXT) LIKE '%' || T.STATEMENT_HASH || '%'
)
SELECT
  MAP(BI.MAX_LINE_LENGTH, -1, L.LINE, SUBSTR(L.LINE, 1, BI.MAX_LINE_LENGTH)) LINE
FROM
  BASIS_INFO BI,
( SELECT   10 LINE_NO, '*******************************************' LINE                                                FROM DUMMY UNION ALL
  SELECT   20,         '* SAP HANA STATEMENT HASH DATA COLLECTION *'                                                     FROM DUMMY UNION ALL
  SELECT   30,         '*******************************************'                                                     FROM DUMMY UNION ALL
  SELECT   40,         ''                                                                                                FROM DUMMY UNION ALL
  SELECT   80, RPAD('Analysis time:',  16, CHAR(32)) || TO_VARCHAR(CURRENT_TIMESTAMP, 'YYYY/MM/DD HH24:MI:SS')           FROM DUMMY UNION ALL
  SELECT   90, RPAD('Generated with:', 16, CHAR(32)) || 'SQL: "HANA_SQL_StatementHash_DataCollector" (SAP Note 1969700)' FROM DUMMY UNION ALL
  SELECT   92, RPAD('Database name:',  16, CHAR(32)) || DATABASE_NAME                                                    FROM M_DATABASE UNION ALL
  SELECT   94, RPAD('Revision level:', 16, CHAR(32)) || VERSION                                                          FROM M_DATABASE UNION ALL
  SELECT  100, RPAD('Statement hash:', 16, CHAR(32)) || STATEMENT_HASH                                                   FROM BASIS_INFO UNION ALL
  SELECT  110, RPAD('Plan ID:',        16, CHAR(32)) || TO_VARCHAR(PLAN_ID)                                              FROM BASIS_INFO WHERE PLAN_ID != -1 UNION ALL
  SELECT  120, ''                                                                                                        FROM DUMMY UNION ALL
  SELECT 1000, '***************' FROM DUMMY UNION ALL
  SELECT 1010, '* KEY FIGURES *' FROM DUMMY UNION ALL
  SELECT 1020, '***************' FROM DUMMY UNION ALL
  SELECT 1030, ''                FROM DUMMY UNION ALL
  SELECT 1070, RPAD('STAT_NAME', 25) || RPAD('VALUE', 33) || LPAD('VALUE_PER_EXEC', 15) || LPAD('VALUE_PER_ROW', 15) FROM DUMMY UNION ALL
  SELECT 1080, RPAD('=', 24, '=') || CHAR(32) || RPAD('=', 32, '=') || CHAR(32) || LPAD('=', 15, '=') || CHAR(32) || LPAD('=', 14, '=') FROM DUMMY UNION ALL
  SELECT
    1100 + L.LINE_NO * 10,
    RPAD(L.STAT_NAME, 25) ||
    RPAD(CASE
      WHEN L.LINE_NO =  1 THEN C.STATEMENT_HASH
      WHEN L.LINE_NO =  2 THEN MAP(MIN(C.PLAN_ID), MAX(C.PLAN_ID), TO_VARCHAR(MIN(C.PLAN_ID)), 'various (' || COUNT(DISTINCT(C.PLAN_ID)) || ')')
      WHEN L.LINE_NO =  3 THEN SUBSTR(MAX(C.TABLE_TYPES) || CHAR(32) || '/' || CHAR(32) || MAP(MAX(C.IS_DISTRIBUTED_EXECUTION), 'TRUE', 'dist.', 'local'), 1, 32)
      WHEN L.LINE_NO =  7 THEN MAX(C.USER_NAME)
      WHEN L.LINE_NO =  8 THEN TO_VARCHAR(MAX(C.LAST_CONNECTION_ID))
      WHEN L.LINE_NO = 10 THEN LPAD(SUM(C.EXECUTION_COUNT), 32)
      WHEN L.LINE_NO = 11 THEN LPAD(SUM(C.TOTAL_RESULT_RECORD_COUNT), 32)
      WHEN L.LINE_NO = 12 THEN LPAD(SUM(C.PREPARATION_COUNT), 32)
      WHEN L.LINE_NO = 21 THEN LPAD(TO_DECIMAL(SUM(C.TOTAL_ELAPSED_TIME)                        / 1000 / BI.TIME_FACTOR, 10, 2) || CHAR(32) || BI.TIME_UNIT, 32)
      WHEN L.LINE_NO = 22 THEN LPAD(TO_DECIMAL(SUM(C.TOTAL_EXECUTION_TIME)                      / 1000 / BI.TIME_FACTOR, 10, 2) || CHAR(32) || BI.TIME_UNIT, 32)
      WHEN L.LINE_NO = 24 THEN LPAD(TO_DECIMAL(SUM(C.TOTAL_PREPARATION_TIME)                    / 1000 / BI.TIME_FACTOR, 10, 2) || CHAR(32) || BI.TIME_UNIT, 32)
      WHEN L.LINE_NO = 28 THEN LPAD(TO_DECIMAL(SUM(C.TOTAL_LOCK_WAIT_DURATION)                  / 1000 / BI.TIME_FACTOR, 10, 2) || CHAR(32) || BI.TIME_UNIT, 32)
      ELSE ' ' END, 32) ||
    LPAD(CASE
      WHEN L.LINE_NO =  3 THEN SUBSTR(MAX(C.TABLE_TYPES) || CHAR(32) || '/' || CHAR(32) || MAP(MAX(C.IS_DISTRIBUTED_EXECUTION), 'TRUE', 'dist.', 'local'), 33)
      WHEN L.LINE_NO = 11 THEN LPAD(TO_DECIMAL(MAP(SUM(C.EXECUTION_COUNT), 0, 0, SUM(C.TOTAL_RESULT_RECORD_COUNT)                       / SUM(C.EXECUTION_COUNT)), 12, 2), 14)
      WHEN L.LINE_NO = 12 THEN LPAD(TO_DECIMAL(MAP(SUM(C.EXECUTION_COUNT), 0, 0, SUM(C.PREPARATION_COUNT)                               / SUM(C.EXECUTION_COUNT)), 12, 2), 14)
      WHEN L.LINE_NO = 21 THEN LPAD(TO_DECIMAL(MAP(SUM(C.EXECUTION_COUNT), 0, 0, SUM(C.TOTAL_ELAPSED_TIME)                       / 1000 / SUM(C.EXECUTION_COUNT)), 12, 2) || ' ms', 14)
      WHEN L.LINE_NO = 22 THEN LPAD(TO_DECIMAL(MAP(SUM(C.EXECUTION_COUNT), 0, 0, SUM(C.TOTAL_EXECUTION_TIME)                     / 1000 / SUM(C.EXECUTION_COUNT)), 12, 2) || ' ms', 14)
      WHEN L.LINE_NO = 24 THEN LPAD(TO_DECIMAL(MAP(SUM(C.EXECUTION_COUNT), 0, 0, SUM(C.TOTAL_PREPARATION_TIME)                   / 1000 / SUM(C.EXECUTION_COUNT)), 12, 2) || ' ms', 14)
      WHEN L.LINE_NO = 28 THEN LPAD(TO_DECIMAL(MAP(SUM(C.EXECUTION_COUNT), 0, 0, SUM(C.TOTAL_LOCK_WAIT_DURATION)                 / 1000 / SUM(C.EXECUTION_COUNT)), 12, 2) || ' ms', 14)
      ELSE ' ' END, 16) ||
    LPAD(CASE
      WHEN L.LINE_NO = 21 THEN LPAD(TO_DECIMAL(MAP(SUM(C.TOTAL_RESULT_RECORD_COUNT), 0, 0, SUM(C.TOTAL_ELAPSED_TIME)                       / 1000 / SUM(C.TOTAL_RESULT_RECORD_COUNT)), 12, 2) || ' ms', 13)
      WHEN L.LINE_NO = 22 THEN LPAD(TO_DECIMAL(MAP(SUM(C.TOTAL_RESULT_RECORD_COUNT), 0, 0, SUM(C.TOTAL_EXECUTION_TIME)                     / 1000 / SUM(C.TOTAL_RESULT_RECORD_COUNT)), 12, 2) || ' ms', 13)
      WHEN L.LINE_NO = 24 THEN LPAD(TO_DECIMAL(MAP(SUM(C.TOTAL_RESULT_RECORD_COUNT), 0, 0, SUM(C.TOTAL_PREPARATION_TIME)                   / 1000 / SUM(C.TOTAL_RESULT_RECORD_COUNT)), 12, 2) || ' ms', 13)
      WHEN L.LINE_NO = 28 THEN LPAD(TO_DECIMAL(MAP(SUM(C.TOTAL_RESULT_RECORD_COUNT), 0, 0, SUM(C.TOTAL_LOCK_WAIT_DURATION)                 / 1000 / SUM(C.TOTAL_RESULT_RECORD_COUNT)), 12, 2) || ' ms', 13)
      ELSE ' ' END, 15)
  FROM
    BASIS_INFO BI,
    ( SELECT
        *
      FROM
        SQL_CACHE_HISTORY
      UNION ALL
      SELECT
        * 
      FROM
        SQL_CACHE_CURRENT
      WHERE
        NOT EXISTS ( SELECT * FROM SQL_CACHE_HISTORY )
    ) C,
    ( SELECT  1 LINE_NO, 'Statement hash' STAT_NAME FROM DUMMY UNION ALL
      SELECT  2, 'Plan ID'                          FROM DUMMY UNION ALL
      SELECT  3, 'Table type / dist.'               FROM DUMMY UNION ALL
      SELECT  7, 'Database user name'               FROM DUMMY UNION ALL
      SELECT  8, 'Last connection ID'               FROM DUMMY UNION ALL
      SELECT  9, ''                                 FROM DUMMY UNION ALL
      SELECT 10, 'Executions'                       FROM DUMMY UNION ALL
      SELECT 11, 'Records'                          FROM DUMMY UNION ALL
      SELECT 12, 'Preparations'                     FROM DUMMY UNION ALL
      SELECT 19, ''                                 FROM DUMMY UNION ALL
      SELECT 21, 'Elapsed time'                     FROM DUMMY UNION ALL
      SELECT 22, 'Execution time'                   FROM DUMMY UNION ALL
      SELECT 24, 'Preparation time'                 FROM DUMMY UNION ALL
      SELECT 28, 'Lock wait time'                   FROM DUMMY
    ) L
  GROUP BY
    C.STATEMENT_HASH,
    L.LINE_NO,
    L.STAT_NAME,
    BI.BEGIN_TIME,
    BI.END_TIME,
    BI.TIME_FACTOR,
    BI.TIME_UNIT
  UNION ALL
  SELECT 1990, ''                   FROM DUMMY UNION ALL
  SELECT 2000, '******************' FROM DUMMY UNION ALL
  SELECT 2010, '* STATEMENT TEXT *' FROM DUMMY UNION ALL
  SELECT 2020, '******************' FROM DUMMY UNION ALL
  SELECT 2030, ''                   FROM DUMMY UNION ALL
  SELECT 2100 + LINE_NO / 1000, SUBSTR(SQL_TEXT, START_POS, END_POS - START_POS - 1)
  FROM
  ( SELECT
      SQL_TEXT,
      SQL_TEXT_LENGTH,
      LINE_NO,
      LAST_LINE_NO,
      MAP(LINE_NO, 1, 0, ( 80 * ( LINE_NO - 1) ) + START_POS) START_POS,
      MAP(END_POS, 0, SQL_TEXT_LENGTH + 2, ( 80 * LINE_NO ) + END_POS) END_POS
    FROM
    ( SELECT
        SQL_TEXT,
        SQL_TEXT_LENGTH,
        LINE_NO,
        CEIL(SQL_TEXT_LENGTH / 80) LAST_LINE_NO,
        CASE
          WHEN NUM_BLANKS >= NUM_COMMAS THEN LOCATE(SUBSTR(SQL_TEXT, ( LINE_NO - 1) * 80), CHAR(32))
          WHEN NUM_COMMAS >  NUM_BLANKS THEN LOCATE(SUBSTR(SQL_TEXT, ( LINE_NO - 1) * 80), ',') 
        END START_POS,
        CASE
          WHEN NUM_BLANKS >= NUM_COMMAS THEN LOCATE(SUBSTR(SQL_TEXT, LINE_NO        * 80), CHAR(32))
          WHEN NUM_COMMAS >  NUM_BLANKS THEN LOCATE(SUBSTR(SQL_TEXT, LINE_NO        * 80), ',')
        END END_POS
      FROM
      ( SELECT
          O.LINE_NO,
          S.SQL_TEXT_LENGTH,
          S.SQL_TEXT,
          LENGTH(S.SQL_TEXT) - LENGTH(REPLACE(S.SQL_TEXT, ',', '')) NUM_COMMAS,
          LENGTH(S.SQL_TEXT) - LENGTH(REPLACE(S.SQL_TEXT, CHAR(32), '')) NUM_BLANKS
        FROM
          BASIS_INFO BI,
        ( SELECT TOP 1
            *
          FROM
          ( SELECT TOP 1
              STATEMENT_HASH,
              STATEMENT_STRING SQL_TEXT,
              LENGTH(STATEMENT_STRING) SQL_TEXT_LENGTH
            FROM
              SQL_CACHE_CURRENT
            UNION
            SELECT TOP 1
              STATEMENT_HASH,
              STATEMENT_STRING SQL_TEXT,
              LENGTH(STATEMENT_STRING) SQL_TEXT_LENGTH
            FROM
              SQL_CACHE_HISTORY
            UNION
            SELECT TOP 1
              STATEMENT_HASH,
              STATEMENT_STRING SQL_TEXT,
              LENGTH(STATEMENT_STRING) SQL_TEXT_LENGTH
            FROM
              EXPENSIVE_STATEMENTS
            UNION
            SELECT TOP 1
              STATEMENT_HASH,
              STATEMENT_STRING SQL_TEXT,
              LENGTH(STATEMENT_STRING) SQL_TEXT_LENGTH
            FROM
              EXECUTED_STATEMENTS
            UNION
            SELECT TOP 1
              STATEMENT_HASH,
              STATEMENT_STRING SQL_TEXT,
              LENGTH(STATEMENT_STRING) SQL_TEXT_LENGTH
            FROM
              MULTIDIMENSIONAL_STATEMENT_STATISTICS
          )
        ) S,
        ( SELECT TOP 1000
            ROW_NUMBER () OVER () LINE_NO
          FROM
            OBJECTS
        ) O
        WHERE
          BI.STATEMENT_HASH = S.STATEMENT_HASH AND
          O.LINE_NO <= CEIL(S.SQL_TEXT_LENGTH / 80)
      )
    )
    WHERE
      START_POS != 0
  ) UNION ALL
  SELECT TOP 1 2490, ''                FROM BIND_VALUES UNION ALL
  SELECT TOP 1 2500, '***************' FROM BIND_VALUES UNION ALL
  SELECT TOP 1 2510, '* BIND VALUES *' FROM BIND_VALUES UNION ALL
  SELECT TOP 1 2520, '***************' FROM BIND_VALUES UNION ALL
  SELECT TOP 1 2530, ''                FROM BIND_VALUES UNION ALL
  SELECT TOP 1 2680, RPAD('EXECUTION_TIME', 19) || CHAR(32) || RPAD('DATA_TYPE', 14) || CHAR(32) || LPAD('POS', 4) || CHAR(32) || RPAD('BIND_VALUE', 50) FROM BIND_VALUES UNION ALL
  SELECT TOP 1 2690, RPAD('=', 19, '=') || CHAR(32) || RPAD('=', 14, '=') || CHAR(32) || LPAD('=', 4, '=') || CHAR(32) || RPAD('=', 50, '=') FROM BIND_VALUES UNION ALL
  SELECT 2700 + LINE_NO / 1000,
    RPAD(IFNULL(TO_VARCHAR(EXECUTION_TIMESTAMP, 'YYYY/MM/DD HH24:MI:SS'), ''), 20) || RPAD(DATA_TYPE_NAME, 15) || LPAD(POSITION, 4) || CHAR(32) || RPAD(PARAMETER_VALUE, 80)
  FROM
    BIND_VALUES
  WHERE
  ( MAX_RESULT_LINES = -1 OR SHOW_COMPLETE_BIND_VALUE_LIST = 'X' OR LINE_NO <= MAX_RESULT_LINES ) UNION ALL
  SELECT 2990, ''              FROM DUMMY UNION ALL
  SELECT 3000, '*************' FROM DUMMY UNION ALL
  SELECT 3010, '* SQL CACHE *' FROM DUMMY UNION ALL
  SELECT 3020, '*************' FROM DUMMY UNION ALL
  SELECT 3030, ''              FROM DUMMY UNION ALL
  SELECT 3080, RPAD('SNAPSHOT_TIME', 20) || RPAD('HOST', 30) || LPAD('PLAN_ID', 12) || LPAD('EXECUTIONS', 15) || LPAD('RECORDS', 15) || LPAD('REC_PER_EXEC', 15) || LPAD('ELAPSED_MS', 18) || LPAD('ELA_PER_EXEC_MS', 16) || LPAD('ELA_PER_REC_MS', 15) || LPAD('PREPARES', 12) ||
    LPAD('PREPARE_MS', 15) || LPAD('LOCK_MS', 15) FROM DUMMY UNION ALL
  SELECT 3090, RPAD('=', 19, '=') || CHAR(32) || RPAD('=', 30, '=') || CHAR(32) || LPAD('=', 11, '=') || CHAR(32) || LPAD('=', 14, '=') || CHAR(32) || LPAD('=', 14, '=') || CHAR(32) || LPAD('=', 14, '=') || CHAR(32) || LPAD('=', 17, '=') || CHAR(32) ||
    LPAD('=', 15, '=') || CHAR(32) || LPAD('=', 14, '=') || CHAR(32) || LPAD('=', 11, '=') || CHAR(32) || LPAD('=', 14, '=') || CHAR(32) || LPAD('=', 14, '=') FROM DUMMY UNION ALL
  SELECT 3100, RPAD('CURRENT', 20) ||
    RPAD(HOST, 30) ||
    LPAD(PLAN_ID, 12) ||
    LPAD(EXECUTION_COUNT, 15) ||
    LPAD(TOTAL_RESULT_RECORD_COUNT, 15) ||
    LPAD(TO_DECIMAL(MAP(EXECUTION_COUNT, 0, 0, TOTAL_RESULT_RECORD_COUNT / EXECUTION_COUNT), 10, 2), 15) ||
    LPAD(TO_DECIMAL(ROUND(TOTAL_ELAPSED_TIME / 1000), 20, 0), 18) ||
    LPAD(TO_DECIMAL(MAP(EXECUTION_COUNT, 0, 0, TOTAL_ELAPSED_TIME / EXECUTION_COUNT / 1000), 10, 2), 16) ||
    LPAD(TO_DECIMAL(MAP(TOTAL_RESULT_RECORD_COUNT, 0, 0, TOTAL_ELAPSED_TIME / TOTAL_RESULT_RECORD_COUNT / 1000), 10, 2), 15) ||
    LPAD(PREPARATION_COUNT, 12) ||
    LPAD(TO_DECIMAL(ROUND(TOTAL_PREPARATION_TIME / 1000), 15, 0), 15) ||
    LPAD(TO_DECIMAL(ROUND(TOTAL_LOCK_WAIT_DURATION / 1000), 15, 0), 15)
  FROM
    SQL_CACHE_CURRENT
  UNION ALL
  SELECT 3200 + C.LINE_NO / 100, RPAD(TO_VARCHAR(C.SERVER_TIMESTAMP, 'YYYY/MM/DD HH24:MI:SS'), 20) ||
    RPAD(C.HOST, 30) ||
    LPAD(C.PLAN_ID, 12) ||
    LPAD(C.EXECUTION_COUNT, 15) ||
    LPAD(C.TOTAL_RESULT_RECORD_COUNT, 15) ||
    LPAD(TO_DECIMAL(MAP(C.EXECUTION_COUNT, 0, 0, C.TOTAL_RESULT_RECORD_COUNT / C.EXECUTION_COUNT), 10, 2), 15) ||
    LPAD(TO_DECIMAL(ROUND(C.TOTAL_ELAPSED_TIME / 1000), 20, 0), 18) ||
    LPAD(TO_DECIMAL(MAP(C.EXECUTION_COUNT, 0, 0, C.TOTAL_ELAPSED_TIME / C.EXECUTION_COUNT / 1000), 10, 2), 16) ||
    LPAD(TO_DECIMAL(MAP(TOTAL_RESULT_RECORD_COUNT, 0, 0, TOTAL_ELAPSED_TIME / TOTAL_RESULT_RECORD_COUNT / 1000), 10, 2), 15) ||
    LPAD(C.PREPARATION_COUNT, 12) ||
    LPAD(TO_DECIMAL(ROUND(C.TOTAL_PREPARATION_TIME / 1000), 15, 0), 15) ||
    LPAD(TO_DECIMAL(ROUND(C.TOTAL_LOCK_WAIT_DURATION / 1000), 15, 0), 15)
  FROM
    BASIS_INFO BI,
    SQL_CACHE_HISTORY C
  WHERE
  ( BI.MAX_RESULT_LINES = -1 OR C.LINE_NO <= BI.MAX_RESULT_LINES ) UNION ALL
  SELECT 3300, ''              FROM DUMMY UNION ALL
  SELECT 3310, RPAD('SNAPSHOT_TIME', 20) || RPAD('HOST', 30) || LPAD('PLAN_ID', 12) || LPAD('EXECUTIONS', 15) || LPAD('RECORDS', 15) || LPAD('REC_PER_EXEC', 15) || LPAD('ELAPSED_MS', 18) || LPAD('ELA_PER_EXEC_MS', 16) || LPAD('ELA_PER_REC_MS', 15) || LPAD('PREPARES', 12) ||
    LPAD('PREPARE_MS', 15) || LPAD('LOCK_MS', 15) FROM DUMMY UNION ALL
  SELECT 3320, RPAD('=', 20, '=') || RPAD('=', 30, '=') || CHAR(32) || LPAD('=', 11, '=') || CHAR(32) || LPAD('=', 14, '=') || CHAR(32) || LPAD('=', 14, '=') || CHAR(32) || LPAD('=', 14, '=') || CHAR(32) || LPAD('=', 17, '=') || CHAR(32) ||
    LPAD('=', 15, '=') || CHAR(32) || LPAD('=', 14, '=') || CHAR(32) || LPAD('=', 11, '=') || CHAR(32) || LPAD('=', 14, '=') || CHAR(32) || LPAD('=', 14, '=') FROM DUMMY UNION ALL
  SELECT
    LINE_NO,
    LINE
  FROM
  ( SELECT BI.MAX_RESULT_LINES, ROW_NUMBER () OVER (ORDER BY TO_VARCHAR(C.SERVER_TIMESTAMP, 'YYYY/MM/DD') DESC) ROWNO, 3330 + MIN(C.LINE_NO) / 1000 LINE_NO, RPAD(TO_VARCHAR(C.SERVER_TIMESTAMP, 'YYYY/MM/DD'), 20) ||
      RPAD(C.HOST, 30) ||
      LPAD(C.PLAN_ID, 12) ||
      LPAD(SUM(C.EXECUTION_COUNT), 15) ||
      LPAD(SUM(C.TOTAL_RESULT_RECORD_COUNT), 15) ||
      LPAD(TO_DECIMAL(MAP(SUM(C.EXECUTION_COUNT), 0, 0, SUM(C.TOTAL_RESULT_RECORD_COUNT) / SUM(C.EXECUTION_COUNT)), 10, 2), 15) ||
      LPAD(TO_DECIMAL(ROUND(SUM(C.TOTAL_ELAPSED_TIME) / 1000), 20, 0), 18) ||
      LPAD(TO_DECIMAL(MAP(SUM(C.EXECUTION_COUNT), 0, 0, SUM(C.TOTAL_ELAPSED_TIME) / SUM(C.EXECUTION_COUNT) / 1000), 10, 2), 16) ||
      LPAD(TO_DECIMAL(MAP(SUM(C.TOTAL_RESULT_RECORD_COUNT), 0, 0, SUM(C.TOTAL_ELAPSED_TIME) / SUM(C.TOTAL_RESULT_RECORD_COUNT) / 1000), 10, 2), 15) ||
      LPAD(SUM(C.PREPARATION_COUNT), 12) ||
      LPAD(TO_DECIMAL(ROUND(SUM(C.TOTAL_PREPARATION_TIME) / 1000), 15, 0), 15) ||
      LPAD(TO_DECIMAL(ROUND(SUM(C.TOTAL_LOCK_WAIT_DURATION) / 1000), 15, 0), 15) LINE
    FROM
      BASIS_INFO BI,
      SQL_CACHE_HISTORY C
    GROUP BY
      BI.MAX_RESULT_LINES,
      TO_VARCHAR(C.SERVER_TIMESTAMP, 'YYYY/MM/DD'),
      C.PLAN_ID,
      C.HOST
  )
  WHERE
  ( MAX_RESULT_LINES = -1 OR ROWNO <= GREATEST(42, MAX_RESULT_LINES) )
  UNION ALL
  SELECT 3390, ''                             FROM MULTIDIMENSIONAL_STATEMENT_STATISTICS UNION ALL
  SELECT 3400, '****************************' FROM MULTIDIMENSIONAL_STATEMENT_STATISTICS UNION ALL
  SELECT 3401, '* MDS STATEMENT STATISTICS *' FROM MULTIDIMENSIONAL_STATEMENT_STATISTICS UNION ALL
  SELECT 3402, '****************************' FROM MULTIDIMENSIONAL_STATEMENT_STATISTICS UNION ALL
  SELECT 3403, ''                             FROM MULTIDIMENSIONAL_STATEMENT_STATISTICS UNION ALL
  SELECT 3410, 'HOST                          EXECUTIONS TOT_TIME_S AVG_TIME_S MAX_MEM_MB TYPE      APPLICATION_NAME              DB_USER                       APPLICATION_USER             ' FROM MULTIDIMENSIONAL_STATEMENT_STATISTICS UNION ALL
  SELECT 3420, '============================= ========== ========== ========== ========== ========= ============================= ============================= =============================' FROM MULTIDIMENSIONAL_STATEMENT_STATISTICS UNION ALL
  SELECT 3430, RPAD(HOST, 30) || LPAD(EXECUTION_COUNT, 10) || LPAD(TO_DECIMAL(TOTAL_EXECUTION_TIME / 1000, 10, 2), 11) || 
    LPAD(TO_DECIMAL(MAP(EXECUTION_COUNT, 0, 0, TOTAL_EXECUTION_TIME / EXECUTION_COUNT), 10, 2), 11) || LPAD(TO_DECIMAL(MAX_EXECUTION_MEMORY_SIZE / 1024 / 1024, 10, 2), 11) || CHAR(32) ||
    RPAD(STATEMENT_TYPE, 10) || RPAD(APPLICATION_NAME, 30) || RPAD(USER_NAME, 30) || RPAD(APPLICATION_USER_NAME, 30)
  FROM
    MULTIDIMENSIONAL_STATEMENT_STATISTICS
  UNION ALL
  SELECT TOP 1 3490, ''                     FROM ACCESSED_VIEWS UNION ALL
  SELECT TOP 1 3500, '********************' FROM ACCESSED_VIEWS UNION ALL
  SELECT TOP 1 3510, '* VIEW INFORMATION *' FROM ACCESSED_VIEWS UNION ALL
  SELECT TOP 1 3520, '********************' FROM ACCESSED_VIEWS UNION ALL
  SELECT TOP 1 3530, ''                     FROM ACCESSED_VIEWS UNION ALL
  SELECT TOP 1 3580, RPAD('SCHEMA_NAME', 19) || CHAR(32) || RPAD('VIEW_NAME', 39) || CHAR(32) || RPAD('VIEW_TYPE', 10) || CHAR(32) || RPAD('DEPENDENT_OBJECTS', 79) FROM ACCESSED_VIEWS UNION ALL
  SELECT TOP 1 3590, RPAD('=', 19, '=') || CHAR(32) || RPAD('=', 39, '=') || CHAR(32) || RPAD('=', 10, '=') || CHAR(32) || RPAD('=', 79, '=') FROM ACCESSED_VIEWS UNION ALL
  SELECT 3600 + ROW_NUMBER() OVER (ORDER BY V.SCHEMA_NAME, V.VIEW_NAME) / 1000, RPAD(V.SCHEMA_NAME, 19) || CHAR(32) || RPAD(V.VIEW_NAME, 39) || CHAR(32) || RPAD(V.VIEW_TYPE, 10) ||
    CHAR(32) || STRING_AGG(D.BASE_OBJECT_NAME, ', ' ORDER BY D.BASE_OBJECT_NAME)
  FROM
    ACCESSED_VIEWS V,
    OBJECT_DEPENDENCIES D
  WHERE
    V.SCHEMA_NAME = D.DEPENDENT_SCHEMA_NAME AND
    V.VIEW_NAME = D.DEPENDENT_OBJECT_NAME
  GROUP BY
    V.SCHEMA_NAME,
    V.VIEW_NAME,
    V.VIEW_TYPE
  UNION ALL
  SELECT TOP 1 3700, ''                                 FROM ACCESSED_CALCVIEWS UNION ALL
  SELECT TOP 1 3701, '********************************' FROM ACCESSED_CALCVIEWS UNION ALL
  SELECT TOP 1 3702, '* CALCULATION VIEW INFORMATION *' FROM ACCESSED_CALCVIEWS UNION ALL
  SELECT TOP 1 3703, '********************************' FROM ACCESSED_CALCVIEWS UNION ALL
  SELECT TOP 1 3704, ''                                 FROM ACCESSED_CALCVIEWS UNION ALL
  SELECT TOP 1 3708, RPAD('SCHEMA_NAME', 19) || CHAR(32) || RPAD('CALCVIEW_NAME', VIEW_LEN) || CHAR(32) || RPAD('CALCNODE_NAME', 29) || CHAR(32) || 'SCENARIO_NAME' FROM ACCESSED_CALCVIEWS UNION ALL
  SELECT TOP 1 3709, RPAD('=', 19, '=') || CHAR(32) || RPAD('=', VIEW_LEN, '=') || CHAR(32) || RPAD('=', 29, '=') || CHAR(32) || RPAD('=', 59, '=') FROM ACCESSED_CALCVIEWS UNION ALL
  SELECT 3710 + ROW_NUMBER() OVER (ORDER BY SCHEMA_NAME, VIEW_NAME) / 100, RPAD(SCHEMA_NAME, 19) || CHAR(32) || RPAD(VIEW_NAME, VIEW_LEN) || CHAR(32) || RPAD(CALCNODE_NAME, 29) || CHAR(32) || SCENARIO_NAME
  FROM
    ACCESSED_CALCVIEWS
  UNION ALL
  SELECT TOP 1 3800, ''                                     FROM ACCESSED_CALCSCENARIOS UNION ALL
  SELECT TOP 1 3801, '************************************' FROM ACCESSED_CALCSCENARIOS UNION ALL
  SELECT TOP 1 3802, '* CALCULATION SCENARIO INFORMATION *' FROM ACCESSED_CALCSCENARIOS UNION ALL
  SELECT TOP 1 3803, '************************************' FROM ACCESSED_CALCSCENARIOS UNION ALL
  SELECT TOP 1 3804, ''                                     FROM ACCESSED_CALCSCENARIOS UNION ALL
  SELECT TOP 1 3808, RPAD('SCENARIO_NAME', SCENARIO_LEN) || CHAR(32) || RPAD('PERSISTENT', 10) || CHAR(32) || RPAD('CREATE_TIME', 19) || CHAR(32) || LPAD('MEM_SIZE_KB', 11) || CHAR(32) || 'COMPONENT' FROM ACCESSED_CALCSCENARIOS UNION ALL
  SELECT TOP 1 3809, RPAD('=', SCENARIO_LEN, '=') || CHAR(32) || RPAD('=', 10, '=') || CHAR(32) || RPAD('=', 19, '=') || CHAR(32) || LPAD('=', 11, '=') || CHAR(32) || RPAD('=', 59, '=') FROM ACCESSED_CALCSCENARIOS UNION ALL
  SELECT 3810 + ROW_NUMBER() OVER (ORDER BY SCENARIO_NAME) / 1000, RPAD(SCENARIO_NAME, SCENARIO_LEN) || CHAR(32) || RPAD(IS_PERSISTENT, 10) || CHAR(32) || RPAD(CREATE_TIME, 19) || CHAR(32) || LPAD(TO_DECIMAL(MEMORY_SIZE / 1024, 10, 2), 11) || CHAR(32) || COMPONENT
  FROM
    ACCESSED_CALCSCENARIOS
  UNION ALL
  SELECT TOP 1 3990, ''                      FROM ACCESSED_TABLES UNION ALL
  SELECT TOP 1 4000, '*********************' FROM ACCESSED_TABLES UNION ALL
  SELECT TOP 1 4010, '* TABLE INFORMATION *' FROM ACCESSED_TABLES UNION ALL
  SELECT TOP 1 4020, '*********************' FROM ACCESSED_TABLES UNION ALL
  SELECT TOP 1 4030, ''                      FROM ACCESSED_TABLES UNION ALL
  SELECT TOP 1 4080, RPAD('SCHEMA_NAME', 19) || CHAR(32) || RPAD('TABLE_NAME', 39) || CHAR(32) || RPAD('TYPE', 6) || CHAR(32) ||
    LPAD('PARTS', 6) || CHAR(32) || LPAD('RECORDS', 11) || CHAR(32) || LPAD('MEM_TOTAL_GB', 12) || CHAR(32) || LPAD('MEM_DELTA_GB', 12) || LPAD('CURR_DISK_GB', 13) ||
    LPAD('MIN_DISK_GB', 12) || LPAD('MAX_DISK_GB', 12) || CHAR(32) || RPAD('HOST', 30) FROM ACCESSED_TABLES UNION ALL
  SELECT TOP 1 4090, RPAD('=', 19, '=') || CHAR(32) || RPAD('=', 39, '=') || CHAR(32) || RPAD('=', 6, '=') || CHAR(32) ||
    LPAD('=', 6, '=') || CHAR(32) || LPAD('=', 11, '=') || CHAR(32) || LPAD('=', 12, '=') || CHAR(32) || LPAD('=', 12, '=') || CHAR(32) || LPAD('=', 12, '=') || CHAR(32) || 
    LPAD('=', 11, '=') || CHAR(32) || LPAD('=', 11, '=') || CHAR(32) || RPAD('=', 30, '=') FROM ACCESSED_TABLES UNION ALL
  SELECT 4100 + ROW_NUMBER() OVER (ORDER BY SCHEMA_NAME, TABLE_NAME), RPAD(SCHEMA_NAME, 20) || RPAD(TABLE_NAME, 40) || RPAD(TABLE_TYPE, 7) || LPAD(PARTITIONS, 6) ||
    LPAD(RECORDS, 12) || LPAD(MEM_TOTAL_GB, 13) || LPAD(MEM_DELTA_GB, 13)  || LPAD(CURR_DISK_GB, 13) ||
    LPAD(IFNULL(TO_VARCHAR(MIN_DISK_GB), 'n/a'), 12) || LPAD(IFNULL(TO_VARCHAR(MAX_DISK_GB), 'n/a'), 12) || CHAR(32) || HOST
  FROM
  ( SELECT
      T.SCHEMA_NAME,
      T.TABLE_NAME,
      T.HOST,
      T.TABLE_TYPE,
      T.PARTITIONS,
      T.RECORDS,
      T.MEM_TOTAL_GB,
      T.MEM_DELTA_GB,
      ( SELECT TO_DECIMAL(SUM(D.DISK_SIZE / 1024 / 1024 / 1024), 10, 2) FROM M_TABLE_PERSISTENCE_STATISTICS D WHERE D.SCHEMA_NAME = T.SCHEMA_NAME AND D.TABLE_NAME = T.TABLE_NAME ) CURR_DISK_GB,
      ( SELECT TO_DECIMAL(MIN(DISK_SIZE / 1024 / 1024 / 1024), 10, 2) FROM ( SELECT SUM(D.DISK_SIZE) DISK_SIZE FROM 
          _SYS_STATISTICS.GLOBAL_TABLE_PERSISTENCE_STATISTICS D WHERE D.SCHEMA_NAME = T.SCHEMA_NAME AND D.TABLE_NAME = T.TABLE_NAME GROUP BY D.SNAPSHOT_ID ) ) MIN_DISK_GB,
      ( SELECT TO_DECIMAL(MAX(DISK_SIZE / 1024 / 1024 / 1024), 10, 2) FROM ( SELECT SUM(D.DISK_SIZE) DISK_SIZE FROM 
          _SYS_STATISTICS.GLOBAL_TABLE_PERSISTENCE_STATISTICS D WHERE D.SCHEMA_NAME = T.SCHEMA_NAME AND D.TABLE_NAME = T.TABLE_NAME GROUP BY D.SNAPSHOT_ID ) ) MAX_DISK_GB
    FROM
    ( SELECT
        T.SCHEMA_NAME,
        T.TABLE_NAME,
        MAP(MIN(T.HOST), MAX(T.HOST), MIN(T.HOST), 'various') HOST,
        'COLUMN' TABLE_TYPE,
        COUNT(*) PARTITIONS,
        SUM(T.RECORD_COUNT) RECORDS,
        TO_DECIMAL(SUM(T.MEMORY_SIZE_IN_TOTAL / 1024 / 1024 / 1024), 10, 2) MEM_TOTAL_GB,
        TO_DECIMAL(SUM(T.MEMORY_SIZE_IN_DELTA / 1024 / 1024 / 1024), 10, 2) MEM_DELTA_GB
      FROM
        ACCESSED_TABLES AC,
        M_CS_TABLES T
      WHERE
        AC.SCHEMA_NAME = T.SCHEMA_NAME AND
        AC.TABLE_NAME = T.TABLE_NAME
      GROUP BY
        T.SCHEMA_NAME,
        T.TABLE_NAME
      UNION ALL
      SELECT
        T.SCHEMA_NAME,
        T.TABLE_NAME,
        MAP(MIN(T.HOST), MAX(T.HOST), MIN(T.HOST), 'various') HOST,
        'ROW' TABLE_TYPE,
        1 PARTITIONS,
        SUM(T.RECORD_COUNT) RECORDS,
        TO_DECIMAL(SUM((T.ALLOCATED_FIXED_PART_SIZE + T.ALLOCATED_VARIABLE_PART_SIZE) / 1024 / 1024 / 1024), 10, 2) MEM_TOTAL_GB,
        0 MEM_DELTA_GB
      FROM
        ACCESSED_TABLES AC,
        M_RS_TABLES T
      WHERE
        AC.SCHEMA_NAME = T.SCHEMA_NAME AND
        AC.TABLE_NAME = T.TABLE_NAME
      GROUP BY
        T.SCHEMA_NAME,
        T.TABLE_NAME
    ) T
  ) UNION ALL
  SELECT TOP 1 4990, ''                      FROM ( SELECT 1 FROM ACCESSED_INDEX_COLUMNS UNION ALL SELECT 1 FROM ACCESSED_INDEX_COLUMNS_2 ) UNION ALL
  SELECT TOP 1 5000, '*********************' FROM ( SELECT 1 FROM ACCESSED_INDEX_COLUMNS UNION ALL SELECT 1 FROM ACCESSED_INDEX_COLUMNS_2 ) UNION ALL
  SELECT TOP 1 5010, '* INDEX INFORMATION *' FROM ( SELECT 1 FROM ACCESSED_INDEX_COLUMNS UNION ALL SELECT 1 FROM ACCESSED_INDEX_COLUMNS_2 ) UNION ALL
  SELECT TOP 1 5020, '*********************' FROM ( SELECT 1 FROM ACCESSED_INDEX_COLUMNS UNION ALL SELECT 1 FROM ACCESSED_INDEX_COLUMNS_2 ) UNION ALL
  SELECT TOP 1 5030, ''                      FROM ( SELECT 1 FROM ACCESSED_INDEX_COLUMNS UNION ALL SELECT 1 FROM ACCESSED_INDEX_COLUMNS_2 ) UNION ALL
  SELECT TOP 1 5080, RPAD('SCHEMA_NAME', 19) || CHAR(32) || RPAD('TABLE_NAME', 39) || CHAR(32) || RPAD('INDEX_NAME', 59) || CHAR(32) ||
    RPAD('INDEX_TYPE', 29) || CHAR(32) || RPAD('COLUMN_NAME', 29) || CHAR(32) || RPAD('CONSTRAINT_NAME', 19) FROM ACCESSED_INDEX_COLUMNS UNION ALL
  SELECT TOP 1 5090, RPAD('=', 19, '=') || CHAR(32) || RPAD('=', 39, '=') || CHAR(32) || RPAD('=', 59, '=') || CHAR(32) ||
    RPAD('=', 29, '=') || CHAR(32) || RPAD('=', 29, '=') || CHAR(32) || RPAD('=', 19, '=') FROM ACCESSED_INDEX_COLUMNS UNION ALL
  SELECT 5100 + ROW_NUMBER() OVER (ORDER BY SCHEMA_NAME, TABLE_NAME, INDEX_NAME, POSITION) / 100, RPAD(MAP(POSITION, 1, SCHEMA_NAME, ''), 20) ||
    RPAD(MAP(POSITION, 1, TABLE_NAME, ''), 40) || RPAD(MAP(POSITION, 1, INDEX_NAME, ''), 60) ||
    RPAD(MAP(POSITION, 1, INDEX_TYPE, ''), 30) || RPAD(COLUMN_NAME, 30) || RPAD(IFNULL(CONSTRAINT, ''), 20)
  FROM
    ACCESSED_INDEX_COLUMNS UNION ALL
  SELECT TOP 1 5490, '' FROM ACCESSED_INDEX_COLUMNS_2 UNION ALL
  SELECT TOP 1 5580, RPAD('SCHEMA_NAME', 19) || CHAR(32) || RPAD('TABLE_NAME', 39) || CHAR(32) || RPAD('INDEX_NAME', 29) || CHAR(32) ||
    RPAD('INDEX_TYPE', 29) || CHAR(32) || RPAD('COLUMN_NAME', 29) FROM ACCESSED_INDEX_COLUMNS_2 UNION ALL
  SELECT TOP 1 5590, RPAD('=', 19, '=') || CHAR(32) || RPAD('=', 39, '=') || CHAR(32) || RPAD('=', 29, '=') || CHAR(32) ||
    RPAD('=', 29, '=') || CHAR(32) || RPAD('=', 29, '=') FROM ACCESSED_INDEX_COLUMNS_2 UNION ALL
  SELECT 5600 + ROW_NUM / 100, RPAD(MAP(ROW_NUM_PER_TAB, 1, SCHEMA_NAME, ''), 20) ||
    RPAD(MAP(ROW_NUM_PER_TAB, 1, TABLE_NAME, ''), 40) || RPAD('implicit', 30) ||
    RPAD('INVERTED VALUE (' || INDEX_TYPE || ')', 30) || RPAD(COLUMN_NAME, 30)
  FROM
    ACCESSED_INDEX_COLUMNS_2
  UNION ALL
  SELECT TOP 1 5990, ''                       FROM DUMMY UNION ALL
  SELECT TOP 1 6000, '**********************' FROM DUMMY UNION ALL
  SELECT TOP 1 6010, '* COLUMN INFORMATION *' FROM DUMMY UNION ALL
  SELECT TOP 1 6020, '**********************' FROM DUMMY UNION ALL
  SELECT TOP 1 6030, ''                       FROM DUMMY UNION ALL
  SELECT TOP 1 6080, RPAD('SCHEMA_NAME', 19) || CHAR(32) || RPAD('TABLE_NAME', 39) || CHAR(32) || RPAD('COLUMN_NAME', 49) || CHAR(32) || LPAD('NUM_DISTINCT', 12) ||
    CHAR(32) || LPAD('SIZE_MB', 12) || CHAR(32) || LPAD('LENGTH', 6) || CHAR(32) || RPAD('DATA_TYPE', 14) || CHAR(32) || RPAD('COMPRESSION', 11) || CHAR(32) || RPAD('INDEX_TYPE', 11) FROM DUMMY UNION ALL
  SELECT TOP 1 6090, RPAD('=', 19, '=') || CHAR(32) || RPAD('=', 39, '=') || CHAR(32) || RPAD('=', 49, '=') || CHAR(32) || LPAD('=', 12, '=') ||
    CHAR(32) || LPAD('=', 12, '=') || CHAR(32) || LPAD('=', 6, '=') || CHAR(32) || RPAD('=', 14, '=') || CHAR(32) || RPAD('=', 11, '=') || CHAR(32) || RPAD('=', 11, '=') FROM DUMMY UNION ALL
  SELECT 6100 + ROW_NUMBER() OVER (ORDER BY SCHEMA_NAME, TABLE_NAME, COLUMN_NAME) / 100,
    RPAD(MAP(ROW_NUMBER() OVER (PARTITION BY SCHEMA_NAME, TABLE_NAME ORDER BY SCHEMA_NAME, TABLE_NAME, COLUMN_NAME), 1, SCHEMA_NAME, ''), 20) ||
    RPAD(MAP(ROW_NUMBER() OVER (PARTITION BY SCHEMA_NAME, TABLE_NAME ORDER BY SCHEMA_NAME, TABLE_NAME, COLUMN_NAME), 1, TABLE_NAME, ''), 40) || RPAD(COLUMN_NAME, 50) || LPAD(NUM_DISTINCT, 12) ||
    LPAD(SIZE_MB, 13) || LPAD(LENGTH, 7) || CHAR(32) || RPAD(DATA_TYPE, 15) || RPAD(COMPRESSION, 12) || RPAD(INDEX_TYPE, 10)
  FROM
  ( SELECT
      CC.SCHEMA_NAME,
      CC.TABLE_NAME,
      CC.COLUMN_NAME,
      TO_VARCHAR(MAX(CC.DISTINCT_COUNT)) NUM_DISTINCT,
      TO_VARCHAR(TO_DECIMAL(SUM(CC.MEMORY_SIZE_IN_TOTAL) / 1024 / 1024, 10, 2)) SIZE_MB,
      MAP(MAX(TC.LENGTH), NULL, '', TO_VARCHAR(MAX(TC.LENGTH))) LENGTH,
      IFNULL(MAX(TC.DATA_TYPE_NAME), 'internal') DATA_TYPE,
      MAP(MIN(CC.COMPRESSION_TYPE), MAX(CC.COMPRESSION_TYPE), MIN(CC.COMPRESSION_TYPE), 'various') COMPRESSION,
      MAP(MIN(CC.INDEX_TYPE), MAX(CC.INDEX_TYPE), MIN(CC.INDEX_TYPE), 'various') INDEX_TYPE
    FROM
      ACCESSED_TABLES AC,
      ACCESSED_COLUMNS CC LEFT OUTER JOIN
      TABLE_COLUMNS TC ON
        TC.SCHEMA_NAME = CC.SCHEMA_NAME AND
        TC.TABLE_NAME = CC.TABLE_NAME AND
        TC.COLUMN_NAME = CC.COLUMN_NAME
    WHERE
      CC.SCHEMA_NAME = AC.SCHEMA_NAME AND
      CC.TABLE_NAME = AC.TABLE_NAME
    GROUP BY
      CC.SCHEMA_NAME,
      CC.TABLE_NAME,
      CC.COLUMN_NAME
    UNION ALL
    SELECT
      TC.SCHEMA_NAME,
      TC.TABLE_NAME,
      TC.COLUMN_NAME,
      '' NUM_DISTINCT,
      '' SIZE_MB,
      TO_VARCHAR(TC.LENGTH) LENGTH,
      TC.DATA_TYPE_NAME DATA_TYPE,
      '' COMPRESSION,
      '' INDEX_TYPE
    FROM
      ACCESSED_TABLES AC,
      TABLE_COLUMNS TC
    WHERE
      TC.SCHEMA_NAME = AC.SCHEMA_NAME AND
      TC.TABLE_NAME = AC.TABLE_NAME AND
      NOT EXISTS ( SELECT 1 FROM ACCESSED_COLUMNS CC WHERE CC.SCHEMA_NAME = AC.SCHEMA_NAME AND CC.TABLE_NAME = AC.TABLE_NAME )
  ) UNION ALL
  SELECT TOP 1 6490, ''                          FROM ACCESSED_PARTITIONS UNION ALL
  SELECT TOP 1 6500, '*************************' FROM ACCESSED_PARTITIONS UNION ALL
  SELECT TOP 1 6510, '* PARTITION INFORMATION *' FROM ACCESSED_PARTITIONS UNION ALL
  SELECT TOP 1 6520, '*************************' FROM ACCESSED_PARTITIONS UNION ALL
  SELECT TOP 1 6530, ''                          FROM ACCESSED_PARTITIONS UNION ALL
  SELECT TOP 1 6580, RPAD('SCHEMA_NAME', 19) || CHAR(32) || RPAD('TABLE_NAME', 39) || CHAR(32) || LPAD('MEM_SIZE_GB', 12) || CHAR(32) || LPAD('RECORDS', 12) || 
    CHAR(32) || RPAD('RANGE / SUBRANGE', 30) || CHAR(32) || RPAD('PARTITION_SPECIFICATION', 70) FROM ACCESSED_PARTITIONS UNION ALL
  SELECT TOP 1 6590, RPAD('=', 19, '=') || CHAR(32) || RPAD('=', 39, '=') || CHAR(32) || LPAD('=', 12, '=') || CHAR(32) || LPAD('=', 12, '=') || CHAR(32) ||
    RPAD('=', 30, '=') || CHAR(32) || RPAD('=', 70, '=') FROM ACCESSED_PARTITIONS UNION ALL
  SELECT 6600 + ROW_NUMBER() OVER (ORDER BY TP.SCHEMA_NAME, TP.TABLE_NAME, TP.PART_ID) / 100, RPAD(MAP(TP.PART_ID, 1, TP.SCHEMA_NAME, ''), 20) || 
    RPAD(TP.TABLE_NAME || CHAR(32) || '(' || TP.PART_ID || ')', 40) || LPAD(TO_DECIMAL(TP.MEM_SIZE_GB, 10, 2), 12) || CHAR(32) || LPAD(TP.RECORDS, 12) ||
    CHAR(32) || RPAD(TP.RANGE || MAP(TP.SUBRANGE, '', '', CHAR(32) || '/' || CHAR(32) || TP.SUBRANGE), 31) || TP.PARTITION_SPEC
  FROM
    ACCESSED_PARTITIONS TP UNION ALL
  SELECT TOP 1 6690, ''                            FROM ACCESSED_REFERENTIAL_CONSTRAINTS UNION ALL
  SELECT TOP 1 6700, '***************************' FROM ACCESSED_REFERENTIAL_CONSTRAINTS UNION ALL
  SELECT TOP 1 6710, '* REFERENTIAL CONSTRAINTS *' FROM ACCESSED_REFERENTIAL_CONSTRAINTS UNION ALL
  SELECT TOP 1 6720, '***************************' FROM ACCESSED_REFERENTIAL_CONSTRAINTS UNION ALL
  SELECT TOP 1 6730, ''                            FROM ACCESSED_REFERENTIAL_CONSTRAINTS UNION ALL
  SELECT TOP 1 6780, RPAD('SCHEMA_NAME', 19) || CHAR(32) || RPAD('TABLE_NAME', 39) || CHAR(32) || RPAD('COLUMN_NAME', 29) || CHAR(32) || LPAD('POS', 3) || CHAR(32) ||
    RPAD('REF_SCHEMA_NAME', 19) || CHAR(32) || RPAD('REF_TABLE_NAME', 39) || CHAR(32) || RPAD('REF_COLUMN_NAME', 29) FROM ACCESSED_REFERENTIAL_CONSTRAINTS UNION ALL
  SELECT TOP 1 6790, RPAD('=', 19, '=') || CHAR(32) || RPAD('=', 39, '=') || CHAR(32) || LPAD('=', 29, '=') || CHAR(32) || LPAD('=', 3, '=') || CHAR(32) ||
    RPAD('=', 19, '=') || CHAR(32) || RPAD('=', 39, '=') || CHAR(32) || LPAD('=', 29, '=') FROM ACCESSED_REFERENTIAL_CONSTRAINTS UNION ALL
  SELECT 6800 + ROW_NUMBER() OVER (ORDER BY AC.SCHEMA_NAME, AC.TABLE_NAME, AC.COLUMN_NAME) / 100, RPAD(AC.SCHEMA_NAME, 20) || RPAD(AC.TABLE_NAME, 40) || 
    RPAD(AC.COLUMN_NAME, 30) || LPAD(AC.POSITION, 3) || CHAR(32) || RPAD(AC.REFERENCED_SCHEMA_NAME, 20) || RPAD(AC.REFERENCED_TABLE_NAME, 40) || RPAD(AC.REFERENCED_COLUMN_NAME, 30)
  FROM
    ACCESSED_REFERENTIAL_CONSTRAINTS AC UNION ALL
  SELECT TOP 1 6990, ''                   FROM ACCESSED_REPLICAS UNION ALL
  SELECT TOP 1 7000, '******************' FROM ACCESSED_REPLICAS UNION ALL
  SELECT TOP 1 7010, '* TABLE REPLICAS *' FROM ACCESSED_REPLICAS UNION ALL
  SELECT TOP 1 7020, '******************' FROM ACCESSED_REPLICAS UNION ALL
  SELECT TOP 1 7030, ''                   FROM ACCESSED_REPLICAS UNION ALL
  SELECT TOP 1 7080, RPAD('HOST', 29) || CHAR(32) || RPAD('SOURCE_SCHEMA_NAME', 19) || CHAR(32) || RPAD('SOURCE_TABLE_NAME', 39) || CHAR(32) || LPAD('PART_ID', 7) ||
    CHAR(32) || RPAD('REPLICA_TYPE', 13) || CHAR(32) || 'REPLICA_NAME' FROM ACCESSED_REPLICAS UNION ALL
  SELECT TOP 1 7090, RPAD('=', 29, '=') || CHAR(32) || RPAD('=', 19, '=') || CHAR(32) || RPAD('=', 39, '=') || CHAR(32) || LPAD('=', 7, '=') ||
    CHAR(32) || RPAD('=', 13, '=') || CHAR(32) || RPAD('=', 50, '=') FROM ACCESSED_REPLICAS UNION ALL
  SELECT 7100 + ROW_NUMBER() OVER (ORDER BY R.SOURCE_SCHEMA_NAME, R.SOURCE_TABLE_NAME, R.PART_ID, R.HOST) / 100, RPAD(R.HOST, 30) || RPAD(R.SOURCE_SCHEMA_NAME, 20) || 
    RPAD(R.SOURCE_TABLE_NAME, 40) || LPAD(R.PART_ID, 7) || CHAR(32) || RPAD(R.REPLICA_TYPE, 13) || CHAR(32) || R.TABLE_NAME
  FROM
    ACCESSED_REPLICAS R UNION ALL
  SELECT TOP 1 7490, ''                        FROM TABLE_OPTIMIZATIONS UNION ALL
  SELECT TOP 1 7500, '***********************' FROM TABLE_OPTIMIZATIONS UNION ALL
  SELECT TOP 1 7510, '* TABLE OPTIMIZATIONS *' FROM TABLE_OPTIMIZATIONS UNION ALL
  SELECT TOP 1 7520, '***********************' FROM TABLE_OPTIMIZATIONS UNION ALL
  SELECT TOP 1 7530, ''                        FROM TABLE_OPTIMIZATIONS UNION ALL
  SELECT TOP 1 7580, RPAD('OPTIMIZATION_TIME', 20) || RPAD('SCHEMA_NAME', 20) || RPAD('TABLE_NAME', 40) ||
    RPAD('HOST', 20) || RPAD('TYPE', 15) || RPAD('MOTIVATION', 10) || LPAD('MERGED_ROWS', 12) || LPAD('RUNTIME_S', 10) || CHAR(32) || 'LAST_ERROR' FROM TABLE_OPTIMIZATIONS UNION ALL
  SELECT TOP 1 7590, RPAD('=', 19, '=') || CHAR(32) || RPAD('=', 19, '=') || CHAR(32) || RPAD('=', 39, '=') ||
    CHAR(32) || RPAD('=', 19, '=') || CHAR(32) || RPAD('=', 14, '=') || CHAR(32) || RPAD('=', 10, '=') || CHAR(32) || LPAD('=', 11, '=') ||
    CHAR(32) || LPAD('=', 9, '=') || CHAR(32) || RPAD('=', 70, '=') FROM TABLE_OPTIMIZATIONS UNION ALL
  SELECT 7600 + ROW_NUMBER() OVER (ORDER BY START_TIME DESC, SCHEMA_NAME, TABLE_NAME) / 1000, RPAD(TO_VARCHAR(START_TIME, 'YYYY/MM/DD HH24:MI:SS'), 20) || RPAD(SCHEMA_NAME, 20) || RPAD(TABLE_NAME, 40) ||
    RPAD(HOST, 20) || RPAD(TYPE, 15) || RPAD(MOTIVATION, 10) || LPAD(MERGED_ROWS, 12) || LPAD(RUNTIME_S, 10) || CHAR(32) || LAST_ERROR
  FROM
    TABLE_OPTIMIZATIONS
  WHERE
  ( MAX_RESULT_LINES = -1 OR LINE_NO <= MAX_RESULT_LINES ) UNION ALL
  SELECT TOP 1 7690, ''                      FROM UNLOADS_AND_LOADS UNION ALL
  SELECT TOP 1 7700, '*********************' FROM UNLOADS_AND_LOADS UNION ALL
  SELECT TOP 1 7710, '* UNLOADS AND LOADS *' FROM UNLOADS_AND_LOADS UNION ALL
  SELECT TOP 1 7720, '*********************' FROM UNLOADS_AND_LOADS UNION ALL
  SELECT TOP 1 7730, ''                      FROM UNLOADS_AND_LOADS UNION ALL
  SELECT TOP 1 7780, RPAD('ACTION_TIME', 20) || RPAD('TYPE', 7) || RPAD('SCHEMA_NAME', 20) || RPAD('TABLE_NAME', 40) || RPAD('COLUMN_NAME', 20) || RPAD('HOST', 20) ||
    LPAD('DURATION_MS', 11) || CHAR(32) || RPAD('REASON', 15) || 'ERROR' FROM UNLOADS_AND_LOADS UNION ALL
  SELECT TOP 1 7790, RPAD('=', 19, '=') || CHAR(32) || RPAD('=', 6, '=') || CHAR(32) || RPAD('=', 19, '=') || CHAR(32) || RPAD('=', 39, '=') ||
    CHAR(32) || RPAD('=', 19, '=') || CHAR(32) || RPAD('=', 19, '=') || CHAR(32) || LPAD('=', 10, '=') || CHAR(32) || RPAD('=', 14, '=') ||
    CHAR(32) || RPAD('=', 60, '=') FROM UNLOADS_AND_LOADS UNION ALL
  SELECT 7800 + ROW_NUMBER() OVER (ORDER BY ACTION_TIME DESC, SCHEMA_NAME, TABLE_NAME) / 1000, RPAD(TO_VARCHAR(ACTION_TIME, 'YYYY/MM/DD HH24:MI:SS'), 20) || RPAD(TYPE, 7) ||
    RPAD(SCHEMA_NAME, 20) || RPAD(TABLE_NAME, 40) || RPAD(COLUMN_NAME, 20) || RPAD(HOST, 20) || LPAD(MAP(DURATION_MS, -1, 'n/a', TO_VARCHAR(DURATION_MS)), 11) || CHAR(32) || RPAD(REASON, 15) || ERROR
  FROM
    UNLOADS_AND_LOADS
  WHERE
  ( MAX_RESULT_LINES = -1 OR LINE_NO <= MAX_RESULT_LINES ) UNION ALL
  SELECT TOP 1 7990, ''                               FROM EXPENSIVE_STATEMENTS UNION ALL
  SELECT TOP 1 8000, '******************************' FROM EXPENSIVE_STATEMENTS UNION ALL
  SELECT TOP 1 8010, '* EXPENSIVE STATEMENTS TRACE *' FROM EXPENSIVE_STATEMENTS UNION ALL
  SELECT TOP 1 8020, '******************************' FROM EXPENSIVE_STATEMENTS UNION ALL
  SELECT TOP 1 8030, ''                               FROM EXPENSIVE_STATEMENTS UNION ALL
  SELECT TOP 1 8080, RPAD('START_TIME', 19) || CHAR(32) || RPAD('OPERATION', 20) || CHAR(32) || LPAD('DURATION_S', 11) || CHAR(32) || LPAD('CPU_S', 10) || CHAR(32) || LPAD('RECORDS', 9) ||
    CHAR(32) || LPAD('MEM_MB', 8) ||  CHAR(32) || RPAD('APP_USER', 25) || CHAR(32) || RPAD('APP_SOURCE', 39) || CHAR(32) || 'ERROR' FROM EXPENSIVE_STATEMENTS UNION ALL
  SELECT TOP 1 8090, RPAD('=', 19, '=') || CHAR(32) || RPAD('=', 20, '=') || CHAR(32) || LPAD('=', 11, '=') || CHAR(32) || LPAD('=', 10, '=') || CHAR(32) || LPAD('=', 9, '=') || CHAR(32) ||
    LPAD('=', 8, '=') || CHAR(32) || RPAD('=', 25, '=') || CHAR(32) || RPAD('=', 39, '=') || CHAR(32) || LPAD('=', 50, '=') FROM EXPENSIVE_STATEMENTS UNION ALL
  SELECT 8100 + ROW_NUMBER() OVER (ORDER BY START_TIME DESC, OPERATION) / 100, RPAD(TO_VARCHAR(START_TIME, 'YYYY/MM/DD HH24:MI:SS'), 20) || RPAD(OPERATION, 21) ||
    LPAD(TO_VARCHAR(TO_DECIMAL(DURATION_MICROSEC / 1000000, 10, 2)), 11) || LPAD(TO_VARCHAR(TO_DECIMAL(CPU_TIME / 1000000, 10, 2)), 11) || LPAD(RECORDS, 10) ||
    LPAD(TO_DECIMAL(ROUND(MEMORY_SIZE / 1024 / 1024), 10, 0), 9) || CHAR(32) || RPAD(APP_USER, 26) || RPAD(APPLICATION_SOURCE, 40) || ERROR_CODE || MAP(ERROR_TEXT, '', '', ':' || CHAR(32) || ERROR_TEXT)
  FROM
    EXPENSIVE_STATEMENTS
  WHERE
  ( MAX_RESULT_LINES = -1 OR LINE_NO <= MAX_RESULT_LINES ) UNION ALL
  SELECT TOP 1 8570, '' FROM EXPENSIVE_STATEMENTS UNION ALL
  SELECT TOP 1 8580, RPAD('START_TIME', 19) || CHAR(32) || RPAD('BIND_VALUES', 100) FROM EXPENSIVE_STATEMENTS UNION ALL
  SELECT TOP 1 8590, RPAD('=', 19, '=') || CHAR(32) || RPAD('=', 100, '=') FROM EXPENSIVE_STATEMENTS UNION ALL
  SELECT 8600 + ROW_NUMBER() OVER (ORDER BY START_TIME DESC) / 100, RPAD(TO_VARCHAR(START_TIME, 'YYYY/MM/DD HH24:MI:SS'), 20) || RPAD(PARAMETERS, 180)
  FROM
  ( SELECT
      ROW_NUMBER() OVER (ORDER BY ES.START_TIME DESC) LINE_NO,
      ES.START_TIME,
      ES.PARAMETERS,
      BI.MAX_RESULT_LINES
    FROM
      BASIS_INFO BI,
      EXPENSIVE_STATEMENTS ES
    WHERE
      ES.STATEMENT_HASH = BI.STATEMENT_HASH AND
      ES.PARAMETERS != ''
  )
  WHERE
  ( MAX_RESULT_LINES = -1 OR LINE_NO <= MAX_RESULT_LINES ) UNION ALL
  SELECT TOP 1 8690, ''                              FROM EXECUTED_STATEMENTS UNION ALL
  SELECT TOP 1 8700, '*****************************' FROM EXECUTED_STATEMENTS UNION ALL
  SELECT TOP 1 8710, '* EXECUTED STATEMENTS TRACE *' FROM EXECUTED_STATEMENTS UNION ALL
  SELECT TOP 1 8720, '*****************************' FROM EXECUTED_STATEMENTS UNION ALL
  SELECT TOP 1 8730, ''                              FROM EXECUTED_STATEMENTS UNION ALL
  SELECT TOP 1 8780, RPAD('START_TIME', 19) || CHAR(32) || LPAD('DURATION_S', 11) ||  CHAR(32) || LPAD('ERROR', 5) || CHAR(32) || RPAD('APP_USER', 25) || CHAR(32) || RPAD('APP_SOURCE', 29) FROM EXECUTED_STATEMENTS UNION ALL
  SELECT TOP 1 8790, RPAD('=', 19, '=') || CHAR(32) || LPAD('=', 11, '=') || CHAR(32) || LPAD('=', 5, '=') || CHAR(32) || RPAD('=', 25, '=') || CHAR(32) || RPAD('=', 29, '=') FROM EXECUTED_STATEMENTS UNION ALL
  SELECT 8800 + ROW_NUMBER() OVER (ORDER BY START_TIME DESC) / 100, RPAD(TO_VARCHAR(START_TIME, 'YYYY/MM/DD HH24:MI:SS'), 20) ||
    LPAD(TO_VARCHAR(TO_DECIMAL(DURATION_MICROSEC / 1000000, 10, 2)), 11) || LPAD(ERROR_CODE, 6) || CHAR(32) || RPAD(APP_USER, 26) || RPAD(APPLICATION_SOURCE, 30)
  FROM
    EXECUTED_STATEMENTS
  WHERE
  ( MAX_RESULT_LINES = -1 OR LINE_NO <= MAX_RESULT_LINES ) UNION ALL
  SELECT TOP 1 8990, ''                        FROM TRANSACTIONAL_LOCKS UNION ALL
  SELECT TOP 1 9000, '***********************' FROM TRANSACTIONAL_LOCKS UNION ALL
  SELECT TOP 1 9010, '* TRANSACTIONAL LOCKS *' FROM TRANSACTIONAL_LOCKS UNION ALL
  SELECT TOP 1 9020, '***********************' FROM TRANSACTIONAL_LOCKS UNION ALL
  SELECT TOP 1 9030, ''                        FROM TRANSACTIONAL_LOCKS UNION ALL
  SELECT TOP 1 9100, RPAD('LOCK_TIME', 19) || CHAR(32) || RPAD('BLOCKED_STATEMENT_HASH', 32) || CHAR(32) || RPAD('BLOCKING_STATEMENT_HASH', 32) || CHAR(32) || LPAD('WAIT_S', 8) || CHAR(32) ||
    RPAD('LOCK_TYPE', 15) || CHAR(32) || RPAD('LOCK_MODE', 21) || CHAR(32) || RPAD('OBJECT_NAME', 40) FROM TRANSACTIONAL_LOCKS UNION ALL
  SELECT TOP 1 9110, RPAD('=', 19, '=') || CHAR(32) || RPAD('=', 32, '=') || CHAR(32) || RPAD('=', 32, '=') || CHAR(32) || LPAD('=', 8, '=') || CHAR(32) ||
    RPAD('=', 15, '=') || CHAR(32) || RPAD('=', 21, '=') || CHAR(32) || RPAD('=', 40, '=') FROM TRANSACTIONAL_LOCKS UNION ALL
  SELECT 9120 + ROW_NUMBER() OVER (ORDER BY SERVER_TIMESTAMP DESC), RPAD(SERVER_TIMESTAMP, 19) || CHAR(32) || RPAD(BLOCKED_STATEMENT_HASH, 32) || CHAR(32) ||
    RPAD(LOCK_OWNER_STATEMENT_HASH, 32) || CHAR(32) || LPAD(WAIT_S, 8) || CHAR(32) ||
    RPAD(LOCK_TYPE, 15) || CHAR(32) || RPAD(LOCK_MODE, 21) || CHAR(32) || OBJECT_NAME
  FROM
    TRANSACTIONAL_LOCKS
  WHERE
    MAX_RESULT_LINES = -1 OR ROW_NUM <= MAX_RESULT_LINES UNION ALL
  SELECT TOP 1  9990, ''                   FROM THREAD_SAMPLES UNION ALL
  SELECT TOP 1 10000, '******************' FROM THREAD_SAMPLES UNION ALL
  SELECT TOP 1 10010, '* THREAD SAMPLES *' FROM THREAD_SAMPLES UNION ALL
  SELECT TOP 1 10020, '******************' FROM THREAD_SAMPLES UNION ALL
  SELECT TOP 1 10030, ''                   FROM THREAD_SAMPLES UNION ALL
  SELECT TOP 1 10080, LPAD('SAMPLES', 7) || CHAR(32) || LPAD('PERCENT', 7) || CHAR(32) || RPAD('HOST', 30) || CHAR(32) || RPAD('PORT', 5) || 'THREAD_TYPE' FROM THREAD_SAMPLES UNION ALL
  SELECT TOP 1 10090, LPAD('=', 7, '=') || CHAR(32) || LPAD('=', 7, '=') || CHAR(32) || RPAD('=', 29, '=') || CHAR(32) || RPAD('=', 5, '=') || CHAR(32) || RPAD('=', 30, '=') FROM THREAD_SAMPLES UNION ALL
  SELECT 10100 + ROW_NUM / 100, LPAD(SAMPLES, 7) || CHAR(32) || LPAD(PERCENT, 7) || CHAR(32) || RPAD(HOST, 30) || RPAD(PORT, 6) || THREAD_TYPE
  FROM
  ( SELECT
      SAMPLES,
      TO_DECIMAL(SAMPLES / TOTAL_SAMPLES * 100, 10, 2) PERCENT,
      HOST,
      PORT,
      THREAD_TYPE,
      MAX_RESULT_LINES,
      ROW_NUMBER () OVER (ORDER BY SAMPLES DESC, HOST, PORT, THREAD_TYPE) ROW_NUM
    FROM
    ( SELECT
        SUM(TS.SAMPLES) SAMPLES,
        TS.TOTAL_SAMPLES,
        TS.HOST,
        TS.PORT,
        TS.THREAD_TYPE,
        BI.MAX_RESULT_LINES
      FROM
        BASIS_INFO BI,
        THREAD_SAMPLES TS
      GROUP BY
        TS.TOTAL_SAMPLES,
        TS.HOST,
        TS.PORT,
        TS.THREAD_TYPE,
        BI.MAX_RESULT_LINES
    )
  )
  WHERE
  ( MAX_RESULT_LINES = -1 OR ROW_NUM <= MAX_RESULT_LINES ) UNION ALL
  SELECT TOP 1 10470, ''                   FROM THREAD_SAMPLES UNION ALL
  SELECT TOP 1 10480, LPAD('SAMPLES', 7) || CHAR(32) || LPAD('PERCENT', 7) || CHAR(32) || RPAD('THREAD_STATE', 35) || CHAR(32) || RPAD('LOCK_NAME', 70) FROM THREAD_SAMPLES UNION ALL
  SELECT TOP 1 10490, LPAD('=', 7, '=') || CHAR(32) || LPAD('=', 7, '=') || CHAR(32) || RPAD('=', 35, '=') || CHAR(32) || RPAD('=', 70, '=') FROM THREAD_SAMPLES UNION ALL
  SELECT 10500 + ROW_NUM / 100, LPAD(SAMPLES, 7) || CHAR(32) || LPAD(PERCENT, 7) || CHAR(32) || RPAD(THREAD_STATE, 36) || LOCK_NAME
  FROM
  ( SELECT
      SAMPLES,
      TO_DECIMAL(SAMPLES / TOTAL_SAMPLES * 100, 10, 2) PERCENT,
      THREAD_STATE,
      LOCK_NAME,
      MAX_RESULT_LINES,
      ROW_NUMBER () OVER (ORDER BY SAMPLES DESC, THREAD_STATE, LOCK_NAME) ROW_NUM
    FROM
    ( SELECT
        SUM(TS.SAMPLES) SAMPLES,
        TS.TOTAL_SAMPLES,
        TS.THREAD_STATE,
        TS.LOCK_NAME,
        BI.MAX_RESULT_LINES
      FROM
        BASIS_INFO BI,
        THREAD_SAMPLES TS
      GROUP BY
        TS.TOTAL_SAMPLES,
        TS.THREAD_STATE,
        TS.LOCK_NAME,
        BI.MAX_RESULT_LINES
    )
  )
  WHERE
  ( MAX_RESULT_LINES = -1 OR ROW_NUM <= MAX_RESULT_LINES ) UNION ALL
  SELECT TOP 1 10730, ''                   FROM THREAD_SAMPLES UNION ALL
  SELECT TOP 1 10780, LPAD('SAMPLES', 7) || CHAR(32) || LPAD('PERCENT', 7) || CHAR(32) || RPAD('THREAD_TYPE', 20) || CHAR(32) || RPAD('THREAD_METHOD', 50) FROM THREAD_SAMPLES UNION ALL
  SELECT TOP 1 10790, LPAD('=', 7, '=') || CHAR(32) || LPAD('=', 7, '=') || CHAR(32) || RPAD('=', 20, '=') || CHAR(32) || RPAD('=', 50, '=') FROM THREAD_SAMPLES UNION ALL
  SELECT 10800 + ROW_NUM / 100, LPAD(SAMPLES, 7) || CHAR(32) || LPAD(PERCENT, 7) || CHAR(32) || RPAD(THREAD_TYPE, 21) || THREAD_METHOD
  FROM
  ( SELECT
      SAMPLES,
      TO_DECIMAL(SAMPLES / TOTAL_SAMPLES * 100, 10, 2) PERCENT,
      THREAD_TYPE,
      THREAD_METHOD,
      MAX_RESULT_LINES,
      ROW_NUMBER () OVER (ORDER BY SAMPLES DESC, THREAD_TYPE, THREAD_METHOD) ROW_NUM
    FROM
    ( SELECT
        SUM(TS.SAMPLES) SAMPLES,
        TS.TOTAL_SAMPLES,
        TS.THREAD_TYPE,
        TS.THREAD_METHOD,
        BI.MAX_RESULT_LINES
      FROM
        BASIS_INFO BI,
        THREAD_SAMPLES TS
      GROUP BY
        TS.TOTAL_SAMPLES,
        TS.THREAD_TYPE,
        TS.THREAD_METHOD,
        BI.MAX_RESULT_LINES
    )
  )
  WHERE
  ( MAX_RESULT_LINES = -1 OR ROW_NUM <= MAX_RESULT_LINES ) UNION ALL
  SELECT TOP 1 11030, ''                   FROM THREAD_SAMPLES UNION ALL
  SELECT TOP 1 11080, LPAD('SAMPLES', 7) || CHAR(32) || LPAD('PERCENT', 7) || CHAR(32) || RPAD('THREAD_TYPE', 20) || CHAR(32) || RPAD('THREAD_METHOD', 50) || CHAR(32) || RPAD('THREAD_DETAIL', 80) FROM THREAD_SAMPLES UNION ALL
  SELECT TOP 1 11090, LPAD('=', 7, '=') || CHAR(32) || LPAD('=', 7, '=') || CHAR(32) || RPAD('=', 20, '=') || CHAR(32) || RPAD('=', 50, '=') || CHAR(32) || RPAD('=', 80, '=') FROM THREAD_SAMPLES UNION ALL
  SELECT 11100 + ROW_NUM / 100, LPAD(SAMPLES, 7) || CHAR(32) || LPAD(PERCENT, 7) || CHAR(32) || RPAD(THREAD_TYPE, 21) || RPAD(THREAD_METHOD, 51) || THREAD_DETAIL
  FROM
  ( SELECT
      SAMPLES,
      TO_DECIMAL(SAMPLES / TOTAL_SAMPLES * 100, 10, 2) PERCENT,
      THREAD_TYPE,
      THREAD_METHOD,
      THREAD_DETAIL,
      MAX_RESULT_LINES,
      ROW_NUMBER () OVER (ORDER BY SAMPLES DESC, THREAD_TYPE, THREAD_METHOD, THREAD_DETAIL) ROW_NUM
    FROM
    ( SELECT
        SUM(TS.SAMPLES) SAMPLES,
        TS.TOTAL_SAMPLES,
        TS.THREAD_TYPE,
        TS.THREAD_METHOD,
        TS.THREAD_DETAIL,
        BI.MAX_RESULT_LINES
      FROM
        BASIS_INFO BI,
        THREAD_SAMPLES TS
      GROUP BY
        TS.TOTAL_SAMPLES,
        TS.THREAD_TYPE,
        TS.THREAD_METHOD,
        TS.THREAD_DETAIL,
        BI.MAX_RESULT_LINES
    )
  )
  WHERE
  ( MAX_RESULT_LINES = -1 OR ROW_NUM <= MAX_RESULT_LINES ) UNION ALL
  SELECT TOP 1 12030, ''                   FROM THREAD_SAMPLES UNION ALL
  SELECT TOP 1 12080, LPAD('SAMPLES', 7) || CHAR(32) || LPAD('PERCENT', 7) || CHAR(32) || RPAD('DB_USER', 20) || CHAR(32) || RPAD('APP_USER', 30) || CHAR(32) || RPAD('APP_NAME', 30) || CHAR(32) || RPAD('APP_SOURCE', 50) FROM THREAD_SAMPLES UNION ALL
  SELECT TOP 1 12090, LPAD('=', 7, '=') || CHAR(32) || LPAD('=', 7, '=') || CHAR(32) || RPAD('=', 20, '=') || CHAR(32) || RPAD('=', 30, '=') || CHAR(32) || RPAD('=', 30, '=') || CHAR(32) || RPAD('=', 50, '=') FROM THREAD_SAMPLES UNION ALL
  SELECT 12100 + ROW_NUM / 100, LPAD(SAMPLES, 7) || CHAR(32) || LPAD(PERCENT, 7) || CHAR(32) || RPAD(DB_USER, 21) || RPAD(APP_USER, 31) || RPAD(APP_NAME, 31) || APP_SOURCE
  FROM
  ( SELECT
      SAMPLES,
      TO_DECIMAL(SAMPLES / TOTAL_SAMPLES * 100, 10, 2) PERCENT,
      DB_USER,
      APP_USER,
      APP_NAME,
      APP_SOURCE,
      MAX_RESULT_LINES,
      ROW_NUMBER () OVER (ORDER BY SAMPLEs DESC, DB_USER, APP_USER, APP_NAME, APP_SOURCE) ROW_NUM
    FROM
    ( SELECT
        SUM(TS.SAMPLES) SAMPLES,
        TS.TOTAL_SAMPLES,
        TS.DB_USER,
        TS.APP_USER,
        TS.APP_NAME,
        TS.APP_SOURCE,
        BI.MAX_RESULT_LINES
      FROM
        BASIS_INFO BI,
        THREAD_SAMPLES TS
      GROUP BY
        TS.TOTAL_SAMPLES,
        TS.DB_USER,
        TS.APP_USER,
        TS.APP_NAME,
        TS.APP_SOURCE,
        BI.MAX_RESULT_LINES
    )
  )
  WHERE
  ( MAX_RESULT_LINES = -1 OR ROW_NUM <= MAX_RESULT_LINES ) UNION ALL
  SELECT TOP 1 12330, ''                   FROM THREAD_SAMPLES UNION ALL
  SELECT TOP 1 12380, LPAD('SAMPLES', 7) || CHAR(32) || LPAD('PERCENT', 7) || CHAR(32) || RPAD('CLIENT_IP', 15) || CHAR(32) || LPAD('CLIENT_PID', 10) FROM THREAD_SAMPLES UNION ALL
  SELECT TOP 1 12390, LPAD('=', 7, '=') || CHAR(32) || LPAD('=', 7, '=') || CHAR(32) || RPAD('=', 15, '=') || CHAR(32) || RPAD('=', 10, '=') FROM THREAD_SAMPLES UNION ALL
  SELECT 12400 + ROW_NUM / 100, LPAD(SAMPLES, 7) || CHAR(32) || LPAD(PERCENT, 7) || CHAR(32) || RPAD(CLIENT_IP, 15) || CHAR(32) || LPAD(CLIENT_PID, 10)
  FROM
  ( SELECT
      SAMPLES,
      TO_DECIMAL(SAMPLES / TOTAL_SAMPLES * 100, 10, 2) PERCENT,
      CLIENT_IP,
      CLIENT_PID,
      ROW_NUMBER () OVER (ORDER BY SAMPLES DESC, CLIENT_IP, CLIENT_PID) ROW_NUM,
      MAX_RESULT_LINES
    FROM
    ( SELECT
        SUM(TS.SAMPLES) SAMPLES,
        TS.TOTAL_SAMPLES,
        TS.CLIENT_IP,
        TS.CLIENT_PID,
        BI.MAX_RESULT_LINES
      FROM
        BASIS_INFO BI,
        THREAD_SAMPLES TS
      GROUP BY
        TS.TOTAL_SAMPLES,
        TS.CLIENT_IP,
        TS.CLIENT_PID,
        BI.MAX_RESULT_LINES
    ) T
  )
  WHERE
  ( MAX_RESULT_LINES = -1 OR ROW_NUM <= MAX_RESULT_LINES ) UNION ALL
  SELECT TOP 1 13030, ''                   FROM THREAD_SAMPLES UNION ALL
  SELECT TOP 1 13080, LPAD('AVG_PARALLELISM', 15) || CHAR(32) || LPAD('MAX_PARALLELISM', 15) || CHAR(32) || LPAD('MAX_TOTAL_THREADS', 30) || CHAR(32) || LPAD('MAX_TOTAL_RUNNING_THREADS', 30) FROM THREAD_SAMPLES UNION ALL
  SELECT TOP 1 13090, LPAD('=', 15, '=') || CHAR(32) || LPAD('=', 15, '=') || CHAR(32) || LPAD('=', 30, '=') || CHAR(32) || LPAD('=', 30, '=') FROM THREAD_SAMPLES UNION ALL
  SELECT 13100, LPAD(TO_DECIMAL(AVG_PARALLELISM, 10, 2), 15) || CHAR(32) || LPAD(MAX_PARALLELISM, 15) || CHAR(32) || LPAD(MAX_THREADS, 30) || CHAR(32) || LPAD(MAX_RUNNING_THREADS, 30) FROM
  ( SELECT
      IFNULL(AVG(NUM), 0) AVG_PARALLELISM,
      IFNULL(MAX(NUM), 0) MAX_PARALLELISM
    FROM
    ( SELECT
        SUM(SAMPLES) NUM
      FROM
        THREAD_SAMPLES
      WHERE
        THREAD_TYPE = 'JobWorker'
      GROUP BY
        TIMESTAMP,
        CONNECTION_ID
    )
  ),
  ( SELECT
      IFNULL(MAX(NUM), 0) MAX_THREADS,
      IFNULL(MAX(NUM_RUNNING), 0) MAX_RUNNING_THREADS
    FROM
    ( SELECT
        SUM(SAMPLES) NUM,
        SUM(MAP(THREAD_STATE, 'Running', SAMPLES, 0)) NUM_RUNNING
      FROM
        THREAD_SAMPLES
      GROUP BY
        TIMESTAMP
    )
  )
  WHERE
    MAX_THREADS > 0
  UNION ALL
  SELECT TOP 1 14990, ''                      FROM ACTIVE_STATEMENTS UNION ALL
  SELECT TOP 1 15000, '*********************' FROM ACTIVE_STATEMENTS UNION ALL
  SELECT TOP 1 15010, '* ACTIVE STATEMENTS *' FROM ACTIVE_STATEMENTS UNION ALL
  SELECT TOP 1 15020, '*********************' FROM ACTIVE_STATEMENTS UNION ALL
  SELECT TOP 1 15030, ''                      FROM ACTIVE_STATEMENTS UNION ALL
  SELECT TOP 1 15080, RPAD('START_TIME', 19) || CHAR(32) || LPAD('EXEC_TIME_MS', 15) || CHAR(32) || LPAD('LAST_ACT_MS', 15) || CHAR(32) || LPAD('CONN_ID', 19) || CHAR(32) || RPAD('STATUS', 19) || CHAR(32) || LPAD('MEM_GB', 10) FROM ACTIVE_STATEMENTS UNION
ALL
  SELECT TOP 1 15090, RPAD('=', 19, '=') || CHAR(32) || RPAD('=', 15, '=') || CHAR(32) || RPAD('=', 15, '=') || CHAR(32) || LPAD('=', 19, '=') || CHAR(32) || RPAD('=', 19, '=') || CHAR(32) || LPAD('=', 10, '=') FROM ACTIVE_STATEMENTS UNION ALL
  SELECT 15100 + ROW_NUMBER () OVER (ORDER BY A.LAST_EXECUTED_TIME), RPAD(TO_VARCHAR(A.LAST_EXECUTED_TIME, 'YYYY/MM/DD HH24:MI:SS'), 19) || CHAR(32) ||
    LPAD(TO_DECIMAL(GREATEST(NANO100_BETWEEN(A.LAST_EXECUTED_TIME, CURRENT_TIMESTAMP) / 10000, 0), 10, 2), 15) || CHAR(32) ||
    LPAD(TO_DECIMAL(GREATEST(NANO100_BETWEEN(A.LAST_ACTION_TIME, CURRENT_TIMESTAMP) / 10000, 0), 10, 2), 15) || CHAR(32) ||
    LPAD(A.CONNECTION_ID, 19) || CHAR(32) ||
    RPAD(A.STATEMENT_STATUS, 19) || CHAR(32) || LPAD(TO_DECIMAL(A.ALLOCATED_MEMORY_SIZE / 1024 / 1024 / 1024, 10, 2), 10)
  FROM
    ACTIVE_STATEMENTS A
  UNION ALL
  SELECT TOP 1 15990, ''                FROM CALLSTACKS UNION ALL
  SELECT TOP 1 16000, '***************' FROM CALLSTACKS UNION ALL
  SELECT TOP 1 16010, '* CALL STACKS *' FROM CALLSTACKS UNION ALL
  SELECT TOP 1 16020, '***************' FROM CALLSTACKS UNION ALL
  SELECT TOP 1 16030, ''                FROM CALLSTACKS UNION ALL
  SELECT TOP 1 16080, LPAD('THREAD_ID', 10) || CHAR(32) || RPAD('THREAD_TYPE', 29) || CHAR(32) || RPAD('THREAD_STATE', 35) || CHAR(32) || RPAD('LOCK_NAME', 29) || CHAR(32) || RPAD('CALL_STACK', 100) FROM CALLSTACKS UNION ALL
  SELECT TOP 1 16090, LPAD('=', 10, '=') || CHAR(32) || RPAD('=', 29, '=') || CHAR(32) || RPAD('=', 35, '=') || CHAR(32) || RPAD('=', 29, '=') || CHAR(32) || RPAD('=', 100, '=') FROM CALLSTACKS UNION ALL
  SELECT 16100 + ROW_NUMBER () OVER (ORDER BY TC.THREAD_ID, TC.FRAME_LEVEL) / 100, LPAD(MAP(TC.FRAME_LEVEL, 1, TO_VARCHAR(TC.THREAD_ID), ''), 10) || CHAR(32) ||
    RPAD(MAP(TC.FRAME_LEVEL, 1, TC.THREAD_TYPE, ''), 29) || CHAR(32) || RPAD(MAP(TC.FRAME_LEVEL, 1, TC.THREAD_STATE, ''), 35) || CHAR(32) ||
    RPAD(MAP(TC.FRAME_LEVEL, 1, TC.LOCK_WAIT_NAME, ''), 29) || CHAR(32) || MAP(INSTR(TC.FRAME_NAME, '('), 0, TC.FRAME_NAME, SUBSTR_BEFORE(TC.FRAME_NAME, '('))
  FROM
    CALLSTACKS TC
  UNION ALL
  SELECT TOP 1 19990, ''               FROM OOM_EVENTS UNION ALL
  SELECT TOP 1 20000, '**************' FROM OOM_EVENTS UNION ALL
  SELECT TOP 1 20010, '* OOM EVENTS *' FROM OOM_EVENTS UNION ALL
  SELECT TOP 1 20020, '**************' FROM OOM_EVENTS UNION ALL
  SELECT TOP 1 20030, ''               FROM OOM_EVENTS UNION ALL
  SELECT TOP 1 20080, RPAD('OOM_TIME', 19) || CHAR(32) || RPAD('HEAP_AREA', 50) || CHAR(32) || RPAD('REASON', 39) || CHAR(32) || LPAD('MEM_USED_GB', 12) FROM OOM_EVENTS UNION ALL
  SELECT TOP 1 20090, RPAD('=', 19, '=') || CHAR(32) || RPAD('=', 50, '=') || CHAR(32) || RPAD('=', 39, '=') || CHAR(32) || LPAD('=', 12, '=') FROM OOM_EVENTS UNION ALL
  SELECT 20100 + ROW_NUM, RPAD(TO_VARCHAR(TIME, 'YYYY/MM/DD HH24:MI:SS'), 20) || RPAD(HEAP_ALLOCATOR, 51) || RPAD(EVENT_REASON, 40) || LPAD(MEM_USED_GB, 12) FROM
    OOM_EVENTS
  WHERE
  ( MAX_RESULT_LINES = -1 OR ROW_NUM <= MAX_RESULT_LINES ) 
  UNION ALL
  SELECT TOP 1 20490, ''                             FROM ADMISSION_CONTROL_EVENTS UNION ALL
  SELECT TOP 1 20500, '****************************' FROM ADMISSION_CONTROL_EVENTS UNION ALL
  SELECT TOP 1 20510, '* ADMISSION CONTROL EVENTS *' FROM ADMISSION_CONTROL_EVENTS UNION ALL
  SELECT TOP 1 20520, '****************************' FROM ADMISSION_CONTROL_EVENTS UNION ALL
  SELECT TOP 1 20530, ''                             FROM ADMISSION_CONTROL_EVENTS UNION ALL
  SELECT TOP 1 20580, 'EVENT_TIME          HOST                 WAIT_TIME_S CPU_PCT MEM_PCT EVENT_REASON' FROM ADMISSION_CONTROL_EVENTS UNION ALL
  SELECT TOP 1 20590, '=================== ==================== =========== ======= ======= ==================================================' FROM ADMISSION_CONTROL_EVENTS UNION ALL
  SELECT 20600 + ROW_NUM, RPAD(TO_VARCHAR(EVENT_TIME, 'YYYY/MM/DD HH24:MI:SS'), 20) || RPAD(HOST, 20) || LPAD(TO_DECIMAL(QUEUE_WAIT_TIME / 1000000, 10, 2), 12) ||
    LPAD(CPU_USAGE_RATIO, 8) || LPAD(MEMORY_RATIO, 8) || CHAR(32) || EVENT_REASON FROM 
    ADMISSION_CONTROL_EVENTS
  WHERE
  ( MAX_RESULT_LINES = -1 OR ROW_NUM <= MAX_RESULT_LINES ) 
  UNION ALL
  SELECT TOP 1 20990, ''                     FROM PINNED_PLANS UNION ALL
  SELECT TOP 1 21000, '********************' FROM PINNED_PLANS UNION ALL
  SELECT TOP 1 21010, '* PINNED SQL PLANS *' FROM PINNED_PLANS UNION ALL
  SELECT TOP 1 21020, '********************' FROM PINNED_PLANS UNION ALL
  SELECT TOP 1 21030, ''                     FROM PINNED_PLANS UNION ALL
  SELECT TOP 1 21080, RPAD('PIN_TIME', 19) || CHAR(32) || RPAD('MODIFY_TIME', 19) || CHAR(32) || RPAD('HINT_STRING', 50) FROM PINNED_PLANS UNION ALL
  SELECT TOP 1 21090, RPAD('=', 19 , '=') || CHAR(32) || RPAD('=', 19, '=') || CHAR(32) || RPAD('=', 50, '=') FROM PINNED_PLANS UNION ALL
  SELECT 21100 + ROW_NUMBER() OVER (ORDER BY PIN_TIME DESC), RPAD(TO_VARCHAR(PIN_TIME, 'YYYY/MM/DD HH24:MI:SS'), 20) || RPAD(TO_VARCHAR(LAST_MODIFY_TIME, 'YYYY/MM/DD HH24:MI:SS'), 20) || HINT_STRING FROM
    PINNED_PLANS
  UNION ALL
  SELECT TOP 1 21990, ''                    FROM STMT_HINTS UNION ALL
  SELECT TOP 1 22000, '*******************' FROM STMT_HINTS UNION ALL
  SELECT TOP 1 22010, '* STATEMENT HINTS *' FROM STMT_HINTS UNION ALL
  SELECT TOP 1 22020, '*******************' FROM STMT_HINTS UNION ALL
  SELECT TOP 1 22030, ''                    FROM STMT_HINTS UNION ALL
  SELECT TOP 1 22080, RPAD('ENABLE_TIME', 19) || CHAR(32) || RPAD('ENABLED', 9) || CHAR(32) || RPAD('HINT_STRING', 50) FROM STMT_HINTS UNION ALL
  SELECT TOP 1 22090, RPAD('=', 19 , '=') || CHAR(32) || RPAD('=', 9, '=') || CHAR(32) || RPAD('=', 50, '=') FROM STMT_HINTS UNION ALL
  SELECT 22100 + ROW_NUMBER() OVER (ORDER BY LAST_ENABLE_TIME DESC), RPAD(TO_VARCHAR(LAST_ENABLE_TIME, 'YYYY/MM/DD HH24:MI:SS'), 20) || RPAD(IS_ENABLED, 10) || HINT_STRING FROM
    STMT_HINTS
  UNION ALL
  SELECT TOP 1 22490, ''                                      FROM DATA_STATS UNION ALL
  SELECT TOP 1 22500, '*************************************' FROM DATA_STATS UNION ALL
  SELECT TOP 1 22510, '* USER-DEFINED OPTIMIZER STATISTICS *' FROM DATA_STATS UNION ALL
  SELECT TOP 1 22520, '*************************************' FROM DATA_STATS UNION ALL
  SELECT TOP 1 22530, ''                                      FROM DATA_STATS UNION ALL
  SELECT TOP 1 22580, RPAD('SCHEMA_NAME', SCHEMA_LEN) || CHAR(32) || RPAD('OBJECT_NAME', OBJECT_LEN) || CHAR(32) || RPAD('COLUMN_NAMES', COLUMN_LEN) || CHAR(32) ||
    RPAD('TYPE', TYPE_LEN) || CHAR(32) || LPAD('COUNT', 12) || CHAR(32) || LPAD('NUM_DISTINCT', 12) || CHAR(32) || LPAD('NUM_NULLS', 10) || CHAR(32) ||
    RPAD('MIN_VALUE', MIN_VALUE_LEN) || CHAR(32) || RPAD('MAX_VALUE', MAX_VALUE_LEN) FROM DATA_STATS UNION ALL
  SELECT TOP 1 22590, RPAD('=', SCHEMA_LEN, '=') || CHAR(32) || RPAD('=', OBJECT_LEN, '=') || CHAR(32) || RPAD('=', COLUMN_LEN, '=') || CHAR(32) ||
    RPAD('=', TYPE_LEN, '=') || CHAR(32) || LPAD('=', 12, '=') || CHAR(32) || LPAD('=', 12, '=') || CHAR(32) || LPAD('=', 10, '=') || CHAR(32) ||
    RPAD('=', MIN_VALUE_LEN, '=') || CHAR(32) || RPAD('=', MAX_VALUE_LEN, '=') FROM DATA_STATS UNION ALL
  SELECT 22600 + ROW_NUMBER() OVER (ORDER BY DATA_SOURCE_SCHEMA_NAME, OBJECT_NAME, DATA_SOURCE_COLUMN_NAMES), 
    RPAD(DATA_SOURCE_SCHEMA_NAME, SCHEMA_LEN) || CHAR(32) || RPAD(OBJECT_NAME, OBJECT_LEN) || CHAR(32) || RPAD(DATA_SOURCE_COLUMN_NAMES, COLUMN_LEN) || CHAR(32) ||
    RPAD(DATA_STATISTICS_TYPE, TYPE_LEN) || CHAR(32) || LPAD(COUNT, 12) || CHAR(32) || LPAD(DISTINCT_COUNT, 12) || CHAR(32) || LPAD(NULL_COUNT, 10) || CHAR(32) ||
    RPAD(IFNULL(MINVALUE_STRING, ''), MIN_VALUE_LEN) || CHAR(32) || RPAD(IFNULL(MAXVALUE_STRING, ''), MAX_VALUE_LEN) FROM DATA_STATS
  UNION ALL
  SELECT TOP 1 22990, ''                  FROM TRACE_ENTRIES UNION ALL
  SELECT TOP 1 23000, '*****************' FROM TRACE_ENTRIES UNION ALL
  SELECT TOP 1 23010, '* TRACE ENTRIES *' FROM TRACE_ENTRIES UNION ALL
  SELECT TOP 1 23020, '*****************' FROM TRACE_ENTRIES UNION ALL
  SELECT TOP 1 23030, ''                  FROM TRACE_ENTRIES UNION ALL
  SELECT TOP 1 23080, 'TIMESTAMP           COMPONENT        TRACE_TEXT' FROM TRACE_ENTRIES UNION ALL
  SELECT TOP 1 23090, '=================== ================ ============================================================================================================' FROM TRACE_ENTRIES UNION ALL
  SELECT 23100 + ROW_NUMBER() OVER (ORDER BY TIMESTAMP DESC), TO_VARCHAR(TIMESTAMP, 'YYYY/MM/DD HH24:MI:SS') || CHAR(32) || RPAD(COMPONENT, 16) || CHAR(32) || TRACE_TEXT
  FROM
    TRACE_ENTRIES
  WHERE
  ( MAX_RESULT_LINES = -1 OR LINE_NO <= MAX_RESULT_LINES )
  UNION ALL
  SELECT 23990, ''                       FROM DUMMY UNION ALL
  SELECT 24000, '**********************' FROM DUMMY UNION ALL
  SELECT 24010, '* PARAMETER SETTINGS *' FROM DUMMY UNION ALL
  SELECT 24020, '**********************' FROM DUMMY UNION ALL
  SELECT 24030, ''                       FROM DUMMY UNION ALL
  SELECT 24080, 'FILE_NAME                SECTION                       PARAMETER_NAME                                              VALUE' FROM DUMMY UNION ALL
  SELECT 24090, '======================== ============================= =========================================================== ===========================================================' FROM DUMMY UNION ALL
  SELECT 24100 + ROW_NUMBER () OVER (ORDER BY FILE_NAME, SECTION, KEY), RPAD(FILE_NAME, 25) || RPAD(SECTION, 30) || RPAD(KEY, 60) || VALUE FROM
    PARAMETERS
  WHERE
    KEY IN
    ( 'default_statement_concurrency_limit',
      'esx_level',
      'hex_enabled',
      'max_concurrency',
      'max_concurrency_hint',
      'num_cores',
      'singleindex_consider_for_compressed_columns',
      'statement_memory_limit'
    )
) L
ORDER BY
  LINE_NO
WITH HINT (IGNORE_PLAN_CACHE)