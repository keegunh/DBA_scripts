SELECT
/* 

[NAME]

- HANA_IO_Commits_1.00.70+

[DESCRIPTION]

- Overview of COMMIT information

[SOURCE]

- SAP Note 1969700

[DETAILS AND RESTRICTIONS]

- COMMIT information not availabe before SAP HANA SPS 07
- RESET can be performed via:

  ALTER SYSTEM RESET MONITORING VIEW M_LOG_PARTITIONS_RESET

- Can be used for monitoring remote system replication sites, see SAP Note 1999880 
  ("Is it possible to monitor remote system replication sites on the primary system") for details.

[VALID FOR]

- Revisions:              >= 1.00.70
- Statistics server type: all

[SQL COMMAND VERSION]

- 2016/01/31:  1.0 (initial version)

[INVOLVED TABLES]

- M_LOG_PARTITIONS
- M_LOG_PARTITIONS_RESET

[INPUT PARAMETERS]

- HOST

  Host name

  'saphana01'     --> Specic host saphana01
  'saphana%'      --> All hosts starting with saphana
  '%'             --> All hosts

- PORT

  Port number

  '30007'         --> Port 30007
  '%03'           --> All ports ending with '03'
  '%'             --> No restriction to ports

- PATH

  Path on disk

  '/hdb/ERP/backup/log/' --> Path /hdb/HAL/backup/log/
  '/usr/sap/ERP%'        --> Paths starting with '/usr/sap/ERP'
  '%'                    --> No restriction of path

- DATA_SOURCE

  Source of analysis data

  'CURRENT'       --> Data from memory information (M_ tables)
  'HISTORY'       --> Data from persisted history information (HOST_ tables)
  '%'             --> All data sources

- AGGREGATE_BY

  Aggregation criteria (possible values can be found in comment)

  'HOST, PORT'    --> Aggregation by host and port
  'NONE'          --> No aggregation

[OUTPUT PARAMETERS]

- HOST:          Host name
- PORT:          Port
- PATH:          Disk path
- LOG_SIZE_MB:   Total log size (MB)
- AVG_BUFF_KB:   Average I/O buffer size (KB)
- COMMITS:       Number of COMMIT operations
- IO_TIME_S:     Total log I/O time (s)
- AVG_COMMIT_MS: Average COMMIT time (ms)

[EXAMPLE OUTPUT]

----------------------------------------------------------------------------------------------------------------------------------
|HOST      |PORT |SERVICE    |PATH                                 |LOG_SIZE_MB|AVG_BUFF_KB |COMMITS     |IO_TIME_S|AVG_COMMIT_MS|
----------------------------------------------------------------------------------------------------------------------------------
|hananode01|30103|indexserver|/sapmntext/log/SR3/mnt00001/hdb00004/|    4395.67|        4.85|      931496|     1797|         1.92|
|hananode01|30107|xsengine   |/sapmntext/log/SR3/mnt00001/hdb00003/|      33.41|        4.00|        8417|       60|         7.16|
|hananode02|30103|indexserver|/sapmntext/log/SR3/mnt00004/hdb00007/|     946.80|       68.80|       13627|      221|        16.18|
|hananode03|30103|indexserver|/sapmntext/log/SR3/mnt00003/hdb00006/|    2394.52|      104.29|       21987|      205|         9.33|
|hananode04|30103|indexserver|/sapmntext/log/SR3/mnt00002/hdb00005/|    2995.78|      182.89|       14661|      124|         8.46|
----------------------------------------------------------------------------------------------------------------------------------

*/

  HOST,
  PORT,
  PATH,
  LPAD(TO_DECIMAL(LOG_SIZE_KB / 1024, 10, 2), 11) LOG_SIZE_MB,
  LPAD(TO_DECIMAL(MAP(PREP_BUFFERS, 0, 0, LOG_SIZE_KB / PREP_BUFFERS), 10, 2), 12) AVG_BUFF_KB,
  LPAD(COMMITS, 12) COMMITS,
  LPAD(TO_DECIMAL(ROUND(IO_TIME_MS / 1000), 10, 0), 9) IO_TIME_S,
  LPAD(TO_DECIMAL(MAP(COMMITS, 0, 0, IO_TIME_MS / COMMITS), 10, 2), 13) AVG_COMMIT_MS
FROM
( SELECT
    CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'HOST')     != 0 THEN L.HOST          ELSE MAP(BI.HOST, '%', 'any', BI.HOST)                 END HOST,
    CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'PORT')     != 0 THEN TO_VARCHAR(L.PORT) ELSE MAP(BI.PORT, '%', 'any', BI.PORT)                 END PORT,
    CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'PATH')     != 0 THEN L.PATH          ELSE MAP(BI.PATH, '%', 'any', BI.PATH)                 END PATH,
    SUM(SUM_BUFFER_IO_SIZE) / 1024 LOG_SIZE_KB,
    SUM(PREPARED_BUFFERS) PREP_BUFFERS,
    SUM(COMMIT_COUNT) COMMITS,
    SUM(SUM_COMMIT_IO_LATENCY) / 1000 IO_TIME_MS
  FROM
  ( SELECT            /* Modification section */
      '%' HOST,
      '%' PORT,
      '%' PATH,
      'CURRENT' DATA_SOURCE,      /* CURRENT, RESET */
      'NONE' AGGREGATE_BY         /* HOST, PORT, PATH or comma separated combinations, NONE for no aggregation */
    FROM
      DUMMY
  ) BI,
  ( SELECT
      'CURRENT' DATA_SOURCE,
      HOST,
      PORT,
      PATH,
      SUM_BUFFER_IO_SIZE,
      PREPARED_BUFFERS,
      COMMIT_COUNT,
      SUM_COMMIT_IO_LATENCY
    FROM
      M_LOG_PARTITIONS
    UNION ALL
    SELECT
      'RESET' DATA_SOURCE,
      HOST,
      PORT,
      PATH,
      SUM_BUFFER_IO_SIZE,
      PREPARED_BUFFERS,
      COMMIT_COUNT,
      SUM_COMMIT_IO_LATENCY
    FROM
      M_LOG_PARTITIONS_RESET
  ) L
  WHERE
    L.HOST LIKE BI.HOST AND
    TO_VARCHAR(L.PORT) LIKE BI.PORT AND
    L.PATH LIKE BI.PATH AND
    L.DATA_SOURCE = BI.DATA_SOURCE
  GROUP BY
    CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'HOST')     != 0 THEN L.HOST          ELSE MAP(BI.HOST, '%', 'any', BI.HOST)                 END,
    CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'PORT')     != 0 THEN TO_VARCHAR(L.PORT) ELSE MAP(BI.PORT, '%', 'any', BI.PORT)                 END,
    CASE WHEN BI.AGGREGATE_BY = 'NONE' OR INSTR(BI.AGGREGATE_BY, 'PATH')     != 0 THEN L.PATH          ELSE MAP(BI.PATH, '%', 'any', BI.PATH)                 END
)
ORDER BY
  HOST,
  PORT,
  PATH