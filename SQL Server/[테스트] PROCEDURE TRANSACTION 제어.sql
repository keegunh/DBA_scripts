CREATE TABLE ZZ_TEST(C1 NVARCHAR(1))
SELECT * FROM ZZ_TEST
GO
--C1을 INSERT 후 C1을 C2로 업데이트 하는 프로시저
CREATE OR ALTER PROCEDURE [DBO].[ZZ_TEST_PROC](  
     @C1  NVARCHAR(1),
	 @C2  NVARCHAR(2)
)  
AS  
BEGIN  
    SET NOCOUNT ON;  
    SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;  
  
    BEGIN TRY
		BEGIN TRAN INNER_PROC------------------------ TRANSACTION 시작
        INSERT INTO DBO.ZZ_TEST VALUES(@C1)
		UPDATE DBO.ZZ_TEST SET C1 = @C2 WHERE C1 = @C1;
		COMMIT TRAN INNER_PROC------------------- TRANSACTION 성공 : 커밋
		PRINT 'SUCCESS_INNER'
    END TRY  
  
    BEGIN CATCH
		ROLLBACK TRAN INNER_PROC----------------- TRANSACTION 실패 : 롤백
		PRINT 'ERROR_INNER'
    END CATCH  
END  
GO


--TEST 1 : BEGIN TRAN, COMMIT TRAN, ROLLBACK TRAN 모두 주석 처리 후 아래와 같이 EXECUTE
TRUNCATE TABLE ZZ_TEST;
EXEC ZZ_TEST_PROC 'A', 'B'
SELECT * FROM ZZ_TEST;

--결과
--C1
--B
--설명 : 'A'와 'B'가 길이가 같기 때문에 업데이트 된다. INSERT와 UPDATE 모두 성공



--TEST 2 : BEGIN TRAN, COMMIT TRAN, ROLLBACK TRAN 모두 주석 처리 후 아래와 같이 EXECUTE
TRUNCATE TABLE ZZ_TEST;
EXEC ZZ_TEST_PROC 'A', 'BB'
SELECT * FROM ZZ_TEST;

--결과
--C1
--A
--설명 : 'A'와 'BB'가 길이가 다르기 때문에 업데이트는 실패하지만 INSERT는 성공한다. BEGIN TRAN으로 묶지 않았기 때문에 INSERT는 성공, UPDATE는 실패.


--TEST 3 : BEGIN TRAN, COMMIT TRAN, ROLLBACK TRAN 모두 주석 해제 후 아래와 같이 EXECUTE
TRUNCATE TABLE ZZ_TEST;
EXEC ZZ_TEST_PROC 'A', 'BB'
SELECT * FROM ZZ_TEST;

--결과
--C1
--B
--설명 : 'A'와 'BB'가 길이가 다르기 때문에 업데이트 실패. BEGIN TRAN으로 묶었기 때문에 INSERT와 UPDATE 모두 실패


/*  요약: 
	INSERT 와 UPDATE를 BEGIN TRAN - COMMIT TRAN 으로 묶지 않으면 프로시저 실행 중 오류 발생 시 데이터가 비일관적인 상태에 놓이게 되므로
    연관된 TRANSACTION은 모두 묶어야 한다.  
	BEGIN TRY 시작 부분에 BEGIN TRAN 적기 
	BEGIN TRY 끝에 COMMIT TRAN 적기
	BEGIN CATCH 시작 부분에 ROLLBACK TRAN 적기
	주의 : BEGIN TRAN을 BEGIN TRY 이전에 적으면 TRY 내에서 에러 발생 시 트랜잭션 전체가 아니라 마지막 문장 하나만 ROLLBACK 처리함.
*/




GO
-- 만약 PROCEDURE 내에 TRANSACTION 제어를 하는 PROCEDURE 가 하나 더 있다면?
CREATE OR ALTER PROCEDURE [DBO].[ZZ_TEST_PROC2](  
     @C1  NVARCHAR(1),
	 @C2  NVARCHAR(2),
	 @V1  NVARCHAR(1),
	 @V2  NVARCHAR(2)
)  
AS  
BEGIN  
    SET NOCOUNT ON;  
    SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;  
  
    BEGIN TRY
		BEGIN TRAN  OUTER_PROC------------------------ TRANSACTION 시작
        INSERT INTO DBO.ZZ_TEST VALUES(@C1)

		EXEC ZZ_TEST_PROC @V1, @V2

		UPDATE DBO.ZZ_TEST SET C1 = @C2 WHERE C1 = @C1
		COMMIT TRAN  OUTER_PROC------------------- TRANSACTION 성공 : 커밋
		PRINT 'SUCCESS_OUTER'
    END TRY  
  
    BEGIN CATCH
		ROLLBACK TRAN  OUTER_PROC----------------- TRANSACTION 실패 : 롤백
		PRINT 'ERROR_OUTER'
    END CATCH  
END  
GO
-- TEST1 : 외부, 내부 PROCEDURE에서 BEGIN TRAN, COMMIT TRAN, ROLLBACK TRAN 사용하는 상태에서 아래와 같이 EXECUTE. 외부 PROCEDURE 성공, 내부 PROCEDURE이 성공, TRANSACTION 명을 지정하지 않은 경우.
TRUNCATE TABLE ZZ_TEST;
EXEC ZZ_TEST_PROC2 'A', 'B', 'C', 'D'
SELECT * FROM ZZ_TEST;

--결과
--C1
--B
--D
--설명 : 오류 없이 진행된다면 내부 PROCEDURE, 외부 PROCEDURE 모두 성공적으로 반영.


-- TEST2 : 외부, 내부 PROCEDURE에서 BEGIN TRAN, COMMIT TRAN, ROLLBACK TRAN 사용하는 상태에서 아래와 같이 EXECUTE. 외부 PROCEDURE 실패, 내부 PROCEDURE이 성공, TRANSACTION 명을 지정하지 않은 경우.
TRUNCATE TABLE ZZ_TEST;
EXEC ZZ_TEST_PROC2 'A', 'BB', 'C', 'D'
SELECT * FROM ZZ_TEST;

--결과
--C1
--(없음)
--설명 : 외부 프로시저 실패 시 내부 프로시저가 성공이라 하더라도 TRANSACTION은 실패


-- TEST3 : 외부, 내부 PROCEDURE에서 BEGIN TRAN, COMMIT TRAN, ROLLBACK TRAN 사용하는 상태에서 아래와 같이 EXECUTE. 외부 PROCEDURE 성공, 내부 PROCEDURE이 실패, TRANSACTION 명을 지정하지 않은 경우.
TRUNCATE TABLE ZZ_TEST;
EXEC ZZ_TEST_PROC2 'A', 'B', 'C', 'DD'
SELECT * FROM ZZ_TEST;

--결과
--C1
--(없음)

--메시지
--ERROR_INNER
--메시지 3903, 수준 16, 상태 1, 프로시저 ZZ_TEST_PROC2, 줄 25 [배치 시작 줄 129]
--ROLLBACK TRANSACTION 요청에 해당하는 BEGIN TRANSACTION이 없습니다.
--ERROR_OUTER

--설명 : 외부 PROCEDURE 오류 발생 시 내부 PROCEDURE의 CATCH 문을 타서 ROLLBACK 진행한 후 외부 TRANSACTION의 CATCH문에서 ROLLBACK을 또 수행하기 때문에 이중 오류 메시지 발생. 
--이럴 때는 내부 프로시저와 외부 프로시저에서 TRANSACTION 명령어(BEGIN TRAN, COMMIT TRAN, ROLLBACK TRAN) 수행 시 TRANSACTION 이름까지 설정해주면
--해당 TRANSACTION 이름에 맞는 조치만 진행하게 된다.




-- TEST4 : 외부, 내부 PROCEDURE에서 BEGIN TRAN, COMMIT TRAN, ROLLBACK TRAN 사용하는 상태에서 아래와 같이 EXECUTE. 외부 PROCEDURE 성공, 내부 PROCEDURE이 실패, TRANSACTION 명을 지정한 경우.
TRUNCATE TABLE ZZ_TEST;
EXEC ZZ_TEST_PROC2 'A', 'B', 'C', 'DD'
SELECT * FROM ZZ_TEST;

--결과
--C1
--(없음)

--메시지
--ERROR_OUTER

--설명 : 외부 PROCEDURE 오류 발생 시 내부 PROCEDURE의 CATCH 문을 타서 ROLLBACK 진행한 후 외부 TRANSACTION의 CATCH문에서 ROLLBACK을 또 수행하기 때문에 이중 오류 메시지 발생. 
--이럴 때는 내부 프로시저와 외부 프로시저에서 TRANSACTION 명령어(BEGIN TRAN, COMMIT TRAN, ROLLBACK TRAN) 수행 시 TRANSACTION 이름까지 설정해주면
--해당 TRANSACTION 이름에 맞는 조치만 진행하게 된다.


/* 요약2
	BEGIN TRAN, COMMIT TRAN, ROLLBACK TRAN은 TRANSACTION이 중첩됐을 때를 위해 TRANSACTION명을 지정해주는 게 좋다.
	TRANSACTION 명명법은 어떻게 하지?
	TRANSACTION이 중첩됐을 때 ROLLBACK은 
*/

BEGIN TRAN






TRUNCATE TABLE ZZ_TEST;
EXEC ZZ_TEST_PROC3 'A', 'B', 'C', 'D'
SELECT * FROM ZZ_TEST;



TRUNCATE TABLE ZZ_TEST;
EXEC ZZ_TEST_PROC3 'A', 'BB', 'C', 'D'
SELECT * FROM ZZ_TEST;


TRUNCATE TABLE ZZ_TEST;
EXEC ZZ_TEST_PROC3 'A', 'B', 'C', 'DD'
SELECT * FROM ZZ_TEST;


TRUNCATE TABLE ZZ_TEST;
EXEC ZZ_TEST_PROC3 'A', 'BB', 'C', 'DD'
SELECT * FROM ZZ_TEST;


--호출 경로에서 트랜잭션 이름이 겹치면 트랜잭션 종료 처리할 때 오류가 발생함. 트랜잭션명을 안 써도 마찬가지.
--바깥쪽 트랜잭션이 롤백되면 안쪽 트랜잭션이 커밋을 했더라도 롤백됨
--트랜잭션명 : 프로시저명_TXN01
GO
CREATE OR ALTER PROCEDURE [DBO].[ZZ_TEST_PROC3](  
     @C1  NVARCHAR(1),
	 @C2  NVARCHAR(2),
	 @V1  NVARCHAR(1),
	 @V2  NVARCHAR(2)
)  
AS  
BEGIN  
    SET NOCOUNT ON;  
    SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;  
  
    BEGIN TRY
		BEGIN TRAN ZZ_TEST_PROC3_T1--OUTER_PROC------------------------ TRANSACTION 시작
        INSERT INTO DBO.ZZ_TEST VALUES(@C1)

print 'A'

		BEGIN TRY
			BEGIN TRAN ZZ_TEST_PROC3_T2--INNER_PROC------------------------ TRANSACTION 시작
			INSERT INTO DBO.ZZ_TEST VALUES(@V1)
print 'B'
			UPDATE DBO.ZZ_TEST SET C1 = @V2 WHERE C1 = @V1;
print 'C'
			COMMIT TRAN ZZ_TEST_PROC3_T2--INNER_PROC------------------- TRANSACTION 성공 : 커밋
			PRINT 'SUCCESS_INNER'
		END TRY  
		BEGIN CATCH
print 'hello'
			ROLLBACK TRAN ZZ_TEST_PROC3_T2--INNER_PROC----------------- TRANSACTION 실패 : 롤백
			PRINT 'ERROR_INNER'
		END CATCH  

print 'D'

		UPDATE DBO.ZZ_TEST SET C1 = @C2 WHERE C1 = @C1
print 'E'
		COMMIT TRAN  ZZ_TEST_PROC3_T1--OUTER_PROC------------------- TRANSACTION 성공 : 커밋
		PRINT 'SUCCESS_OUTER'
    END TRY  
  
    BEGIN CATCH
print 'F'
		ROLLBACK TRAN  ZZ_TEST_PROC3_T1--OUTER_PROC----------------- TRANSACTION 실패 : 롤백
		PRINT 'ERROR_OUTER'
    END CATCH  
print 'G'
END  

GO
CREATE OR ALTER PROCEDURE [DBO].[ZZ_TEST_PROC3](  
     @C1  NVARCHAR(1),
	 @C2  NVARCHAR(2),
	 @V1  NVARCHAR(1),
	 @V2  NVARCHAR(2)
)  
AS  
BEGIN  
    SET NOCOUNT ON;  
    SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;  
  
    BEGIN TRY
		BEGIN TRAN T1--OUTER_PROC------------------------ TRANSACTION 시작
        INSERT INTO DBO.ZZ_TEST VALUES(@C1)

		COMMIT TRAN  T1--OUTER_PROC------------------- TRANSACTION 성공 : 커밋
		ROLLBACK TRAN  T1--OUTER_PROC----------------- TRANSACTION 실패 : 롤백
    END TRY  
  
    BEGIN CATCH
		PRINT 'ERROR_OUTER'
    END CATCH  
END  
GO

TRUNCATE TABLE ZZ_TEST;
EXEC ZZ_TEST_PROC3 'A', 'B', 'C', 'D'
SELECT * FROM ZZ_TEST;













GO
CREATE OR ALTER PROCEDURE [DBO].[NBMCMP_SMPL2](  
     @C1  NVARCHAR(1),
	 @C2  NVARCHAR(2),
	 @V1  NVARCHAR(1),
	 @V2  NVARCHAR(2)
)  
AS  
BEGIN  
    SET NOCOUNT ON;  
    SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;  
  
    ------- 외부 프로시저 시작
    BEGIN TRY
		BEGIN TRAN NBMCMP_SMPL2_TXN01
        INSERT INTO NBM_USER.ZZ_TEST VALUES(@C1)

		------- 내부 프로시저 시작
		BEGIN TRY
			BEGIN TRAN NBMCMP_SMPL2_TXN02
			INSERT INTO NBM_USER.ZZ_TEST VALUES(@V1)
			UPDATE NBM_USER.ZZ_TEST SET C1 = @V2 WHERE C1 = @V1  -- 오류 발생1
			COMMIT TRAN NBMCMP_SMPL2_TXN02
			PRINT 'SUCCESS_INNER'
		END TRY  
		BEGIN CATCH
			ROLLBACK TRAN NBMCMP_SMPL2_TXN02
			PRINT 'ERROR_INNER'
		END CATCH  
		------- 내부 프로시저 끝

		UPDATE NBM_USER.ZZ_TEST SET C1 = @C2 WHERE C1 = @C1  -- 오류 발생2
		COMMIT TRAN  NBMCMP_SMPL2_TXN01
		PRINT 'SUCCESS_OUTER'
    END TRY  
  
    BEGIN CATCH
		ROLLBACK TRAN  NBMCMP_SMPL2_TXN01
		PRINT 'ERROR_OUTER'
    END CATCH  
	------- 외부 프로시저 끝
END  
GO















--https://www.mssqltips.com/sqlservertip/4018/sql-server-transaction-count-after-execute-indicates-a-mismatching-number-of-begin-and-commit-statements/
GO
CREATE OR ALTER PROCEDURE [DBO].[ZZ_OUTER](  
     @C1  NVARCHAR(1),
	 @C2  NVARCHAR(2),
	 @V1  NVARCHAR(1),
	 @V2  NVARCHAR(2)
)  
AS  
BEGIN  
    SET NOCOUNT ON;  
    SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;  
  
    ------- 외부 프로시저 시작
	PRINT 'OUTER: BEGIN_TRY'
    BEGIN TRY
		BEGIN TRAN  TXN01

		DROP TABLE IF EXISTS #TEMP;
		SELECT 9 AS C1 INTO #TEMP;
		INSERT INTO ZZ_TEST SELECT C11 FROM #TEMP; -- FATAL ERROR. C11은 #TEMP 테이블에 없는 컬럼임. 
		                                           -- 해당 오류 발생 시 CATCH문으로 빠지지 않고 트랜잭션이 해당 지점에서 정지됨. 
		                                           -- 수행중이던 트랜잭션은 별도로 ROLLBACK이나 COMMIT 해줘야 함.

        INSERT INTO ZZ_TEST VALUES(@C1)

		------- 내부 프로시저 시작
		EXEC ZZ_INNER @V1, @V2
		------- 내부 프로시저 끝

		UPDATE ZZ_TEST SET C1 = @C2 WHERE C1 = @C1  -- 오류 발생2
		COMMIT TRAN  TXN01
		
	PRINT 'OUTER: END_TRY'  
    END TRY  
    BEGIN CATCH
	PRINT 'OUTER: BEGIN_CATCH'  
		PRINT 'OUTER ERROR MSG : ' + ERROR_MESSAGE()
		ROLLBACK TRAN  TXN01
		PRINT 'OUTER ERROR MSG : ' + ERROR_MESSAGE()
	PRINT 'OUTER: END_CATCH'  
    END CATCH  
	------- 외부 프로시저 끝
END  
GO

CREATE OR ALTER PROCEDURE [DBO].[ZZ_INNER](  
     @V1  NVARCHAR(1),
	 @V2  NVARCHAR(2)
)  
AS  
BEGIN  
    SET NOCOUNT ON;  
    SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;  

	--INSERT INTO ZZ_TEST VALUES(@V1)
	--UPDATE ZZ_TEST SET C1 = @V2 WHERE C1 = @V1  -- 오류 발생1
  
		--------- 내부 프로시저 시작
		BEGIN TRY
			PRINT 'INNER : BEGIN_TRY'
			BEGIN TRANSACTION  TXN02
			INSERT INTO ZZ_TEST VALUES(@V1)
			UPDATE ZZ_TEST SET C1 = @V2 WHERE C1 = @V1  -- 오류 발생1

			COMMIT TRANSACTION  TXN02
			PRINT 'INNER : END_TRY'
		END TRY  

		BEGIN CATCH
			PRINT 'INNER : BEGIN_CATCH'
			PRINT 'INNER ERROR MSG : ' + ERROR_MESSAGE()
			ROLLBACK TRANSACTION  TXN02
			PRINT 'INNER ERROR MSG : ' + ERROR_MESSAGE()
			PRINT 'INNER : END_CATCH'
		END CATCH  
		--------- 내부 프로시저 끝
END  
GO




--TEST
TRUNCATE TABLE ZZ_TEST
EXEC ZZ_OUTER 'A', 'B', 'C', 'D'
SELECT * FROM ZZ_TEST

DROP TABLE IF EXISTS ZZ_TEST
DROP TABLE IF EXISTS NBM_USER.ZZ_TEST
DROP PROCEDURE IF EXISTS ZZ_TEST_PROC
DROP PROCEDURE IF EXISTS ZZ_TEST_PROC2
DROP PROCEDURE IF EXISTS ZZ_TEST_PROC3
DROP PROCEDURE IF EXISTS NBMCMP_SMPL3
DROP PROCEDURE IF EXISTS ZZ_OUTER
DROP PROCEDURE IF EXISTS ZZ_INNER



BEGIN TRAN TXN01
BEGIN TRAN TXN02
ROLLBACK TRAN TXN02
ROLLBACK TRAN TXN01