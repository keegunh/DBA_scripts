/*
* :OWNER, :TABLE_NAME 바인드 변수 사용
*/
SELECT :OWNER AS OWNER, :TABLE_NAME AS TABLE_NAME FROM DUAL;

EXEC DBMS_METADATA.SET_TRANSFORM_PARAM(DBMS_METADATA.SESSION_TRANSFORM,'STORAGE',FALSE) ;
EXEC DBMS_METADATA.SET_TRANSFORM_PARAM(DBMS_METADATA.SESSION_TRANSFORM,'SEGMENT_ATTRIBUTES',FALSE) ;
EXEC DBMS_METADATA.SET_TRANSFORM_PARAM(DBMS_METADATA.SESSION_TRANSFORM,'TABLESPACE',FALSE) ;
EXEC DBMS_METADATA.SET_TRANSFORM_PARAM(DBMS_METADATA.SESSION_TRANSFORM,'SQLTERMINATOR',FALSE) ;
EXEC DBMS_METADATA.SET_TRANSFORM_PARAM(DBMS_METADATA.SESSION_TRANSFORM,'PRETTY',TRUE) ;
EXEC DBMS_METADATA.SET_TRANSFORM_PARAM(DBMS_METADATA.SESSION_TRANSFORM,'BODY',FALSE) ;
EXEC DBMS_METADATA.SET_TRANSFORM_PARAM(DBMS_METADATA.SESSION_TRANSFORM,'CONSTRAINTS',FALSE) ;
EXEC DBMS_METADATA.SET_TRANSFORM_PARAM(DBMS_METADATA.SESSION_TRANSFORM,'PARTITIONING',TRUE) ;

SELECT A.OWNER
     , A.TABLE_NAME AS OBJECT_NAME
     , 'TABLE' AS OBJECT_TYPE
     , NVL(A.TABLESPACE_NAME,B.DEF_TABLESPACE_NAME) TABLESPACE_NAME
     , DBMS_METADATA.GET_DDL('TABLE', A.TABLE_NAME, A.OWNER) || CHR(13) || CHR(10) || ' TABLESPACE ' || NVL(A.TABLESPACE_NAME,B.DEF_TABLESPACE_NAME) || ';' DDL
  FROM DBA_TABLES A
     , DBA_PART_TABLES B
 WHERE A.OWNER = B.OWNER (+)
   AND A.TABLE_NAME = B.TABLE_NAME (+)
   AND A.OWNER = :OWNER
   AND A.TABLE_NAME = :TABLE_NAME
 UNION ALL
SELECT A.OWNER
     , A.INDEX_NAME
     , 'INDEX' AS OBJECT_TYPE
     , NVL(A.TABLESPACE_NAME, B.DEF_TABLESPACE_NAME) TABLESPACE_NAME
     , TO_CLOB('CREATE ' || DECODE(A.UNIQUENESS, 'UNIQUE', 'UNIQUE', NULL) || ' INDEX "' || A.OWNER || '"."' || A.INDEX_NAME || '" ON "' || A.OWNER || '"."' || A.TABLE_NAME || '" ("' || 
       LISTAGG(C.COLUMN_NAME, '", "') WITHIN GROUP(ORDER BY C.COLUMN_POSITION) || '") ' || CHR(13) || CHR(10) || 
       DECODE(A.PARTITIONED, 'YES', 'LOCAL', NULL) || ' TABLESPACE ' || NVL(A.TABLESPACE_NAME, B.DEF_TABLESPACE_NAME) ||' PARALLEL 16 NOLOGGING;' || CHR(13) || CHR(10) || 
       'ALTER INDEX ' || A.OWNER || '.' || A.INDEX_NAME || ' NOPARALLEL LOGGING;') AS DDL
  FROM DBA_INDEXES A
     , DBA_PART_INDEXES B
     , DBA_IND_COLUMNS C 
 WHERE A.OWNER = B.OWNER (+)
   AND A.INDEX_NAME = B.INDEX_NAME (+)
   AND A.OWNER = C.INDEX_OWNER 
   AND A.INDEX_NAME = C.INDEX_NAME
   AND A.OWNER = :OWNER
   AND A.TABLE_NAME = :TABLE_NAME
 GROUP BY A.OWNER, A.INDEX_NAME, A.TABLESPACE_NAME, B.DEF_TABLESPACE_NAME, A.UNIQUENESS, A.TABLE_NAME, A.PARTITIONED
--SELECT A.OWNER
--     , A.INDEX_NAME
--     , 'INDEX' AS OBJECT_TYPE
--     , NVL(A.TABLESPACE_NAME, B.DEF_TABLESPACE_NAME) TABLESPACE_NAME
--     , CASE WHEN A.PARTITIONED = 'NO' THEN DBMS_METADATA.GET_DDL('INDEX', A.INDEX_NAME, A.OWNER) || ' TABLESPACE ' || NVL(A.TABLESPACE_NAME, B.DEF_TABLESPACE_NAME) 
--       ELSE SUBSTR(DBMS_METADATA.GET_DDL('INDEX', A.INDEX_NAME, A.OWNER), 1, INSTR(DBMS_METADATA.GET_DDL('INDEX', A.INDEX_NAME, A.OWNER), 'LOCAL' ) + 5) || ' TABLESPACE ' || NVL(A.TABLESPACE_NAME, B.DEF_TABLESPACE_NAME)
--       END || ' PARALLEL 16 NOLOGGING;' || CHR(13) || CHR(10) || ' ALTER INDEX ' || A.OWNER || '.' || A.INDEX_NAME || ' NOPARALLEL LOGGING;' AS DDL
--  FROM DBA_INDEXES A
--     , DBA_PART_INDEXES B
-- WHERE A.OWNER = B.OWNER (+)
--   AND A.INDEX_NAME = B.INDEX_NAME (+)
--   AND A.OWNER = :OWNER
--   AND A.TABLE_NAME = :TABLE_NAME
 UNION ALL   
SELECT A.OWNER
     , A.CONSTRAINT_NAME AS OBJECT_NAME
     , 'CONSTRAINT' AS OBJECT_TYPE
     , NULL AS TABLESPACE_NAME
     , TO_CLOB('ALTER TABLE "' || A.OWNER || '"."' || A.TABLE_NAME || '" ADD CONSTRAINT "' || A.CONSTRAINT_NAME || 
       '" PRIMARY KEY ("' || LISTAGG(B.COLUMN_NAME, '", "') WITHIN GROUP (ORDER BY B.POSITION) || '")' || DECODE(C.INDEX_NAME, NULL, NULL, ' USING INDEX "' || C.INDEX_NAME || '"' ) || ';') AS DDL
  FROM DBA_CONSTRAINTS A
     , DBA_CONS_COLUMNS B
     , DBA_INDEXES C 
 WHERE A.OWNER = B.OWNER
   AND A.CONSTRAINT_NAME = B.CONSTRAINT_NAME
   AND A.OWNER = C.OWNER (+)
   AND A.CONSTRAINT_NAME = C.INDEX_NAME (+)
   AND A.CONSTRAINT_TYPE = 'P'
   AND A.OWNER = V_OWNER
   AND A.TABLE_NAME = V_TABLE_NAME
 GROUP BY A.OWNER, A.TABLE_NAME, A.CONSTRAINT_NAME, C.INDEX_NAME
--SELECT A.OWNER
--     , A.CONSTRAINT_NAME AS OBJECT_NAME
--     , 'CONSTRAINT' AS OBJECT_TYPE
--     , NULL AS TABLESPACE_NAME
--     , REPLACE(DBMS_METADATA.GET_DDL('CONSTRAINT', A.CONSTRAINT_NAME, A.OWNER), '  ENABLE', '') || ';' || CHR(13) || CHR(10) AS DDL
--  FROM DBA_CONSTRAINTS A
-- WHERE A.CONSTRAINT_TYPE = 'P'
--   AND A.OWNER = V_OWNER
--   AND A.TABLE_NAME = V_TABLE_NAME
 UNION ALL
SELECT A.OWNER
     , A.TABLE_NAME AS OBJECT_NAME
     , 'TABLE_COMMENT' AS OBJECT_TYPE
     , NULL AS TABLESPACE_NAME
     , TO_CLOB('COMMENT ON TABLE ' || A.OWNER || '.' || A.TABLE_NAME || ' IS ''' || A.COMMENTS || ''';') AS DDL
  FROM DBA_TAB_COMMENTS A
 WHERE A.OWNER = :OWNER
   AND A.TABLE_NAME = :TABLE_NAME
 UNION ALL
SELECT A.OWNER
     , A.COLUMN_NAME AS OBJECT_NAME
     , 'COLUMN_COMMENT' AS OBJECT_TYPE
     , NULL AS TABLESPACE_NAME
     , TO_CLOB('COMMENT ON COLUMN ' || A.OWNER || '.' || A.TABLE_NAME || '.' || A.COLUMN_NAME || ' IS ''' || A.COMMENTS || ''';') AS DDL
  FROM DBA_COL_COMMENTS A
 WHERE A.OWNER = :OWNER
   AND A.TABLE_NAME = :TABLE_NAME
 UNION ALL
SELECT A.OWNER
     , A.SYNONYM_NAME AS OBJECT_NAME
     , 'SYNOYNM' AS OBJECT_TYPE
     , NULL AS TABLESPACE_NAME
     , TO_CLOB('CREATE OR REPLACE SYNONYM ' || A.OWNER || '.' || A.SYNONYM_NAME || ' FOR ' || A.TABLE_OWNER || '.' || A.TABLE_NAME || DECODE(A.DB_LINK, NULL, NULL, '@' || A.DB_LINK) || ';') AS DDL
  FROM DBA_SYNONYMS A
 WHERE A.TABLE_OWNER = :OWNER
   AND A.TABLE_NAME = :TABLE_NAME
 UNION ALL
SELECT A.OWNER
     , A.TABLE_NAME AS OBJECT_NAME
     , 'PRIVILEGE' AS OBJECT_TYPE
     , NULL AS TABLESPACE_NAME
     , TO_CLOB('GRANT ' || LISTAGG(A.PRIVILEGE, ',') || ' ON ' || A.OWNER || '.' || A.TABLE_NAME || ' TO ' || A.GRANTEE || ';') AS DDL
  FROM DBA_TAB_PRIVS A
 WHERE A.OWNER = :OWNER
   AND A.TABLE_NAME = :TABLE_NAME
 GROUP BY A.OWNER, A.TABLE_NAME, A.GRANTEE
;