-- ################ 통계 정보 생성 테스트 데이터 생성 ################ 
DROP TABLE PMPBDBA.ZZ_TB_STC_CNCT_FEE_TEST PURGE;
CREATE TABLE PMPBDBA.ZZ_TB_STC_CNCT_FEE_TEST
(
    STACC_YM                    VARCHAR2(6) NOT NULL,
    BILL_ACNT_GRP_NO            NUMBER(3) NOT NULL,
    CALL_STRT_DT                VARCHAR2(8) NOT NULL,
    EXTR_CD                     VARCHAR2(20) NOT NULL,
    STRT_TELNO                  VARCHAR2(8) NOT NULL,
    MCO_CD                      VARCHAR2(20) NOT NULL,
    MPS_FTR_CD1                 VARCHAR2(10) NOT NULL,
    CNCT_STACC_CALL_KD_DTL_CD   VARCHAR2(20) NOT NULL,
    CNCT_STACC_CALL_KD_CD       VARCHAR2(20) NOT NULL,
    RTNG_PREFIX_CD              VARCHAR2(7) NOT NULL,
    KTF_RMNG_YN                 VARCHAR2(1) NOT NULL,
    CNCT_ENPR_KD_CD             VARCHAR2(20) NOT NULL,
    IOCLL_KD_CD                 VARCHAR2(20) NOT NULL,
    SRC_ITEM_DV_CD              VARCHAR2(20) NOT NULL,
    EXTR_KD_CD                  VARCHAR2(2) NOT NULL,
    MVNO_KD_CD                  VARCHAR2(5) NOT NULL,
    MPS_FTR_CD2                 VARCHAR2(10),
    RE_WORK_TRGT_CD             VARCHAR2(20),
    RE_WORK_DT                  VARCHAR2(8),
    TOT_CALL_TM                 NUMBER(20,2),
    TOT_CALL_CNT                NUMBER(20,2),
    TOT_CALL_AMT                NUMBER(20,2)
)
PARTITION BY RANGE (STACC_YM)
SUBPARTITION BY LIST (BILL_ACNT_GRP_NO)
SUBPARTITION TEMPLATE
(
    SUBPARTITION SUB_00 VALUES (0),
    SUBPARTITION SUB_01 VALUES (1),
    SUBPARTITION SUB_02 VALUES (2),
    SUBPARTITION SUB_03 VALUES (3),
    SUBPARTITION SUB_04 VALUES (4),
    SUBPARTITION SUB_05 VALUES (5),
    SUBPARTITION SUB_06 VALUES (6),
    SUBPARTITION SUB_07 VALUES (7),
    SUBPARTITION SUB_08 VALUES (8),
    SUBPARTITION SUB_09 VALUES (9),
    SUBPARTITION SUB_10 VALUES (10),
    SUBPARTITION SUB_11 VALUES (11),
    SUBPARTITION SUB_12 VALUES (12),
    SUBPARTITION SUB_13 VALUES (13),
    SUBPARTITION SUB_14 VALUES (14),
    SUBPARTITION SUB_15 VALUES (15),
    SUBPARTITION SUB_16 VALUES (16),
    SUBPARTITION SUB_17 VALUES (17),
    SUBPARTITION SUB_18 VALUES (18),
    SUBPARTITION SUB_19 VALUES (19),
    SUBPARTITION SUB_20 VALUES (20),
    SUBPARTITION SUB_21 VALUES (21),
    SUBPARTITION SUB_22 VALUES (22),
    SUBPARTITION SUB_23 VALUES (23),
    SUBPARTITION SUB_24 VALUES (24),
    SUBPARTITION SUB_25 VALUES (25),
    SUBPARTITION SUB_26 VALUES (26),
    SUBPARTITION SUB_27 VALUES (27),
    SUBPARTITION SUB_28 VALUES (28),
    SUBPARTITION SUB_29 VALUES (29),
    SUBPARTITION SUB_30 VALUES (30),
    SUBPARTITION SUB_31 VALUES (31),
    SUBPARTITION SUB_32 VALUES (32),
    SUBPARTITION SUB_33 VALUES (33),
    SUBPARTITION SUB_34 VALUES (34),
    SUBPARTITION SUB_35 VALUES (35),
    SUBPARTITION SUB_36 VALUES (36),
    SUBPARTITION SUB_37 VALUES (37),
    SUBPARTITION SUB_38 VALUES (38),
    SUBPARTITION SUB_39 VALUES (39),
    SUBPARTITION SUB_40 VALUES (40),
    SUBPARTITION SUB_41 VALUES (41),
    SUBPARTITION SUB_42 VALUES (42),
    SUBPARTITION SUB_43 VALUES (43),
    SUBPARTITION SUB_44 VALUES (44),
    SUBPARTITION SUB_45 VALUES (45),
    SUBPARTITION SUB_46 VALUES (46),
    SUBPARTITION SUB_47 VALUES (47),
    SUBPARTITION SUB_48 VALUES (48),
    SUBPARTITION SUB_49 VALUES (49),
    SUBPARTITION SUB_50 VALUES (50),
    SUBPARTITION SUB_51 VALUES (51),
    SUBPARTITION SUB_52 VALUES (52),
    SUBPARTITION SUB_53 VALUES (53),
    SUBPARTITION SUB_54 VALUES (54),
    SUBPARTITION SUB_55 VALUES (55),
    SUBPARTITION SUB_56 VALUES (56),
    SUBPARTITION SUB_57 VALUES (57),
    SUBPARTITION SUB_58 VALUES (58),
    SUBPARTITION SUB_59 VALUES (59),
    SUBPARTITION SUB_60 VALUES (60),
    SUBPARTITION SUB_61 VALUES (61),
    SUBPARTITION SUB_62 VALUES (62),
    SUBPARTITION SUB_63 VALUES (63),
    SUBPARTITION SUB_64 VALUES (64),
    SUBPARTITION SUB_65 VALUES (65),
    SUBPARTITION SUB_66 VALUES (66),
    SUBPARTITION SUB_67 VALUES (67),
    SUBPARTITION SUB_68 VALUES (68),
    SUBPARTITION SUB_69 VALUES (69),
    SUBPARTITION SUB_70 VALUES (70),
    SUBPARTITION SUB_71 VALUES (71),
    SUBPARTITION SUB_72 VALUES (72),
    SUBPARTITION SUB_73 VALUES (73),
    SUBPARTITION SUB_74 VALUES (74),
    SUBPARTITION SUB_75 VALUES (75),
    SUBPARTITION SUB_76 VALUES (76),
    SUBPARTITION SUB_77 VALUES (77),
    SUBPARTITION SUB_78 VALUES (78),
    SUBPARTITION SUB_79 VALUES (79),
    SUBPARTITION SUB_80 VALUES (80),
    SUBPARTITION SUB_81 VALUES (81),
    SUBPARTITION SUB_82 VALUES (82),
    SUBPARTITION SUB_83 VALUES (83),
    SUBPARTITION SUB_84 VALUES (84),
    SUBPARTITION SUB_85 VALUES (85),
    SUBPARTITION SUB_86 VALUES (86),
    SUBPARTITION SUB_87 VALUES (87),
    SUBPARTITION SUB_88 VALUES (88),
    SUBPARTITION SUB_89 VALUES (89),
    SUBPARTITION SUB_90 VALUES (90),
    SUBPARTITION SUB_91 VALUES (91),
    SUBPARTITION SUB_92 VALUES (92),
    SUBPARTITION SUB_93 VALUES (93),
    SUBPARTITION SUB_94 VALUES (94),
    SUBPARTITION SUB_95 VALUES (95),
    SUBPARTITION SUB_96 VALUES (96),
    SUBPARTITION SUB_97 VALUES (97),
    SUBPARTITION SUB_98 VALUES (98),
    SUBPARTITION SUB_99 VALUES (99)
)
(
    PARTITION P_202105 VALUES LESS THAN ('202106'),
    PARTITION P_202106 VALUES LESS THAN ('202107'),
    PARTITION P_202107 VALUES LESS THAN ('202108'),
    PARTITION P_202108 VALUES LESS THAN ('202109'),
    PARTITION P_202109 VALUES LESS THAN ('202110'),
    PARTITION P_202110 VALUES LESS THAN ('202111'),
    PARTITION P_202111 VALUES LESS THAN ('202112'),
    PARTITION P_202112 VALUES LESS THAN ('202201'),
    PARTITION P_202201 VALUES LESS THAN ('202202'),
    PARTITION P_202202 VALUES LESS THAN ('202203'),
    PARTITION P_202203 VALUES LESS THAN ('202204'),
    PARTITION P_202204 VALUES LESS THAN ('202205')
);

INSERT INTO ZZ_TB_STC_CNCT_FEE_TEST SELECT * FROM PMPBADM.TB_STC_CNCT_FEE@DL_PNUPB1 WHERE ROWNUM < = 10000;
COMMIT;

CREATE UNIQUE INDEX PMPBDBA.PK_STC_CNCT_FEE
ON PMPBDBA.ZZ_TB_STC_CNCT_FEE_TEST
(
    STACC_YM,
    BILL_ACNT_GRP_NO,
    CALL_STRT_DT,
    EXTR_CD,
    STRT_TELNO,
    MCO_CD,
    MPS_FTR_CD1,
    CNCT_STACC_CALL_KD_DTL_CD,
    CNCT_STACC_CALL_KD_CD,
    RTNG_PREFIX_CD,
    KTF_RMNG_YN,
    CNCT_ENPR_KD_CD,
    IOCLL_KD_CD,
    SRC_ITEM_DV_CD,
    EXTR_KD_CD,
    MVNO_KD_CD
) 
LOCAL TABLESPACE TS_PMPB_IP02 PARALLEL 16 NOLOGGING;
ALTER INDEX PMPBDBA.PK_STC_CNCT_FEE NOPARALLEL LOGGING;

ALTER TABLE PMPBDBA.ZZ_TB_STC_CNCT_FEE_TEST
ADD CONSTRAINT PK_STC_CNCT_FEE PRIMARY KEY (STACC_YM,BILL_ACNT_GRP_NO,CALL_STRT_DT,EXTR_CD,STRT_TELNO,MCO_CD,MPS_FTR_CD1,CNCT_STACC_CALL_KD_DTL_CD,CNCT_STACC_CALL_KD_CD,RTNG_PREFIX_CD,KTF_RMNG_YN,CNCT_ENPR_KD_CD,IOCLL_KD_CD,SRC_ITEM_DV_CD,EXTR_KD_CD,MVNO_KD_CD);


-- ################ 통계 정보 조회 ################ 
-- TAB_STATISTICS 조회 (TABLES, TAB_PARTITIONS, TAB_SUBPARTITIONS 내 통계정보 취합된 뷰)
SELECT OWNER
     , TABLE_NAME
     , PARTITION_NAME
     , PARTITION_POSITION
     , SUBPARTITION_NAME
     , SUBPARTITION_POSITION
     , OBJECT_TYPE
     , NUM_ROWS
     , BLOCKS
     , EMPTY_BLOCKS
     , AVG_SPACE
     , CHAIN_CNT
     , AVG_ROW_LEN
     , AVG_SPACE_FREELIST_BLOCKS
     , NUM_FREELIST_BLOCKS
     , AVG_CACHED_BLOCKS
     , AVG_CACHE_HIT_RATIO
     , IM_IMCU_COUNT
     , IM_BLOCK_COUNT
     , IM_STAT_UPDATE_TIME
     , SCAN_RATE
     , SAMPLE_SIZE
     , LAST_ANALYZED
     , GLOBAL_STATS
     , USER_STATS
     , STATTYPE_LOCKED
     , STALE_STATS
     , NOTES
     , SCOPE
     , DECODE(OBJECT_TYPE, 'TABLE', 'EXEC DBMS_STATS.GATHER_TABLE_STATS(OWNNAME=>''' || OWNER || ''', TABNAME=>''' || TABLE_NAME || ''', GRANULARITY=>''ALL'', DEGREE=>8, CASCADE=>TRUE, METHOD_OPT=>''FOR ALL COLUMNS SIZE 1'', NO_INVALIDATE=>FALSE, ESTIMATE_PERCENT=>DBMS_STATS.AUTO_SAMPLE_SIZE);'
                         , 'PARTITION', 'EXEC DBMS_STATS.GATHER_TABLE_STATS(OWNNAME=>''' || OWNER || ''', TABNAME=>''' || TABLE_NAME || ''', GRANULARITY=>''PARTITION'', PARTNAME=>''' || PARTITION_NAME || ''', DEGREE=>8, CASCADE=>TRUE, METHOD_OPT=>''FOR ALL COLUMNS SIZE 1'', NO_INVALIDATE=>FALSE, ESTIMATE_PERCENT=>DBMS_STATS.AUTO_SAMPLE_SIZE);'
                         , 'SUBPARTITION', 'EXEC DBMS_STATS.GATHER_TABLE_STATS(OWNNAME=>''' || OWNER || ''', TABNAME=>''' || TABLE_NAME || ''', GRANULARITY=>''SUBPARTITION'', PARTNAME=>''' || SUBPARTITION_NAME || ''', DEGREE=>8, CASCADE=>TRUE, METHOD_OPT=>''FOR ALL COLUMNS SIZE 1'', NO_INVALIDATE=>FALSE, ESTIMATE_PERCENT=>DBMS_STATS.AUTO_SAMPLE_SIZE);' 
       ) GATHER_STATS_DDL
  FROM DBA_TAB_STATISTICS
 WHERE 1=1
   AND OWNER IN ('PMPBADM', 'BLCP01ADM', 'BLCP02ADM', 'BLCP03ADM', 'BLCP04ADM', 'BLCP05ADM', 'BLCP06ADM', 'BLCP07ADM', 'BLCP08ADM', 'BLCP09ADM', 'BLCP10ADM')
   AND LAST_ANALYZED IS NULL
   AND OBJECT_TYPE = 'TABLE'
--   AND OBJECT_TYPE = 'PARTITION'
--   AND OBJECT_TYPE = 'SUBPARTITION'
 ORDER BY OWNER, TABLE_NAME, DECODE(OBJECT_TYPE, 'TABLE', 1, 'PARTITION', 2, 'SUBPARTITION', 3), PARTITION_NAME, SUBPARTITION_NAME;
 
-- TAB_COL_STATISTICS 조회
SELECT * FROM DBA_TAB_COL_STATISTICS;

-- TAB_STATS_HISTORY 조회 (전체 테이블에 대한 통계정보 변경 이력)
SELECT * FROM DBA_TAB_STATS_HISTORY;

-- TAB_HISTOGRAMS 조회
SELECT * FROM DBA_TAB_HISTOGRAMS WHERE TABLE_NAME = 'ZZ_TB_STC_CNCT_FEE_TEST';

-- TABLES 통계 조회
SELECT OWNER, TABLE_NAME, NUM_ROWS, BLOCKS, EMPTY_BLOCKS, AVG_SPACE, CHAIN_CNT, AVG_ROW_LEN, AVG_SPACE_FREELIST_BLOCKS, NUM_FREELIST_BLOCKS, SAMPLE_SIZE, LAST_ANALYZED, GLOBAL_STATS FROM DBA_TABLES WHERE TABLE_NAME = 'ZZ_TB_STC_CNCT_FEE_TEST';

-- TAB_PARTITIONS 통계 조회
SELECT TABLE_OWNER, TABLE_NAME, PARTITION_NAME, NUM_ROWS, BLOCKS, EMPTY_BLOCKS, AVG_SPACE, CHAIN_CNT, AVG_ROW_LEN, SAMPLE_SIZE, LAST_ANALYZED FROM DBA_TAB_PARTITIONS WHERE TABLE_NAME = 'ZZ_TB_STC_CNCT_FEE_TEST';

-- TAB_SUBPARTITIONS 통계 조회
SELECT TABLE_OWNER, TABLE_NAME, PARTITION_NAME, SUBPARTITION_NAME, NUM_ROWS, BLOCKS, EMPTY_BLOCKS, AVG_SPACE, CHAIN_CNT, AVG_ROW_LEN, SAMPLE_SIZE, LAST_ANALYZED FROM DBA_TAB_SUBPARTITIONS WHERE TABLE_NAME = 'ZZ_TB_STC_CNCT_FEE_TEST';SELECT OWNER, TABLE_NAME, COLUMN_NAME, NUM_DISTINCT, NUM_NULLS, DENSITY, LOW_VALUE, HIGH_VALUE, HISTOGRAM FROM DBA_TAB_COLUMNS WHERE TABLE_NAME = 'ZZ_TB_STC_CNCT_FEE_TEST';

-- IND_STATISTICS 조회 (INDEXES, IND_PARTITIONS, IND_SUBPARTITIONS 내 통계정보 취합된 뷰)
SELECT OWNER
     , INDEX_NAME
     , TABLE_OWNER
     , TABLE_NAME
     , PARTITION_NAME
     , PARTITION_POSITION
     , SUBPARTITION_NAME
     , SUBPARTITION_POSITION
     , OBJECT_TYPE
     , BLEVEL
     , LEAF_BLOCKS
     , DISTINCT_KEYS
     , AVG_LEAF_BLOCKS_PER_KEY
     , AVG_DATA_BLOCKS_PER_KEY
     , CLUSTERING_FACTOR
     , NUM_ROWS
     , AVG_CACHED_BLOCKS
     , AVG_CACHE_HIT_RATIO
     , SAMPLE_SIZE
     , LAST_ANALYZED
     , GLOBAL_STATS
     , USER_STATS
     , STATTYPE_LOCKED
     , STALE_STATS
     , SCOPE
     , 'EXEC DBMS_STATS.GATHER_INDEX_STATS(OWNNAME=>'''|| OWNER ||''',INDNAME=>''' || INDEX_NAME || ''', GRANULARITY=>''AUTO'', DEGREE=>8, NO_INVALIDATE=>FALSE, ESTIMATE_PERCENT=>DBMS_STATS.AUTO_SAMPLE_SIZE);' AS GATHER_STAT_DDL
  FROM DBA_IND_STATISTICS
 WHERE 1=1
   AND OWNER IN ('PMPBADM', 'BLCP01ADM', 'BLCP02ADM', 'BLCP03ADM', 'BLCP04ADM', 'BLCP05ADM', 'BLCP06ADM', 'BLCP07ADM', 'BLCP08ADM', 'BLCP09ADM', 'BLCP10ADM')
--   AND INDEX_NAME NOT LIKE 'SYS\_%' ESCAPE '\'
   AND LAST_ANALYZED IS NULL
 ORDER BY OWNER, TABLE_NAME, DECODE(OBJECT_TYPE, 'INDEX', 1, 'PARTITION', 2, 'SUBPARTITION', 3), PARTITION_NAME, SUBPARTITION_NAME;
 
-- INDEXES 통계 조회
SELECT OWNER, TABLE_NAME, INDEX_NAME, BLEVEL, LEAF_BLOCKS, DISTINCT_KEYS, AVG_LEAF_BLOCKS_PER_KEY, AVG_DATA_BLOCKS_PER_KEY, CLUSTERING_FACTOR, STATUS, NUM_ROWS, SAMPLE_SIZE, LAST_ANALYZED, GLOBAL_STATS FROM DBA_INDEXES WHERE TABLE_NAME = 'ZZ_TB_STC_CNCT_FEE_TEST';

-- IND_PARTITIONS 통계 조회
SELECT INDEX_OWNER, INDEX_NAME, BLEVEL, LEAF_BLOCKS, DISTINCT_KEYS, AVG_LEAF_BLOCKS_PER_KEY, AVG_DATA_BLOCKS_PER_KEY, CLUSTERING_FACTOR, NUM_ROWS, SAMPLE_SIZE, LAST_ANALYZED, GLOBAL_STATS FROM DBA_IND_PARTITIONS WHERE INDEX_NAME IN (SELECT INDEX_NAME FROM DBA_INDEXES WHERE TABLE_NAME = 'ZZ_TB_STC_CNCT_FEE_TEST');

-- IND_SUBPARTITIONS 통계 조회
SELECT INDEX_OWNER, INDEX_NAME, BLEVEL, LEAF_BLOCKS, DISTINCT_KEYS, AVG_LEAF_BLOCKS_PER_KEY, AVG_DATA_BLOCKS_PER_KEY, CLUSTERING_FACTOR, NUM_ROWS, SAMPLE_SIZE, LAST_ANALYZED, GLOBAL_STATS FROM DBA_IND_SUBPARTITIONS WHERE INDEX_NAME IN (SELECT INDEX_NAME FROM DBA_INDEXES WHERE TABLE_NAME = 'ZZ_TB_STC_CNCT_FEE_TEST');


-- ################ 통계 정보 생성 ################ 
-- 테이블 통계 생성
EXEC DBMS_STATS.GATHER_TABLE_STATS(OWNNAME=>'',TABNAME=>'');
EXEC DBMS_STATS.GATHER_TABLE_STATS(OWNNAME=>'',TABNAME=>'',GRANULARITY=>'ALL',DEGREE=>8,CASCADE=>TRUE,METHOD_OPT=>'FOR ALL COLUMNS SIZE 1',NO_INVALIDATE=>FALSE);

-- 테이블 내 특정 파티션 통계 생성
EXEC DBMS_STATS.GATHER_TABLE_STATS(OWNNAME=>'',TABNAME=>'',GRANULARITY=>'PARTITION',PARTNAME=>'P_202108');

-- 테이블 내 특정 서브파티션 통계 생성
EXEC DBMS_STATS.GATHER_TABLE_STATS(OWNNAME=>'',TABNAME=>'',GRANULARITY=>'SUBPARTITION',PARTNAME=>'P_202108_SUB_00');


-- ################ 통계 정보 카피 ################ 
-- 테이블 내 파티션 간 통계 카피
EXEC DBMS_STATS.COPY_TABLE_STATS(OWNNAME=>'PMPBDBA',TABNAME=>'ZZ_TB_STC_CNCT_FEE_TEST', SRCPARTNAME=>'P_202108',DSTPARTNAME=>'P_202109');

-- 테이블 내 서브파티션 간 통계 카피
EXEC DBMS_STATS.COPY_TABLE_STATS(OWNNAME=>'PMPBDBA',TABNAME=>'ZZ_TB_STC_CNCT_FEE_TEST', SRCPARTNAME=>'P_202108_SUB_00',DSTPARTNAME=>'P_202108_SUB_01');

-- 통계 정보 복사 (PARTITION, SUBPARTITION 중 통계정보가 없으면 가장 최근 파티션의 통계정보를 복사)
SELECT A.OWNER
     , A.TABLE_NAME
     , A.PARTITION_NAME
     , A.PARTITION_POSITION
     , A.SUBPARTITION_NAME
     , A.SUBPARTITION_POSITION
     , A.OBJECT_TYPE
     , MAX(B.PARTITION_NAME) AS LATEST_PART_STATS
     , MAX(B.SUBPARTITION_NAME) AS LATEST_SUBPART_STATS
     , DECODE(A.OBJECT_TYPE, 'PARTITION', 'EXEC DBMS_STATS.COPY_TABLE_STATS(OWNNAME=>''' || A.OWNER || ''', TABNAME=>''' || A.TABLE_NAME || ''', SRCPARTNAME=> ''' || MAX(B.PARTITION_NAME) || ''', DSTPARTNAME=>''' || A.PARTITION_NAME || ''');' , 'SUBPARTITION', 'EXEC DBMS_STATS.COPY_TABLE_STATS(OWNNAME=>''' || A.OWNER || ''', TABNAME=>''' || A.TABLE_NAME || ''', SRCPARTNAME=> ''' || MAX(B.SUBPARTITION_NAME) || ''', DSTPARTNAME=>''' || A.SUBPARTITION_NAME || ''');' ) AS COPY_STATS_DDL
  FROM DBA_TAB_STATISTICS A
     , (SELECT OWNER
             , TABLE_NAME
             , PARTITION_NAME
             , SUBPARTITION_NAME
          FROM DBA_TAB_STATISTICS
         WHERE OWNER IN ('PMPBADM'
                     , 'BLCP01ADM'
                     , 'BLCP02ADM'
                     , 'BLCP03ADM'
                     , 'BLCP04ADM'
                     , 'BLCP05ADM'
                     , 'BLCP06ADM'
                     , 'BLCP07ADM'
                     , 'BLCP08ADM'
                     , 'BLCP09ADM'
                     , 'BLCP10ADM')
           AND OBJECT_TYPE IN ('PARTITION', 'SUBPARTITION')
           AND LAST_ANALYZED IS NOT NULL) B
 WHERE 1=1
   AND A.OWNER IN ('PMPBADM'
             , 'BLCP01ADM'
             , 'BLCP02ADM'
             , 'BLCP03ADM'
             , 'BLCP04ADM'
             , 'BLCP05ADM'
             , 'BLCP06ADM'
             , 'BLCP07ADM'
             , 'BLCP08ADM'
             , 'BLCP09ADM'
             , 'BLCP10ADM')
   AND A.LAST_ANALYZED IS NULL
   AND A.OBJECT_TYPE IN ('PARTITION', 'SUBPARTITION')
   AND A.OWNER = B.OWNER (+)
   AND A.TABLE_NAME = B.TABLE_NAME (+)
 GROUP BY A.OWNER, A.TABLE_NAME, A.PARTITION_NAME, A.PARTITION_POSITION, A.SUBPARTITION_NAME, A.SUBPARTITION_POSITION, A.OBJECT_TYPE
 ORDER BY A.OWNER, A.TABLE_NAME, DECODE(A.OBJECT_TYPE, 'TABLE', 1, 'PARTITION', 2, 'SUBPARTITION', 3), A.PARTITION_NAME, A.SUBPARTITION_NAME;






-- ################ 통계 정보 삭제 ################ 
-- 테이블 통계 삭제
EXEC DBMS_STATS.DELETE_TABLE_STATS(OWNNAME=>'PMPBDBA',TABNAME=>'ZZ_TB_STC_CNCT_FEE_TEST');


-- ################ 통계 정보 백업 및 복구 ################ 
/*
* 1. 통계정보 저장 테이블 (STATS_20220114) 생성
* 2. STATS_20220114에 대상 테이블 통계 백업
* 3. STATS_20220114을 MIGRATION 대상 DB로 이관
* 4. MIGRATION 대상 DB의 STATS_20220114에서 대상 테이블 통계 복구
*/
-- 통계정보 저장 테이블 생성
EXEC DBMS_STATS.CREATE_STAT_TABLE(OWNNAME=>'PMPBDBA',STATTAB=>'STATS_20220114',TBLSPACE=>'TS_PMPBDBA_D01');

-- 통계정보 저장 테이블 삭제
EXEC DBMS_STATS.DROP_STAT_TABLE(OWNNAME=>'PMPBDBA',STATTAB=>'STATS_20220114');

-- 대상 테이블 통계 백업
EXEC DBMS_STATS.EXPORT_TABLE_STATS(OWNNAME=>'PMPBADM',TABNAME=>'TB_STM_RTNG_GTHR',CASCADE=>TRUE,STATTAB=>'STATS_20220114',STATOWN=>'PMPBDBA');
EXEC DBMS_STATS.EXPORT_TABLE_STATS(OWNNAME=>'PMPBADM',TABNAME=>'TB_STM_RTNG_GTHR_DLY',CASCADE=>TRUE,STATTAB=>'STATS_20220114',STATOWN=>'PMPBDBA');

-- 대상 테이블 통계 복구
EXEC DBMS_STATS.IMPORT_TABLE_STATS(OWNNAME=>'PMPBADM',TABNAME=>'TB_STM_RTNG_GTHR',CASCADE=>TRUE,STATTAB=>'STATS_20220114',STATOWN=>'PMPBDBA');
EXEC DBMS_STATS.IMPORT_TABLE_STATS(OWNNAME=>'PMPBADM',TABNAME=>'TB_STM_RTNG_GTHR_DLY',CASCADE=>TRUE,STATTAB=>'STATS_20220114',STATOWN=>'PMPBDBA');

EXEC DBMS_STATS.IMPORT_TABLE_STATS(OWNNAME=>'PMPBADM',TABNAME=>'TB_STM_RTNG_GTHR',CASCADE=>TRUE,STATTAB=>'STATS_20211206',STATOWN=>'PMPBDBA',PARTNAME=>'P_202109');
EXEC DBMS_STATS.IMPORT_TABLE_STATS(OWNNAME=>'PMPBADM',TABNAME=>'TB_STM_RTNG_GTHR_DLY',CASCADE=>TRUE,STATTAB=>'STATS_20211206',STATOWN=>'PMPBDBA',PARTNAME=>'P_20210901');

-- 통계 생성 확인
SELECT * FROM DBA_TAB_STATISTICS WHERE TABLE_NAME IN ('TB_STM_RTNG_GTHR','TB_STM_RTNG_GTHR_DLY') AND OBJECT_TYPE = 'TABLE';