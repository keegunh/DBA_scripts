-- PIVOT (SUM() 함수와  FOR절에 있는 컬럼을 제외한 컬럼으로 자동 GROUP BY 시킴)
WITH PIVOT_TEST AS (
     SELECT 1 AS ID, 1 AS CUSTOMER_ID, 'A' AS PRODUCT_CODE, 10 AS QUANTITY FROM DUAL
      UNION ALL
     SELECT 2 AS ID, 1 AS CUSTOMER_ID, 'B' AS PRODUCT_CODE, 20 AS QUANTITY FROM DUAL
      UNION ALL
     SELECT 3 AS ID, 1 AS CUSTOMER_ID, 'C' AS PRODUCT_CODE, 30 AS QUANTITY FROM DUAL
      UNION ALL
     SELECT 4 AS ID, 2 AS CUSTOMER_ID, 'A' AS PRODUCT_CODE, 40 AS QUANTITY FROM DUAL
      UNION ALL
     SELECT 5 AS ID, 2 AS CUSTOMER_ID, 'C' AS PRODUCT_CODE, 50 AS QUANTITY FROM DUAL
      UNION ALL
     SELECT 6 AS ID, 2 AS CUSTOMER_ID, 'A' AS PRODUCT_CODE, 60 AS QUANTITY FROM DUAL
      UNION ALL
     SELECT 7 AS ID, 3 AS CUSTOMER_ID, 'B' AS PRODUCT_CODE, 70 AS QUANTITY FROM DUAL
      UNION ALL
     SELECT 8 AS ID, 3 AS CUSTOMER_ID, 'C' AS PRODUCT_CODE, 80 AS QUANTITY FROM DUAL
      UNION ALL
     SELECT 9 AS ID, 3 AS CUSTOMER_ID, 'D' AS PRODUCT_CODE, 90 AS QUANTITY FROM DUAL
      UNION ALL
     SELECT 10 AS ID, 4 AS CUSTOMER_ID, 'A' AS PRODUCT_CODE, 100 AS QUANTITY FROM DUAL
)
SELECT * FROM PIVOT_TEST
 PIVOT (SUM(QUANTITY) AS SUM_QUANTITY FOR PRODUCT_CODE IN ('A' AS A, 'B' AS B, 'C' AS C, 'D' AS D))
 ORDER BY CUSTOMER_ID;


-- PIVOT을 GROUP BY로 풀어 쓰면. (위 쿼리는 아래와 같이 풀어 쓸 수 있음.)
WITH PIVOT_TEST AS (
     SELECT 1 AS ID, 1 AS CUSTOMER_ID, 'A' AS PRODUCT_CODE, 10 AS QUANTITY FROM DUAL
      UNION ALL
     SELECT 2 AS ID, 1 AS CUSTOMER_ID, 'B' AS PRODUCT_CODE, 20 AS QUANTITY FROM DUAL
      UNION ALL
     SELECT 3 AS ID, 1 AS CUSTOMER_ID, 'C' AS PRODUCT_CODE, 30 AS QUANTITY FROM DUAL
      UNION ALL
     SELECT 4 AS ID, 2 AS CUSTOMER_ID, 'A' AS PRODUCT_CODE, 40 AS QUANTITY FROM DUAL
      UNION ALL
     SELECT 5 AS ID, 2 AS CUSTOMER_ID, 'C' AS PRODUCT_CODE, 50 AS QUANTITY FROM DUAL
      UNION ALL
     SELECT 6 AS ID, 2 AS CUSTOMER_ID, 'A' AS PRODUCT_CODE, 60 AS QUANTITY FROM DUAL
      UNION ALL
     SELECT 7 AS ID, 3 AS CUSTOMER_ID, 'B' AS PRODUCT_CODE, 70 AS QUANTITY FROM DUAL
      UNION ALL
     SELECT 8 AS ID, 3 AS CUSTOMER_ID, 'C' AS PRODUCT_CODE, 80 AS QUANTITY FROM DUAL
      UNION ALL
     SELECT 9 AS ID, 3 AS CUSTOMER_ID, 'D' AS PRODUCT_CODE, 90 AS QUANTITY FROM DUAL
      UNION ALL
     SELECT 10 AS ID, 4 AS CUSTOMER_ID, 'A' AS PRODUCT_CODE, 100 AS QUANTITY FROM DUAL
)
SELECT ID, CUSTOMER_ID
     , SUM(DECODE(PRODUCT_CODE, 'A', QUANTITY, NULL)) AS A_SUM_QUANTITY
     , SUM(DECODE(PRODUCT_CODE, 'B', QUANTITY, NULL)) AS B_SUM_QUANTITY
     , SUM(DECODE(PRODUCT_CODE, 'C', QUANTITY, NULL)) AS C_SUM_QUANTITY
     , SUM(DECODE(PRODUCT_CODE, 'D', QUANTITY, NULL)) AS D_SUM_QUANTITY
  FROM PIVOT_TEST
 GROUP BY ID, CUSTOMER_ID
 ORDER BY ID, CUSTOMER_ID;




-- PIVOT BY CUSTOMER_ID
-- CUSTOMER_ID 별로 결과를 SUM해서 보고 싶으면 아래와 같이 변경. PIVOT에 쓰일 컬럼들만으로 구성된 인라인 뷰를 만들어야 함)
WITH PIVOT_TEST AS (
     SELECT 1 AS ID, 1 AS CUSTOMER_ID, 'A' AS PRODUCT_CODE, 10 AS QUANTITY FROM DUAL
      UNION ALL
     SELECT 2 AS ID, 1 AS CUSTOMER_ID, 'B' AS PRODUCT_CODE, 20 AS QUANTITY FROM DUAL
      UNION ALL
     SELECT 3 AS ID, 1 AS CUSTOMER_ID, 'C' AS PRODUCT_CODE, 30 AS QUANTITY FROM DUAL
      UNION ALL
     SELECT 4 AS ID, 2 AS CUSTOMER_ID, 'A' AS PRODUCT_CODE, 40 AS QUANTITY FROM DUAL
      UNION ALL
     SELECT 5 AS ID, 2 AS CUSTOMER_ID, 'C' AS PRODUCT_CODE, 50 AS QUANTITY FROM DUAL
      UNION ALL
     SELECT 6 AS ID, 2 AS CUSTOMER_ID, 'A' AS PRODUCT_CODE, 60 AS QUANTITY FROM DUAL
      UNION ALL
     SELECT 7 AS ID, 3 AS CUSTOMER_ID, 'B' AS PRODUCT_CODE, 70 AS QUANTITY FROM DUAL
      UNION ALL
     SELECT 8 AS ID, 3 AS CUSTOMER_ID, 'C' AS PRODUCT_CODE, 80 AS QUANTITY FROM DUAL
      UNION ALL
     SELECT 9 AS ID, 3 AS CUSTOMER_ID, 'D' AS PRODUCT_CODE, 90 AS QUANTITY FROM DUAL
      UNION ALL
     SELECT 10 AS ID, 4 AS CUSTOMER_ID, 'A' AS PRODUCT_CODE, 100 AS QUANTITY FROM DUAL
)
SELECT * FROM (SELECT CUSTOMER_ID, PRODUCT_CODE, QUANTITY FROM PIVOT_TEST)
 PIVOT (SUM(QUANTITY) AS SUM_QUANTITY FOR PRODUCT_CODE IN ('A' AS A, 'B' AS B, 'C' AS C, 'D' AS D))
 ORDER BY CUSTOMER_ID;


-- PIVOT BY CUSTOMER_ID
WITH PIVOT_TEST AS (
     SELECT 1 AS ID, 1 AS CUSTOMER_ID, 'A' AS PRODUCT_CODE, 10 AS QUANTITY FROM DUAL
      UNION ALL
     SELECT 2 AS ID, 1 AS CUSTOMER_ID, 'B' AS PRODUCT_CODE, 20 AS QUANTITY FROM DUAL
      UNION ALL
     SELECT 3 AS ID, 1 AS CUSTOMER_ID, 'C' AS PRODUCT_CODE, 30 AS QUANTITY FROM DUAL
      UNION ALL
     SELECT 4 AS ID, 2 AS CUSTOMER_ID, 'A' AS PRODUCT_CODE, 40 AS QUANTITY FROM DUAL
      UNION ALL
     SELECT 5 AS ID, 2 AS CUSTOMER_ID, 'C' AS PRODUCT_CODE, 50 AS QUANTITY FROM DUAL
      UNION ALL
     SELECT 6 AS ID, 2 AS CUSTOMER_ID, 'A' AS PRODUCT_CODE, 60 AS QUANTITY FROM DUAL
      UNION ALL
     SELECT 7 AS ID, 3 AS CUSTOMER_ID, 'B' AS PRODUCT_CODE, 70 AS QUANTITY FROM DUAL
      UNION ALL
     SELECT 8 AS ID, 3 AS CUSTOMER_ID, 'C' AS PRODUCT_CODE, 80 AS QUANTITY FROM DUAL
      UNION ALL
     SELECT 9 AS ID, 3 AS CUSTOMER_ID, 'D' AS PRODUCT_CODE, 90 AS QUANTITY FROM DUAL
      UNION ALL
     SELECT 10 AS ID, 4 AS CUSTOMER_ID, 'A' AS PRODUCT_CODE, 100 AS QUANTITY FROM DUAL
)
SELECT CUSTOMER_ID
     , SUM(DECODE(PRODUCT_CODE, 'A', QUANTITY, NULL)) AS A_SUM_QUANTITY
     , SUM(DECODE(PRODUCT_CODE, 'B', QUANTITY, NULL)) AS B_SUM_QUANTITY
     , SUM(DECODE(PRODUCT_CODE, 'C', QUANTITY, NULL)) AS C_SUM_QUANTITY
     , SUM(DECODE(PRODUCT_CODE, 'D', QUANTITY, NULL)) AS D_SUM_QUANTITY
  FROM PIVOT_TEST
 GROUP BY CUSTOMER_ID
 ORDER BY CUSTOMER_ID;





-- UNPIVOT
WITH UNPIVOT_TEST AS (
     SELECT 1 AS ID, 101 AS CUSTOMER_ID, 10 AS PRODUCT_CODE_A, 20 AS PRODUCT_CODE_B, 30 AS PRODUCT_CODE_C, NULL AS PRODUCT_CODE_D FROM DUAL
      UNION ALL
     SELECT 2 AS ID, 102 AS CUSTOMER_ID, 40 AS PRODUCT_CODE_A, NULL AS PRODUCT_CODE_B, 50 AS PRODUCT_CODE_C, NULL AS PRODUCT_CODE_D FROM DUAL
      UNION ALL
     SELECT 3 AS ID, 103 AS CUSTOMER_ID, 60 AS PRODUCT_CODE_A, 20 AS PRODUCT_CODE_B, 80 AS PRODUCT_CODE_C, 90 AS PRODUCT_CODE_D FROM DUAL
      UNION ALL
     SELECT 4 AS ID, 104 AS CUSTOMER_ID, 100 AS PRODUCT_CODE_A, NULL AS PRODUCT_CODE_B, NULL AS PRODUCT_CODE_C, NULL AS PRODUCT_CODE_D FROM DUAL
)
SELECT * FROM UNPIVOT_TEST
UNPIVOT INCLUDE NULLS (QUANTITY FOR PRODUCT_CODE IN (PRODUCT_CODE_A AS 'A', PRODUCT_CODE_B AS 'B', PRODUCT_CODE_C AS 'C', PRODUCT_CODE_D AS 'D'));
-- UNPIVOT (QUANTITY FOR PRODUCT_CODE IN (PRODUCT_CODE_A AS 'A', PRODUCT_CODE_B AS 'B', PRODUCT_CODE_C AS 'C', PRODUCT_CODE_D AS 'D'));

-- UNPIVOT을 GROUP BY로 풀어 쓰면. (이 상태로는 INCLUDE NULLS 와 같은 결과. WHERE 절 주석을 풀면 위에서 INCLUDE NULLS 쓰지 않은 것과 같은 결과.)
WITH UNPIVOT_TEST AS (
     SELECT 1 AS ID, 101 AS CUSTOMER_ID, 10 AS PRODUCT_CODE_A, 20 AS PRODUCT_CODE_B, 30 AS PRODUCT_CODE_C, NULL AS PRODUCT_CODE_D FROM DUAL
      UNION ALL
     SELECT 2 AS ID, 102 AS CUSTOMER_ID, 40 AS PRODUCT_CODE_A, NULL AS PRODUCT_CODE_B, 50 AS PRODUCT_CODE_C, NULL AS PRODUCT_CODE_D FROM DUAL
      UNION ALL
     SELECT 3 AS ID, 103 AS CUSTOMER_ID, 60 AS PRODUCT_CODE_A, 20 AS PRODUCT_CODE_B, 80 AS PRODUCT_CODE_C, 90 AS PRODUCT_CODE_D FROM DUAL
      UNION ALL
     SELECT 4 AS ID, 104 AS CUSTOMER_ID, 100 AS PRODUCT_CODE_A, NULL AS PRODUCT_CODE_B, NULL AS PRODUCT_CODE_C, NULL AS PRODUCT_CODE_D FROM DUAL
)
SELECT ID, CUSTOMER_ID
     , DECODE(UNPIVOTED_ROW, 1, 'A'
	                       , 2, 'B'
                           , 3, 'C'
                           , 4, 'D'
                           , 'N/A') AS PRODUCT_CODE
     , DECODE(UNPIVOTED_ROW, 1, PRODUCT_CODE_A
	                       , 2, PRODUCT_CODE_B
                           , 3, PRODUCT_CODE_C
                           , 4, PRODUCT_CODE_D
                           , 'N/A') AS QUANTITY						   
  FROM UNPIVOT_TEST
     , (SELECT LEVEL AS UNPIVOTED_ROW FROM DUAL CONNECT BY LEVEL <= 4)
 -- WHERE UNPIVOT_ROW IN (CASE WHEN PRODUCT_CODE_A IS NOT NULL THEN 1 END
                     -- , CASE WHEN PRODUCT_CODE_B IS NOT NULL THEN 2 END
                     -- , CASE WHEN PRODUCT_CODE_C IS NOT NULL THEN 3 END
                     -- , CASE WHEN PRODUCT_CODE_D IS NOT NULL THEN 4 END)
 ORDER BY ID, CUSTOMER_ID, PRODUCT_CODE;
  