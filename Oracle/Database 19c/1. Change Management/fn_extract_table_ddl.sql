CREATE OR REPLACE FUNCTION DBA_SCHEMA.FN_EXTRACT_TABLE_DDL(
/*
------------------------------------------ INFO ------------------------------------------------------
CREATED_IN   : 2021/12/16
CREATED_BY   : KEEGUN HWANG
LAST_UPDATED_IN : 2021/12/20
LAST UPDATED_BY : KEEGUN HWANG
ORACLE_VERSION : Oracle Database 19c Enterprise Edition Release 19.0.0.0.0 - Production
------------------------------------------ SAMPLE USAGE ----------------------------------------------
SESSION PARAMETER SETTINGS : 
	EXEC DBMS_METADATA.SET_TRANSFORM_PARAM(DBMS_METADATA.SESSION_TRANSFORM,'STORAGE',FALSE) ;
	EXEC DBMS_METADATA.SET_TRANSFORM_PARAM(DBMS_METADATA.SESSION_TRANSFORM,'SEGMENT_ATTRIBUTES',FALSE) ;
	EXEC DBMS_METADATA.SET_TRANSFORM_PARAM(DBMS_METADATA.SESSION_TRANSFORM,'TABLESPACE',FALSE) ;
	EXEC DBMS_METADATA.SET_TRANSFORM_PARAM(DBMS_METADATA.SESSION_TRANSFORM,'SQLTERMINATOR',FALSE) ;
	EXEC DBMS_METADATA.SET_TRANSFORM_PARAM(DBMS_METADATA.SESSION_TRANSFORM,'PRETTY',TRUE) ;
	EXEC DBMS_METADATA.SET_TRANSFORM_PARAM(DBMS_METADATA.SESSION_TRANSFORM,'BODY',FALSE) ;
	EXEC DBMS_METADATA.SET_TRANSFORM_PARAM(DBMS_METADATA.SESSION_TRANSFORM,'CONSTRAINTS',TRUE) ;
	EXEC DBMS_METADATA.SET_TRANSFORM_PARAM(DBMS_METADATA.SESSION_TRANSFORM,'PARTITIONING',TRUE) ;

ORANGE : 
	SELECT DBA_SCHEMA.FN_EXTRACT_TABLE_DDL('OWNER','TABLE_NAME') AS DDL FROM DUAL;

SQLPLUS :
	SET LONG 30000
	SET LINESIZE 200
	SET PAGESIZE 0
	SELECT DBA_SCHEMA.FN_EXTRACT_TABLE_DDL('OWNER','TABLE_NAME') AS DDL FROM DUAL;
	
	SELECT DBA_SCHEMA.FN_EXTRACT_TABLE_DDL('DBA_SCHEMA','TEST_TABLE') AS DDL FROM DUAL;
	
------------------------------------------ REQUIRED PRIVILEGE ------------------------------------------
GRANT SELECT ANY DICTIONARY TO DBA_SCHEMA; -- PRIVILEGE REQUIRED BY FUNCTION OWNER
*/

    V_OWNER IN VARCHAR2
  , V_TABLE_NAME IN VARCHAR2
)
RETURN CLOB
AUTHID CURRENT_USER
AS
    V_DDL CLOB;
BEGIN
    FOR CUR_DDL IN (
    SELECT DDL 
      FROM (
    SELECT E.OWNER
         , E.OBJECT_NAME
         , E.OBJECT_TYPE
         , E.TABLESPACE_NAME
--     , E.CONSTRAINT_TYPE
--     , E.UNIQUENESS
         , REPLACE(CASE WHEN E.CONSTRAINT_TYPE = 'P' AND E.UNIQUENESS = 'UNIQUE' THEN SUBSTR(E.DDL, 1, INSTR(E.DDL, 'CREATE UNIQUE INDEX') - 1) || 'TABLESPACE ' || E.TABLESPACE_NAME || ';'
           WHEN E.CONSTRAINT_TYPE = 'P' AND E.UNIQUENESS = 'NONUNIQUE' THEN SUBSTR(E.DDL, 1, INSTR(E.DDL, 'CREATE INDEX') - 1) || 'TABLESPACE ' || E.TABLESPACE_NAME || ';'
           ELSE E.DDL || CHR(13) || CHR(10) || '  TABLESPACE ' || E.TABLESPACE_NAME || ';'
           END,'NOT NULL ENABLE', 'NOT NULL') AS DDL
      FROM (SELECT A.OWNER
                 , A.TABLE_NAME AS OBJECT_NAME
                 , 'TABLE' AS OBJECT_TYPE
                 , NVL(A.TABLESPACE_NAME,B.DEF_TABLESPACE_NAME) TABLESPACE_NAME
                 , DBMS_METADATA.GET_DDL('TABLE', A.TABLE_NAME, A.OWNER) DDL
                 , C.CONSTRAINT_TYPE
                 , D.UNIQUENESS
              FROM DBA_TABLES A
                 , DBA_PART_TABLES B
                 , DBA_CONSTRAINTS C
                 , DBA_INDEXES D
             WHERE A.OWNER = B.OWNER (+)
               AND A.TABLE_NAME = B.TABLE_NAME (+)
               AND A.OWNER = C.OWNER (+)
               AND A.TABLE_NAME = C.TABLE_NAME (+)
               AND C.CONSTRAINT_TYPE (+) = 'P'
               AND A.OWNER = D.OWNER (+)
               AND A.TABLE_NAME = D.TABLE_NAME (+)
               AND C.INDEX_NAME = D.INDEX_NAME (+)
               AND A.OWNER = V_OWNER
               AND A.TABLE_NAME  = V_TABLE_NAME
           ) E
--    SELECT A.OWNER -- 해당 버전은 빠르지만 NOT NULL이 추가되지 않음. 사용하려면 EXEC DBMS_METADATA.SET_TRANSFORM_PARAM(DBMS_METADATA.SESSION_TRANSFORM,'CONSTRAINTS',TRUE) ; 로 설정해야 함
--         , A.TABLE_NAME AS OBJECT_NAME
--         , 'TABLE' AS OBJECT_TYPE
--         , NVL(A.TABLESPACE_NAME,B.DEF_TABLESPACE_NAME) TABLESPACE_NAME
--         , DBMS_METADATA.GET_DDL('TABLE', A.TABLE_NAME, A.OWNER) || CHR(13) || CHR(10) || ' TABLESPACE ' || NVL(A.TABLESPACE_NAME,B.DEF_TABLESPACE_NAME) || ';' DDL
--         , SUBSTR(DBMS_METADATA.GET_DDL('TABLE', A.TABLE_NAME, A.OWNER), 1, INSTR(DBMS_METADATA.GET_DDL('TABLE', A.TABLE_NAME, A.OWNER), 'CREATE UNIQUE INDEX') - 1 ) || 'TABLESPACE ' || NVL(A.TABLESPACE_NAME,B.DEF_TABLESPACE_NAME) || ';' DDL2
--      FROM DBA_TABLES A
--         , DBA_PART_TABLES B
--     WHERE A.OWNER = B.OWNER (+)
--       AND A.TABLE_NAME = B.TABLE_NAME (+)
--       AND A.OWNER = V_OWNER
--       AND A.TABLE_NAME = V_TABLE_NAME
     UNION ALL
    SELECT A.OWNER
         , A.INDEX_NAME
         , 'INDEX' AS OBJECT_TYPE
         , NVL(A.TABLESPACE_NAME, B.DEF_TABLESPACE_NAME) TABLESPACE_NAME
         , TO_CLOB('CREATE ' || DECODE(A.UNIQUENESS, 'UNIQUE', 'UNIQUE', NULL) || ' INDEX "' || A.OWNER || '"."' || A.INDEX_NAME || '" ON "' || A.OWNER || '"."' || A.TABLE_NAME || '" ("' || 
           LISTAGG(C.COLUMN_NAME, '", "') WITHIN GROUP(ORDER BY C.COLUMN_POSITION) || '") ' || CHR(13) || CHR(10) || 
           DECODE(A.PARTITIONED, 'YES', 'LOCAL', NULL) || ' TABLESPACE ' || NVL(A.TABLESPACE_NAME, B.DEF_TABLESPACE_NAME) ||' PARALLEL 16 NOLOGGING;' || CHR(13) || CHR(10) || 
           'ALTER INDEX ' || A.OWNER || '.' || A.INDEX_NAME || ' NOPARALLEL LOGGING;') AS DDL
      FROM DBA_INDEXES A
         , DBA_PART_INDEXES B
         , DBA_IND_COLUMNS C 
     WHERE A.OWNER = B.OWNER (+)
       AND A.INDEX_NAME = B.INDEX_NAME (+)
       AND A.OWNER = C.INDEX_OWNER 
       AND A.INDEX_NAME = C.INDEX_NAME
       AND A.OWNER = V_OWNER
       AND A.TABLE_NAME = V_TABLE_NAME
     GROUP BY A.OWNER, A.INDEX_NAME, A.TABLESPACE_NAME, B.DEF_TABLESPACE_NAME, A.UNIQUENESS, A.TABLE_NAME, A.PARTITIONED
--    SELECT A.OWNER
--         , A.INDEX_NAME
--         , 'INDEX' AS OBJECT_TYPE
--         , NVL(A.TABLESPACE_NAME, B.DEF_TABLESPACE_NAME) TABLESPACE_NAME
--         , CASE WHEN A.PARTITIONED = 'NO' THEN DBMS_METADATA.GET_DDL('INDEX', A.INDEX_NAME, A.OWNER) || ' TABLESPACE ' || NVL(A.TABLESPACE_NAME, B.DEF_TABLESPACE_NAME) 
--           ELSE SUBSTR(DBMS_METADATA.GET_DDL('INDEX', A.INDEX_NAME, A.OWNER), 1, INSTR(DBMS_METADATA.GET_DDL('INDEX', A.INDEX_NAME, A.OWNER), 'LOCAL' ) + 5) || ' TABLESPACE ' || NVL(A.TABLESPACE_NAME, B.DEF_TABLESPACE_NAME)
--           END || ' PARALLEL 16 NOLOGGING;' || CHR(13) || CHR(10) || ' ALTER INDEX ' || A.OWNER || '.' || A.INDEX_NAME || ' NOPARALLEL LOGGING;' AS DDL
--      FROM DBA_INDEXES A
--         , DBA_PART_INDEXES B
--     WHERE A.OWNER = B.OWNER (+)
--       AND A.INDEX_NAME = B.INDEX_NAME (+)
--       AND A.OWNER = V_OWNER
--       AND A.TABLE_NAME = V_TABLE_NAME
     UNION ALL
    SELECT A.OWNER
         , A.CONSTRAINT_NAME AS OBJECT_NAME
         , 'CONSTRAINT' AS OBJECT_TYPE
         , NULL AS TABLESPACE_NAME
         , TO_CLOB('ALTER TABLE "' || A.OWNER || '"."' || A.TABLE_NAME || '" ADD CONSTRAINT "' || A.CONSTRAINT_NAME || 
           '" PRIMARY KEY ("' || LISTAGG(B.COLUMN_NAME, '", "') WITHIN GROUP (ORDER BY B.POSITION) || '")' || DECODE(C.INDEX_NAME, NULL, NULL, ' USING INDEX "' || C.INDEX_NAME || '"' ) || ';') AS DDL
      FROM DBA_CONSTRAINTS A
         , DBA_CONS_COLUMNS B
         , DBA_INDEXES C 
     WHERE A.OWNER = B.OWNER
       AND A.CONSTRAINT_NAME = B.CONSTRAINT_NAME
       AND A.OWNER = C.OWNER (+)
       AND A.CONSTRAINT_NAME = C.INDEX_NAME (+)
       AND A.CONSTRAINT_TYPE = 'P'
       AND A.OWNER = V_OWNER
       AND A.TABLE_NAME = V_TABLE_NAME
     GROUP BY A.OWNER, A.TABLE_NAME, A.CONSTRAINT_NAME, C.INDEX_NAME
--    SELECT A.OWNER
--         , A.CONSTRAINT_NAME AS OBJECT_NAME
--         , 'CONSTRAINT' AS OBJECT_TYPE
--         , NULL AS TABLESPACE_NAME
--         , REPLACE(DBMS_METADATA.GET_DDL('CONSTRAINT', A.CONSTRAINT_NAME, A.OWNER), '  ENABLE', '') || ';' || CHR(13) || CHR(10) AS DDL
--      FROM DBA_CONSTRAINTS A
--     WHERE A.CONSTRAINT_TYPE = 'P'
--       AND A.OWNER = V_OWNER
--       AND A.TABLE_NAME = V_TABLE_NAME
     UNION ALL
    SELECT A.OWNER
         , A.TABLE_NAME AS OBJECT_NAME
         , 'TABLE_COMMENT' AS OBJECT_TYPE
         , NULL AS TABLESPACE_NAME
         , TO_CLOB('COMMENT ON TABLE ' || A.OWNER || '.' || A.TABLE_NAME || ' IS ''' || A.COMMENTS || ''';') AS DDL
      FROM DBA_TAB_COMMENTS A
     WHERE A.OWNER = V_OWNER
       AND A.TABLE_NAME = V_TABLE_NAME
     UNION ALL
    SELECT A.OWNER
         , A.COLUMN_NAME AS OBJECT_NAME
         , 'COLUMN_COMMENT' AS OBJECT_TYPE
         , NULL AS TABLESPACE_NAME
         , TO_CLOB('COMMENT ON COLUMN ' || A.OWNER || '.' || A.TABLE_NAME || '.' || A.COLUMN_NAME || ' IS ''' || A.COMMENTS || ''';') AS DDL
      FROM DBA_COL_COMMENTS A
     WHERE A.OWNER = V_OWNER
       AND A.TABLE_NAME = V_TABLE_NAME
     UNION ALL
    SELECT A.OWNER
         , A.SYNONYM_NAME AS OBJECT_NAME
         , 'SYNOYNM' AS OBJECT_TYPE
         , NULL AS TABLESPACE_NAME
         , TO_CLOB('CREATE OR REPLACE SYNONYM ' || A.OWNER || '.' || A.SYNONYM_NAME || ' FOR ' || A.TABLE_OWNER || '.' || A.TABLE_NAME || DECODE(A.DB_LINK, NULL, NULL, '@' || A.DB_LINK) || ';') AS DDL
      FROM DBA_SYNONYMS A
     WHERE A.TABLE_OWNER = V_OWNER
       AND A.TABLE_NAME = V_TABLE_NAME
     UNION ALL
    SELECT A.OWNER
         , A.TABLE_NAME AS OBJECT_NAME
         , 'PRIVILEGE' AS OBJECT_TYPE
         , NULL AS TABLESPACE_NAME
         , TO_CLOB('GRANT ' || LISTAGG(A.PRIVILEGE, ',') || ' ON ' || A.OWNER || '.' || A.TABLE_NAME || ' TO ' || A.GRANTEE || ';') AS DDL
      FROM DBA_TAB_PRIVS A
     WHERE A.OWNER = V_OWNER
       AND A.TABLE_NAME = V_TABLE_NAME
     GROUP BY A.OWNER, A.TABLE_NAME, A.GRANTEE
           )
     ) LOOP
        V_DDL := V_DDL || CUR_DDL.DDL || CHR(13) || CHR(10);
     END LOOP;
    
    RETURN V_DDL;
END;


/* 테이블 부분도 직접 만들어 보려 했으나 DEFAULT 컬럼이 LONG이라서 어려움이 있었음.
SELECT OWNER
     , TABLE_NAME
     , COLUMN_NAME || CHR(9) || CHR(9) || DATA_TYPE || 
       DECODE(DATA_TYPE, 'VARCHAR2', '(' || DATA_LENGTH || ')' 
                       , 'NVARCHAR2', '(' || DATA_LENGTH || ')' 
                       , 'CHAR', '(' || DATA_LENGTH || ')' 
                       , 'RAW', '(' || DATA_LENGTH || ')' 
                       , 'DATE', NULL 
                       , 'TIMESTAMP', NULL 
                       , 'CLOB', NULL 
                       , 'BLOB', NULL 
                       , 'NCLOB', NULL 
                       , 'LONG', NULL 
                       , 'NUMBER', '(' || DATA_PRECISION || ',' || DATA_SCALE || ')' 
             ) ||

       DECODE(NULLABLE, 'N', ' NOT NULL') COL_DDL
     , DATA_DEFAULT -- CANNOT CONCATENATE THIS [LONG] COLUMN
  FROM DBA_TAB_COLUMNS
 WHERE OWNER = :OWNER
   AND TABLE_NAME = :TABLE_NAME
 ORDER BY COLUMN_ID;
 */